//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 20 files.
  struct file {
    /// Resource file `Debug.xcconfig`.
    static let debugXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Debug", pathExtension: "xcconfig")
    /// Resource file `Disease.graphql`.
    static let diseaseGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Disease", pathExtension: "graphql")
    /// Resource file `Generator.xcconfig`.
    static let generatorXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Generator", pathExtension: "xcconfig")
    /// Resource file `GetCatalogPlants.graphql`.
    static let getCatalogPlantsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GetCatalogPlants", pathExtension: "graphql")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Login.graphql`.
    static let loginGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Login", pathExtension: "graphql")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `PlantById.graphql`.
    static let plantByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PlantById", pathExtension: "graphql")
    /// Resource file `PlantToGarden.graphql`.
    static let plantToGardenGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PlantToGarden", pathExtension: "graphql")
    /// Resource file `Recognize.graphql`.
    static let recognizeGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Recognize", pathExtension: "graphql")
    /// Resource file `Release.xcconfig`.
    static let releaseXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Release", pathExtension: "xcconfig")
    /// Resource file `SFProDisplay-Bold.ttf`.
    static let sfProDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Bold", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Medium.ttf`.
    static let sfProDisplayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Medium", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Regular.ttf`.
    static let sfProDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Regular", pathExtension: "ttf")
    /// Resource file `SetFavoritePlant.graphql`.
    static let setFavoritePlantGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SetFavoritePlant", pathExtension: "graphql")
    /// Resource file `Staging.xcconfig`.
    static let stagingXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging", pathExtension: "xcconfig")
    /// Resource file `StartDiagnose.graphql`.
    static let startDiagnoseGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StartDiagnose", pathExtension: "graphql")
    /// Resource file `StartRecognition.graphql`.
    static let startRecognitionGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StartRecognition", pathExtension: "graphql")
    /// Resource file `UploadMedia.graphql`.
    static let uploadMediaGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UploadMedia", pathExtension: "graphql")
    /// Resource file `schema.json`.
    static let schemaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "schema", pathExtension: "json")

    /// `bundle.url(forResource: "Debug", withExtension: "xcconfig")`
    static func debugXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.debugXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Disease", withExtension: "graphql")`
    static func diseaseGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.diseaseGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Generator", withExtension: "xcconfig")`
    static func generatorXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.generatorXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GetCatalogPlants", withExtension: "graphql")`
    static func getCatalogPlantsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getCatalogPlantsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Login", withExtension: "graphql")`
    static func loginGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PlantById", withExtension: "graphql")`
    static func plantByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plantByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PlantToGarden", withExtension: "graphql")`
    static func plantToGardenGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plantToGardenGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Recognize", withExtension: "graphql")`
    static func recognizeGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recognizeGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Release", withExtension: "xcconfig")`
    static func releaseXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.releaseXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Bold", withExtension: "ttf")`
    static func sfProDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Medium", withExtension: "ttf")`
    static func sfProDisplayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Regular", withExtension: "ttf")`
    static func sfProDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SetFavoritePlant", withExtension: "graphql")`
    static func setFavoritePlantGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.setFavoritePlantGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Staging", withExtension: "xcconfig")`
    static func stagingXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StartDiagnose", withExtension: "graphql")`
    static func startDiagnoseGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.startDiagnoseGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StartRecognition", withExtension: "graphql")`
    static func startRecognitionGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.startRecognitionGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UploadMedia", withExtension: "graphql")`
    static func uploadMediaGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uploadMediaGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "schema", withExtension: "json")`
    static func schemaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.schemaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SFProDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SFProDisplay-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFProDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 77 images.
  struct image {
    /// Image `avatar_ic`.
    static let avatar_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_ic")
    /// Image `background_main`.
    static let background_main = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_main")
    /// Image `congrads_view_flower_ic`.
    static let congrads_view_flower_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "congrads_view_flower_ic")
    /// Image `garden_back_ic`.
    static let garden_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_back_ic")
    /// Image `ic_background`.
    static let ic_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_background")
    /// Image `ic_choose_identify_diagnosis`.
    static let ic_choose_identify_diagnosis = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_diagnosis")
    /// Image `ic_choose_identify_photo`.
    static let ic_choose_identify_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_photo")
    /// Image `ic_diagnosis_checkmark`.
    static let ic_diagnosis_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_checkmark")
    /// Image `ic_diagnosis_close`.
    static let ic_diagnosis_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_close")
    /// Image `ic_diagnosis_onboarding_1`.
    static let ic_diagnosis_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_1")
    /// Image `ic_diagnosis_onboarding_2`.
    static let ic_diagnosis_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_2")
    /// Image `ic_diagnosis_onboarding_3`.
    static let ic_diagnosis_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_3")
    /// Image `ic_diagnosis_onboarding_4`.
    static let ic_diagnosis_onboarding_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_4")
    /// Image `ic_diagnosis_phonendoscope`.
    static let ic_diagnosis_phonendoscope = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_phonendoscope")
    /// Image `ic_identify_checkmark`.
    static let ic_identify_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_checkmark")
    /// Image `ic_identify_close`.
    static let ic_identify_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_close")
    /// Image `ic_identify_flash_off`.
    static let ic_identify_flash_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_off")
    /// Image `ic_identify_flash_on`.
    static let ic_identify_flash_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_on")
    /// Image `ic_identify_gallery`.
    static let ic_identify_gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_gallery")
    /// Image `ic_identify_no_data`.
    static let ic_identify_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_no_data")
    /// Image `ic_identify_onboarding_1`.
    static let ic_identify_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_1")
    /// Image `ic_identify_onboarding_2`.
    static let ic_identify_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_2")
    /// Image `ic_identify_onboarding_3`.
    static let ic_identify_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_3")
    /// Image `ic_identify_photo_black`.
    static let ic_identify_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_black")
    /// Image `ic_identify_photo_rectangle`.
    static let ic_identify_photo_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_rectangle")
    /// Image `ic_identify_photo_white`.
    static let ic_identify_photo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_white")
    /// Image `ic_login_apple`.
    static let ic_login_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_apple")
    /// Image `ic_login_bg`.
    static let ic_login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_bg")
    /// Image `ic_login_close`.
    static let ic_login_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_close")
    /// Image `ic_login_facebook`.
    static let ic_login_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_facebook")
    /// Image `ic_login_google`.
    static let ic_login_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_google")
    /// Image `ic_login_instagram`.
    static let ic_login_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_instagram")
    /// Image `ic_login_logo`.
    static let ic_login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_logo")
    /// Image `ic_plants_add`.
    static let ic_plants_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_add")
    /// Image `ic_plants_backToTop`.
    static let ic_plants_backToTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_backToTop")
    /// Image `ic_plants_close`.
    static let ic_plants_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_close")
    /// Image `ic_plants_favorite`.
    static let ic_plants_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_favorite")
    /// Image `ic_plants_line`.
    static let ic_plants_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_line")
    /// Image `ic_plants_photo`.
    static let ic_plants_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_photo")
    /// Image `ic_plants_search`.
    static let ic_plants_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_search")
    /// Image `ic_plants_unfavorite`.
    static let ic_plants_unfavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unfavorite")
    /// Image `ic_plants_unique`.
    static let ic_plants_unique = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unique")
    /// Image `ic_tab_garden_act`.
    static let ic_tab_garden_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden_act")
    /// Image `ic_tab_garden`.
    static let ic_tab_garden = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden")
    /// Image `ic_tab_menu_act`.
    static let ic_tab_menu_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu_act")
    /// Image `ic_tab_menu`.
    static let ic_tab_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu")
    /// Image `ic_tab_plants_act`.
    static let ic_tab_plants_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants_act")
    /// Image `ic_tab_plants`.
    static let ic_tab_plants = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants")
    /// Image `ic_tab_schedule_act`.
    static let ic_tab_schedule_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule_act")
    /// Image `ic_tab_schedule`.
    static let ic_tab_schedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule")
    /// Image `ic_wishlist_no_data`.
    static let ic_wishlist_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wishlist_no_data")
    /// Image `icn_diagnose`.
    static let icn_diagnose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_diagnose")
    /// Image `plants_detail_about_deciduous_ic`.
    static let plants_detail_about_deciduous_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_deciduous_ic")
    /// Image `plants_detail_about_habit_ic`.
    static let plants_detail_about_habit_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_habit_ic")
    /// Image `plants_detail_about_hardiness_ic`.
    static let plants_detail_about_hardiness_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_hardiness_ic")
    /// Image `plants_detail_about_height_ic`.
    static let plants_detail_about_height_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_height_ic")
    /// Image `plants_detail_about_moisture_ic`.
    static let plants_detail_about_moisture_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_moisture_ic")
    /// Image `plants_detail_about_ph_ic`.
    static let plants_detail_about_ph_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_ph_ic")
    /// Image `plants_detail_about_shade_ic`.
    static let plants_detail_about_shade_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_shade_ic")
    /// Image `plants_detail_about_soil_ic`.
    static let plants_detail_about_soil_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_soil_ic")
    /// Image `plants_detail_added_favorites_ic`.
    static let plants_detail_added_favorites_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_added_favorites_ic")
    /// Image `plants_detail_back_ic`.
    static let plants_detail_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_back_ic")
    /// Image `plants_detail_favorite_ic`.
    static let plants_detail_favorite_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_favorite_ic")
    /// Image `plants_detail_green_ic`.
    static let plants_detail_green_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_green_ic")
    /// Image `plants_detail_humidity_ic`.
    static let plants_detail_humidity_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_humidity_ic")
    /// Image `plants_detail_misting_ic`.
    static let plants_detail_misting_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_misting_ic")
    /// Image `plants_detail_no_favorite_ic`.
    static let plants_detail_no_favorite_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_no_favorite_ic")
    /// Image `plants_detail_removed_favorites_ic`.
    static let plants_detail_removed_favorites_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_removed_favorites_ic")
    /// Image `plants_detail_rotating_ic`.
    static let plants_detail_rotating_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_rotating_ic")
    /// Image `plants_detail_watering_ic`.
    static let plants_detail_watering_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_watering_ic")
    /// Image `recognize_archive_ic`.
    static let recognize_archive_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "recognize_archive_ic")
    /// Image `temp_detail_ic`.
    static let temp_detail_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_detail_ic")
    /// Image `temp_onboarding_1_ic`.
    static let temp_onboarding_1_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_1_ic")
    /// Image `temp_onboarding_2_ic`.
    static let temp_onboarding_2_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_2_ic")
    /// Image `temp_onboarding_3_ic`.
    static let temp_onboarding_3_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_3_ic")
    /// Image `temp_plants_ic`.
    static let temp_plants_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_plants_ic")
    /// Image `temp`.
    static let temp = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_ic", bundle: ..., traitCollection: ...)`
    static func avatar_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_main", bundle: ..., traitCollection: ...)`
    static func background_main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "congrads_view_flower_ic", bundle: ..., traitCollection: ...)`
    static func congrads_view_flower_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.congrads_view_flower_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_back_ic", bundle: ..., traitCollection: ...)`
    static func garden_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_background", bundle: ..., traitCollection: ...)`
    static func ic_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_diagnosis", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_diagnosis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_diagnosis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_photo", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_close", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_4", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_phonendoscope", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_phonendoscope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_phonendoscope, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_identify_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_close", bundle: ..., traitCollection: ...)`
    static func ic_identify_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_off", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_on", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_gallery", bundle: ..., traitCollection: ...)`
    static func ic_identify_gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_no_data", bundle: ..., traitCollection: ...)`
    static func ic_identify_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_black", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_rectangle", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_white", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_apple", bundle: ..., traitCollection: ...)`
    static func ic_login_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_bg", bundle: ..., traitCollection: ...)`
    static func ic_login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_close", bundle: ..., traitCollection: ...)`
    static func ic_login_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_facebook", bundle: ..., traitCollection: ...)`
    static func ic_login_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_google", bundle: ..., traitCollection: ...)`
    static func ic_login_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_instagram", bundle: ..., traitCollection: ...)`
    static func ic_login_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_logo", bundle: ..., traitCollection: ...)`
    static func ic_login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_add", bundle: ..., traitCollection: ...)`
    static func ic_plants_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_backToTop", bundle: ..., traitCollection: ...)`
    static func ic_plants_backToTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_backToTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_close", bundle: ..., traitCollection: ...)`
    static func ic_plants_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_favorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_line", bundle: ..., traitCollection: ...)`
    static func ic_plants_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_photo", bundle: ..., traitCollection: ...)`
    static func ic_plants_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_search", bundle: ..., traitCollection: ...)`
    static func ic_plants_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unfavorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_unfavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unfavorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unique", bundle: ..., traitCollection: ...)`
    static func ic_plants_unique(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unique, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wishlist_no_data", bundle: ..., traitCollection: ...)`
    static func ic_wishlist_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wishlist_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_diagnose", bundle: ..., traitCollection: ...)`
    static func icn_diagnose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_diagnose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_deciduous_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_deciduous_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_deciduous_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_habit_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_habit_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_habit_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_hardiness_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_hardiness_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_hardiness_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_height_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_height_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_height_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_moisture_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_moisture_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_moisture_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_ph_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_ph_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_ph_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_shade_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_shade_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_shade_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_soil_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_soil_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_soil_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_added_favorites_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_added_favorites_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_added_favorites_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_back_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_favorite_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_favorite_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_favorite_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_green_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_green_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_green_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_humidity_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_humidity_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_humidity_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_misting_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_misting_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_misting_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_no_favorite_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_no_favorite_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_no_favorite_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_removed_favorites_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_removed_favorites_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_removed_favorites_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_rotating_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_rotating_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_rotating_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_watering_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_watering_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_watering_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recognize_archive_ic", bundle: ..., traitCollection: ...)`
    static func recognize_archive_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recognize_archive_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp", bundle: ..., traitCollection: ...)`
    static func temp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_detail_ic", bundle: ..., traitCollection: ...)`
    static func temp_detail_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_detail_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_1_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_1_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_1_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_2_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_2_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_2_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_3_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_3_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_3_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_plants_ic", bundle: ..., traitCollection: ...)`
    static func temp_plants_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_plants_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 25 nibs.
  struct nib {
    /// Nib `ChooseIdentifyController`.
    static let chooseIdentifyController = _R.nib._ChooseIdentifyController()
    /// Nib `CongradsView`.
    static let congradsView = _R.nib._CongradsView()
    /// Nib `DetailAboutView`.
    static let detailAboutView = _R.nib._DetailAboutView()
    /// Nib `DetailCaresView`.
    static let detailCaresView = _R.nib._DetailCaresView()
    /// Nib `DiagnosisController`.
    static let diagnosisController = _R.nib._DiagnosisController()
    /// Nib `DiseaseArchiveCell`.
    static let diseaseArchiveCell = _R.nib._DiseaseArchiveCell()
    /// Nib `DiseaseArchiveViewController`.
    static let diseaseArchiveViewController = _R.nib._DiseaseArchiveViewController()
    /// Nib `GardenButtonCell`.
    static let gardenButtonCell = _R.nib._GardenButtonCell()
    /// Nib `GardenViewCell`.
    static let gardenViewCell = _R.nib._GardenViewCell()
    /// Nib `IdentifyController`.
    static let identifyController = _R.nib._IdentifyController()
    /// Nib `LanguageCell`.
    static let languageCell = _R.nib._LanguageCell()
    /// Nib `LanguageController`.
    static let languageController = _R.nib._LanguageController()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `MenuAccauntInfoTableViewCell`.
    static let menuAccauntInfoTableViewCell = _R.nib._MenuAccauntInfoTableViewCell()
    /// Nib `MenuItemTableViewCell`.
    static let menuItemTableViewCell = _R.nib._MenuItemTableViewCell()
    /// Nib `OnboardingFirsController`.
    static let onboardingFirsController = _R.nib._OnboardingFirsController()
    /// Nib `OnboardingPageController`.
    static let onboardingPageController = _R.nib._OnboardingPageController()
    /// Nib `OnboardingSecondController`.
    static let onboardingSecondController = _R.nib._OnboardingSecondController()
    /// Nib `OnboardingThreeController`.
    static let onboardingThreeController = _R.nib._OnboardingThreeController()
    /// Nib `PlantCollectionCell`.
    static let plantCollectionCell = _R.nib._PlantCollectionCell()
    /// Nib `PlantsDetailController`.
    static let plantsDetailController = _R.nib._PlantsDetailController()
    /// Nib `RecognizeArchiveController`.
    static let recognizeArchiveController = _R.nib._RecognizeArchiveController()
    /// Nib `SplashController`.
    static let splashController = _R.nib._SplashController()
    /// Nib `SubcribeController`.
    static let subcribeController = _R.nib._SubcribeController()
    /// Nib `WishListController`.
    static let wishListController = _R.nib._WishListController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChooseIdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chooseIdentifyController) instead")
    static func chooseIdentifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseIdentifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CongradsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.congradsView) instead")
    static func congradsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.congradsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailAboutView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailAboutView) instead")
    static func detailAboutView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailAboutView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailCaresView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailCaresView) instead")
    static func detailCaresView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailCaresView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiagnosisController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diagnosisController) instead")
    static func diagnosisController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diagnosisController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiseaseArchiveCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diseaseArchiveCell) instead")
    static func diseaseArchiveCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diseaseArchiveCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiseaseArchiveViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diseaseArchiveViewController) instead")
    static func diseaseArchiveViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diseaseArchiveViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenButtonCell) instead")
    static func gardenButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenButtonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenViewCell) instead")
    static func gardenViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.identifyController) instead")
    static func identifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.identifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageCell) instead")
    static func languageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageController) instead")
    static func languageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuAccauntInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuAccauntInfoTableViewCell) instead")
    static func menuAccauntInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuAccauntInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuItemTableViewCell) instead")
    static func menuItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingFirsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingFirsController) instead")
    static func onboardingFirsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingFirsController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingPageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingPageController) instead")
    static func onboardingPageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingPageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingSecondController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingSecondController) instead")
    static func onboardingSecondController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingSecondController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingThreeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingThreeController) instead")
    static func onboardingThreeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingThreeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantCollectionCell) instead")
    static func plantCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantsDetailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantsDetailController) instead")
    static func plantsDetailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantsDetailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecognizeArchiveController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recognizeArchiveController) instead")
    static func recognizeArchiveController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recognizeArchiveController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashController) instead")
    static func splashController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubcribeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subcribeController) instead")
    static func subcribeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subcribeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WishListController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wishListController) instead")
    static func wishListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wishListController)
    }
    #endif

    static func chooseIdentifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chooseIdentifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func congradsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CongradsView? {
      return R.nib.congradsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CongradsView
    }

    static func detailAboutView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailAboutView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailCaresView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailCaresView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func diagnosisController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.diagnosisController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func diseaseArchiveCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiseaseArchiveCell? {
      return R.nib.diseaseArchiveCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiseaseArchiveCell
    }

    static func diseaseArchiveViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.diseaseArchiveViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
      return R.nib.gardenButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
    }

    static func gardenViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
      return R.nib.gardenViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
    }

    static func identifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.identifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func languageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
      return R.nib.languageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
    }

    static func languageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.languageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuAccauntInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuAccauntInfoTableViewCell? {
      return R.nib.menuAccauntInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuAccauntInfoTableViewCell
    }

    static func menuItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuItemTableViewCell? {
      return R.nib.menuItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuItemTableViewCell
    }

    static func onboardingFirsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingFirsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingPageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingPageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingSecondController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingSecondController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingThreeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingThreeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func plantCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
      return R.nib.plantCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
    }

    static func plantsDetailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.plantsDetailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func recognizeArchiveController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.recognizeArchiveController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func subcribeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.subcribeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func wishListController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.wishListController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DiseaseArchiveCell`.
    static let diseaseArchiveCell: Rswift.ReuseIdentifier<DiseaseArchiveCell> = Rswift.ReuseIdentifier(identifier: "DiseaseArchiveCell")
    /// Reuse identifier `LanguageCell`.
    static let languageCell: Rswift.ReuseIdentifier<LanguageCell> = Rswift.ReuseIdentifier(identifier: "LanguageCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 153 localization keys.
    struct localizable {
      /// en translation: A
      ///
      /// Locales: en, es
      static let climate_ph_a = Rswift.StringResource(key: "climate_ph_a", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: AN
      ///
      /// Locales: en, es
      static let climate_ph_an = Rswift.StringResource(key: "climate_ph_an", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ANB
      ///
      /// Locales: en, es
      static let climate_ph_anb = Rswift.StringResource(key: "climate_ph_anb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, es
      static let plant_detail_about = Rswift.StringResource(key: "plant_detail_about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Unique
      ///
      /// Locales: en, es
      static let plants_uniquePlantButton = Rswift.StringResource(key: "plants_uniquePlantButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add to My Garden
      ///
      /// Locales: en, es
      static let plant_detail_add_to_my_garden = Rswift.StringResource(key: "plant_detail_add_to_my_garden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Added in Wishlist
      ///
      /// Locales: en, es
      static let plant_detail_added_to_wishlist = Rswift.StringResource(key: "plant_detail_added_to_wishlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Analyzing image
      ///
      /// Locales: en, es
      static let identify_analize_image = Rswift.StringResource(key: "identify_analize_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Annual Climber
      ///
      /// Locales: en, es
      static let climate_habit_annual_climber = Rswift.StringResource(key: "climate_habit_annual_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Annual Perennial
      ///
      /// Locales: en, es
      static let climate_habit_annual_perennial = Rswift.StringResource(key: "climate_habit_annual_perennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure want log out?
      ///
      /// Locales: en, es
      static let allert_logout_message = Rswift.StringResource(key: "allert_logout_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: B
      ///
      /// Locales: en, es
      static let climate_ph_b = Rswift.StringResource(key: "climate_ph_b", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, es
      static let plant_detail_back = Rswift.StringResource(key: "plant_detail_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, es
      static let wish_list_back = Rswift.StringResource(key: "wish_list_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back to top
      ///
      /// Locales: en, es
      static let plants_backToTop = Rswift.StringResource(key: "plants_backToTop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Bamboo
      ///
      /// Locales: en, es
      static let climate_habit_bamboo = Rswift.StringResource(key: "climate_habit_bamboo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Become a Premium
      ///
      /// Locales: en, es
      static let subscription_title = Rswift.StringResource(key: "subscription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.
      ///
      /// Locales: en, es
      static let subscription_description = Rswift.StringResource(key: "subscription_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Biennial
      ///
      /// Locales: en, es
      static let climate_habit_biennial = Rswift.StringResource(key: "climate_habit_biennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Biennial Perennial
      ///
      /// Locales: en, es
      static let climate_habit_biennial_perennial = Rswift.StringResource(key: "climate_habit_biennial_perennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Billed %@
      ///
      /// Locales: en, es
      static let subscription_billed_with = Rswift.StringResource(key: "subscription_billed_with", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Bulb
      ///
      /// Locales: en, es
      static let climate_habit_bulb = Rswift.StringResource(key: "climate_habit_bulb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let choose_identify_cancel = Rswift.StringResource(key: "choose_identify_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel anytime
      ///
      /// Locales: en, es
      static let subscription_cancel_any_time = Rswift.StringResource(key: "subscription_cancel_any_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en, es
      static let plants_uniquePlantLabel = Rswift.StringResource(key: "plants_uniquePlantLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en, es
      static let diagnosis_capture = Rswift.StringResource(key: "diagnosis_capture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en, es
      static let identify_capture = Rswift.StringResource(key: "identify_capture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture sick part of Plant
      ///
      /// Locales: en, es
      static let diagnosis_capture_info = Rswift.StringResource(key: "diagnosis_capture_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares
      ///
      /// Locales: en, es
      static let plant_detail_cares = Rswift.StringResource(key: "plant_detail_cares", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Deciduous Unknown
      ///
      /// Locales: en, es
      static let climante_deciduous_unknown = Rswift.StringResource(key: "climante_deciduous_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Habit Unknown
      ///
      /// Locales: en, es
      static let climate_habit_unknown = Rswift.StringResource(key: "climate_habit_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Moisture Unknown
      ///
      /// Locales: en, es
      static let climate_moisture_unknown = Rswift.StringResource(key: "climate_moisture_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate PH Unknown
      ///
      /// Locales: en, es
      static let climate_ph_unknown = Rswift.StringResource(key: "climate_ph_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Shade Unknown
      ///
      /// Locales: en, es
      static let climate_shade_unknown = Rswift.StringResource(key: "climate_shade_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Soial Unknown
      ///
      /// Locales: en, es
      static let climate_soil_unknown = Rswift.StringResource(key: "climate_soil_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climber
      ///
      /// Locales: en, es
      static let climate_habit_climber = Rswift.StringResource(key: "climate_habit_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Congrads!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_title = Rswift.StringResource(key: "plant_add_to_garden_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: D
      ///
      /// Locales: en, es
      static let climate_moisture_d = Rswift.StringResource(key: "climate_moisture_d", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DM
      ///
      /// Locales: en, es
      static let climate_moisture_dm = Rswift.StringResource(key: "climate_moisture_dm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DMW
      ///
      /// Locales: en, es
      static let climate_moisture_dmw = Rswift.StringResource(key: "climate_moisture_dmw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DMWE
      ///
      /// Locales: en, es
      static let climate_moisture_dmwe = Rswift.StringResource(key: "climate_moisture_dmwe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Days
      ///
      /// Locales: en, es
      static let care_period_type_days = Rswift.StringResource(key: "care_period_type_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Deciduous
      ///
      /// Locales: en, es
      static let climate_deciduous_deciduous = Rswift.StringResource(key: "climate_deciduous_deciduous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose
      ///
      /// Locales: en, es
      static let diagnosis_title = Rswift.StringResource(key: "diagnosis_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose Disease
      ///
      /// Locales: en, es
      static let disease_archive_button = Rswift.StringResource(key: "disease_archive_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose Photo
      ///
      /// Locales: en, es
      static let diagnosis_preview_diagnose = Rswift.StringResource(key: "diagnosis_preview_diagnose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnosing in Progress
      ///
      /// Locales: en, es
      static let diagnosis_analyze_info = Rswift.StringResource(key: "diagnosis_analyze_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnosis
      ///
      /// Locales: en, es
      static let choose_identify_diagnosis = Rswift.StringResource(key: "choose_identify_diagnosis", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static let disease_archive_title = Rswift.StringResource(key: "disease_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static let menu_item_archive_disease = Rswift.StringResource(key: "menu_item_archive_disease", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en, es
      static let identify_result_info = Rswift.StringResource(key: "identify_result_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Evergreen
      ///
      /// Locales: en, es
      static let climate_deciduous_evergreen = Rswift.StringResource(key: "climate_deciduous_evergreen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en, es
      static let login_info = Rswift.StringResource(key: "login_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Explore catalog
      ///
      /// Locales: en, es
      static let plants_explore = Rswift.StringResource(key: "plants_explore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FS
      ///
      /// Locales: en, es
      static let climate_shade_fs = Rswift.StringResource(key: "climate_shade_fs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FSN
      ///
      /// Locales: en, es
      static let climate_shade_fsn = Rswift.StringResource(key: "climate_shade_fsn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Fern
      ///
      /// Locales: en, es
      static let climate_habit_fern = Rswift.StringResource(key: "climate_habit_fern", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Full-size image of Plant
      ///
      /// Locales: en, es
      static let identify_make_photo_info = Rswift.StringResource(key: "identify_make_photo_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Get access to unlimited Identify/nand Diagnosis Plants
      ///
      /// Locales: en, es
      static let subscription_sub_title = Rswift.StringResource(key: "subscription_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Great!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_great = Rswift.StringResource(key: "plant_add_to_garden_great", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Habit
      ///
      /// Locales: en, es
      static let climate_habit = Rswift.StringResource(key: "climate_habit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hardiness
      ///
      /// Locales: en, es
      static let climate_hardiness = Rswift.StringResource(key: "climate_hardiness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en, es
      static let climate_height = Rswift.StringResource(key: "climate_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Humidity
      ///
      /// Locales: en, es
      static let care_type_humidity = Rswift.StringResource(key: "care_type_humidity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify
      ///
      /// Locales: en, es
      static let choose_identify_identify = Rswift.StringResource(key: "choose_identify_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify Photo
      ///
      /// Locales: en, es
      static let identify_result_identify_photo = Rswift.StringResource(key: "identify_result_identify_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify Results:
      ///
      /// Locales: en, es
      static let identify_results = Rswift.StringResource(key: "identify_results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify my Plants
      ///
      /// Locales: en, es
      static let plants_identifier = Rswift.StringResource(key: "plants_identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en, es
      static let identify_result_title = Rswift.StringResource(key: "identify_result_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en, es
      static let identify_title = Rswift.StringResource(key: "identify_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en, es
      static let identify_info = Rswift.StringResource(key: "identify_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying plant
      ///
      /// Locales: en, es
      static let identify_analize_identify_plant = Rswift.StringResource(key: "identify_analize_identify_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invite friends (share app)
      ///
      /// Locales: en, es
      static let menu_item_share = Rswift.StringResource(key: "menu_item_share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: L
      ///
      /// Locales: en, es
      static let climate_soil_l = Rswift.StringResource(key: "climate_soil_l", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LM
      ///
      /// Locales: en, es
      static let climate_soil_lm = Rswift.StringResource(key: "climate_soil_lm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LMH
      ///
      /// Locales: en, es
      static let climate_soil_lmh = Rswift.StringResource(key: "climate_soil_lmh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, es
      static let menu_item_language = Rswift.StringResource(key: "menu_item_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, es
      static let menu_laguage_title = Rswift.StringResource(key: "menu_laguage_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, es
      static let menu_log_out = Rswift.StringResource(key: "menu_log_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Login with
      ///
      /// Locales: en, es
      static let login_loginWith = Rswift.StringResource(key: "login_loginWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, es
      static let climate_moisture_m = Rswift.StringResource(key: "climate_moisture_m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, es
      static let climate_soil_m = Rswift.StringResource(key: "climate_soil_m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MH
      ///
      /// Locales: en, es
      static let climate_soil_mh = Rswift.StringResource(key: "climate_soil_mh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MWE
      ///
      /// Locales: en, es
      static let climate_moisture_mwe = Rswift.StringResource(key: "climate_moisture_mwe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MWEWA
      ///
      /// Locales: en, es
      static let climate_moisture_mwewa = Rswift.StringResource(key: "climate_moisture_mwewa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en, es
      static let identify_make_photo_title = Rswift.StringResource(key: "identify_make_photo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static let diagnosis_onboarding_info = Rswift.StringResource(key: "diagnosis_onboarding_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static let diagnosis_preview_info = Rswift.StringResource(key: "diagnosis_preview_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en, es
      static let identify_overview_info = Rswift.StringResource(key: "identify_overview_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en, es
      static let identify_photo_quality_info = Rswift.StringResource(key: "identify_photo_quality_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: en, es
      static let menu_title = Rswift.StringResource(key: "menu_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Misting
      ///
      /// Locales: en, es
      static let care_type_misting = Rswift.StringResource(key: "care_type_misting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Moisture
      ///
      /// Locales: en, es
      static let climate_moisture = Rswift.StringResource(key: "climate_moisture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: More on Wiki
      ///
      /// Locales: en, es
      static let plant_detail_more_on_wiki = Rswift.StringResource(key: "plant_detail_more_on_wiki", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Mounths
      ///
      /// Locales: en, es
      static let care_period_type_mounths = Rswift.StringResource(key: "care_period_type_mounths", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: N
      ///
      /// Locales: en, es
      static let climate_ph_n = Rswift.StringResource(key: "climate_ph_n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: N
      ///
      /// Locales: en, es
      static let climate_shade_n = Rswift.StringResource(key: "climate_shade_n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NB
      ///
      /// Locales: en, es
      static let climate_ph_nb = Rswift.StringResource(key: "climate_ph_nb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, es
      static let allert_no = Rswift.StringResource(key: "allert_no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No problems detected
      ///
      /// Locales: en, es
      static let diagnosis_no_data = Rswift.StringResource(key: "diagnosis_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Overview
      ///
      /// Locales: en, es
      static let identify_overview_title = Rswift.StringResource(key: "identify_overview_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PH
      ///
      /// Locales: en, es
      static let climate_ph = Rswift.StringResource(key: "climate_ph", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Perennial
      ///
      /// Locales: en, es
      static let climate_habit_perenial = Rswift.StringResource(key: "climate_habit_perenial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Perennial Climber
      ///
      /// Locales: en, es
      static let climate_habit_perenial_climber = Rswift.StringResource(key: "climate_habit_perenial_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Photo quality
      ///
      /// Locales: en, es
      static let identify_photo_quality_title = Rswift.StringResource(key: "identify_photo_quality_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant is added in your Garden!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_info = Rswift.StringResource(key: "plant_add_to_garden_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please wait
      ///
      /// Locales: en, es
      static let activity_title = Rswift.StringResource(key: "activity_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Premium
      ///
      /// Locales: en, es
      static let choose_identify_premium = Rswift.StringResource(key: "choose_identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static let menu_item_privacy_policy = Rswift.StringResource(key: "menu_item_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static let subscription_privacy = Rswift.StringResource(key: "subscription_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rate app
      ///
      /// Locales: en, es
      static let menu_item_rate = Rswift.StringResource(key: "menu_item_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognize Plant
      ///
      /// Locales: en, es
      static let recognize_archive_button = Rswift.StringResource(key: "recognize_archive_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static let menu_item_archive_recognized = Rswift.StringResource(key: "menu_item_archive_recognized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static let recognize_archive_title = Rswift.StringResource(key: "recognize_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recurring monthly billing
      ///
      /// Locales: en, es
      static let subscription_recurring = Rswift.StringResource(key: "subscription_recurring", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Removed from Wishlist
      ///
      /// Locales: en, es
      static let plant_detail_removed_from_wishlist = Rswift.StringResource(key: "plant_detail_removed_from_wishlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Restart Diagnosing
      ///
      /// Locales: en, es
      static let diagnosis_restart_diagnosing = Rswift.StringResource(key: "diagnosis_restart_diagnosing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Restore Purchases
      ///
      /// Locales: en, es
      static let subscription_restore = Rswift.StringResource(key: "subscription_restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static let diagnosis_preview_retake = Rswift.StringResource(key: "diagnosis_preview_retake", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static let identify_result_retake_photo = Rswift.StringResource(key: "identify_result_retake_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rotating
      ///
      /// Locales: en, es
      static let care_type_rotating = Rswift.StringResource(key: "care_type_rotating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, es
      static let climate_shade_s = Rswift.StringResource(key: "climate_shade_s", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SELECT LANGUAGE
      ///
      /// Locales: en, es
      static let menu_language_header = Rswift.StringResource(key: "menu_language_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SN
      ///
      /// Locales: en, es
      static let climate_shade_sn = Rswift.StringResource(key: "climate_shade_sn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Save 33% Off
      ///
      /// Locales: en, es
      static let subscription_save_33 = Rswift.StringResource(key: "subscription_save_33", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search by Name
      ///
      /// Locales: en, es
      static let plants_search = Rswift.StringResource(key: "plants_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shade
      ///
      /// Locales: en, es
      static let climate_shade = Rswift.StringResource(key: "climate_shade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shrub
      ///
      /// Locales: en, es
      static let climate_habit_shrub = Rswift.StringResource(key: "climate_habit_shrub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Soil
      ///
      /// Locales: en, es
      static let climate_soil = Rswift.StringResource(key: "climate_soil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry,  no results found
      ///
      /// Locales: en, es
      static let identify_no_data = Rswift.StringResource(key: "identify_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start Diagnosing
      ///
      /// Locales: en, es
      static let diagnosis_start_diagnose = Rswift.StringResource(key: "diagnosis_start_diagnose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start Identify
      ///
      /// Locales: en, es
      static let identify_start_identify = Rswift.StringResource(key: "identify_start_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Subscribe
      ///
      /// Locales: en, es
      static let subscription_subscribe = Rswift.StringResource(key: "subscription_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Subscriptions
      ///
      /// Locales: en, es
      static let menu_item_subscriptions = Rswift.StringResource(key: "menu_item_subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Terms
      ///
      /// Locales: en, es
      static let menu_item_terms = Rswift.StringResource(key: "menu_item_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Terms of use
      ///
      /// Locales: en, es
      static let subscription_terms = Rswift.StringResource(key: "subscription_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tree
      ///
      /// Locales: en, es
      static let climate_habit_tree = Rswift.StringResource(key: "climate_habit_tree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Type
      ///
      /// Locales: en, es
      static let climate_deciduous = Rswift.StringResource(key: "climate_deciduous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, es
      static let care_period_type_unknown = Rswift.StringResource(key: "care_period_type_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WA
      ///
      /// Locales: en, es
      static let climate_moisture_wa = Rswift.StringResource(key: "climate_moisture_wa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WEM
      ///
      /// Locales: en, es
      static let climate_moisture_wem = Rswift.StringResource(key: "climate_moisture_wem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WEWA
      ///
      /// Locales: en, es
      static let climate_moisture_wewa = Rswift.StringResource(key: "climate_moisture_wewa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Watering
      ///
      /// Locales: en, es
      static let care_type_watering = Rswift.StringResource(key: "care_type_watering", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Weeks
      ///
      /// Locales: en, es
      static let care_period_type_weeks = Rswift.StringResource(key: "care_period_type_weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wishlist
      ///
      /// Locales: en, es
      static let wish_list_title = Rswift.StringResource(key: "wish_list_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wishlist is empty
      ///
      /// Locales: en, es
      static let wish_list_no_data = Rswift.StringResource(key: "wish_list_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, es
      static let allert_yes = Rswift.StringResource(key: "allert_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: account
      ///
      /// Locales: en, es
      static let menu_account = Rswift.StringResource(key: "menu_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: archive
      ///
      /// Locales: en, es
      static let menu_section_archive_title = Rswift.StringResource(key: "menu_section_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: free snaps
      ///
      /// Locales: en, es
      static let identify_free_snaps = Rswift.StringResource(key: "identify_free_snaps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: free snaps left
      ///
      /// Locales: en, es
      static let identify_result_snaps_left = Rswift.StringResource(key: "identify_result_snaps_left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: go premium
      ///
      /// Locales: en, es
      static let identify_premium = Rswift.StringResource(key: "identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: settings
      ///
      /// Locales: en, es
      static let menu_section_settings_title = Rswift.StringResource(key: "menu_section_settings_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: A
      ///
      /// Locales: en, es
      static func climate_ph_a(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_a", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_a"
        }

        return NSLocalizedString("climate_ph_a", bundle: bundle, comment: "")
      }

      /// en translation: AN
      ///
      /// Locales: en, es
      static func climate_ph_an(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_an", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_an"
        }

        return NSLocalizedString("climate_ph_an", bundle: bundle, comment: "")
      }

      /// en translation: ANB
      ///
      /// Locales: en, es
      static func climate_ph_anb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_anb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_anb"
        }

        return NSLocalizedString("climate_ph_anb", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, es
      static func plant_detail_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_about"
        }

        return NSLocalizedString("plant_detail_about", bundle: bundle, comment: "")
      }

      /// en translation: Add Unique
      ///
      /// Locales: en, es
      static func plants_uniquePlantButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantButton"
        }

        return NSLocalizedString("plants_uniquePlantButton", bundle: bundle, comment: "")
      }

      /// en translation: Add to My Garden
      ///
      /// Locales: en, es
      static func plant_detail_add_to_my_garden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_add_to_my_garden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_add_to_my_garden"
        }

        return NSLocalizedString("plant_detail_add_to_my_garden", bundle: bundle, comment: "")
      }

      /// en translation: Added in Wishlist
      ///
      /// Locales: en, es
      static func plant_detail_added_to_wishlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_added_to_wishlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_added_to_wishlist"
        }

        return NSLocalizedString("plant_detail_added_to_wishlist", bundle: bundle, comment: "")
      }

      /// en translation: Analyzing image
      ///
      /// Locales: en, es
      static func identify_analize_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_image"
        }

        return NSLocalizedString("identify_analize_image", bundle: bundle, comment: "")
      }

      /// en translation: Annual Climber
      ///
      /// Locales: en, es
      static func climate_habit_annual_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_annual_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_annual_climber"
        }

        return NSLocalizedString("climate_habit_annual_climber", bundle: bundle, comment: "")
      }

      /// en translation: Annual Perennial
      ///
      /// Locales: en, es
      static func climate_habit_annual_perennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_annual_perennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_annual_perennial"
        }

        return NSLocalizedString("climate_habit_annual_perennial", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want log out?
      ///
      /// Locales: en, es
      static func allert_logout_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_logout_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_logout_message"
        }

        return NSLocalizedString("allert_logout_message", bundle: bundle, comment: "")
      }

      /// en translation: B
      ///
      /// Locales: en, es
      static func climate_ph_b(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_b", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_b"
        }

        return NSLocalizedString("climate_ph_b", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, es
      static func plant_detail_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_back"
        }

        return NSLocalizedString("plant_detail_back", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, es
      static func wish_list_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_back"
        }

        return NSLocalizedString("wish_list_back", bundle: bundle, comment: "")
      }

      /// en translation: Back to top
      ///
      /// Locales: en, es
      static func plants_backToTop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_backToTop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_backToTop"
        }

        return NSLocalizedString("plants_backToTop", bundle: bundle, comment: "")
      }

      /// en translation: Bamboo
      ///
      /// Locales: en, es
      static func climate_habit_bamboo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_bamboo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_bamboo"
        }

        return NSLocalizedString("climate_habit_bamboo", bundle: bundle, comment: "")
      }

      /// en translation: Become a Premium
      ///
      /// Locales: en, es
      static func subscription_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_title"
        }

        return NSLocalizedString("subscription_title", bundle: bundle, comment: "")
      }

      /// en translation: Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.Before creating your subscriptions, make sure you know about the requirements and best practices that will help you deliver a great user experience. The guidelines below provide details on what your subscriptions need to include and how they should be presented in your app, as well as information on making changes to existing subscriptions, offering free trials, and more.
      ///
      /// Locales: en, es
      static func subscription_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_description"
        }

        return NSLocalizedString("subscription_description", bundle: bundle, comment: "")
      }

      /// en translation: Biennial
      ///
      /// Locales: en, es
      static func climate_habit_biennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_biennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_biennial"
        }

        return NSLocalizedString("climate_habit_biennial", bundle: bundle, comment: "")
      }

      /// en translation: Biennial Perennial
      ///
      /// Locales: en, es
      static func climate_habit_biennial_perennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_biennial_perennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_biennial_perennial"
        }

        return NSLocalizedString("climate_habit_biennial_perennial", bundle: bundle, comment: "")
      }

      /// en translation: Billed %@
      ///
      /// Locales: en, es
      static func subscription_billed_with(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("subscription_billed_with", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_billed_with"
        }

        let format = NSLocalizedString("subscription_billed_with", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Bulb
      ///
      /// Locales: en, es
      static func climate_habit_bulb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_bulb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_bulb"
        }

        return NSLocalizedString("climate_habit_bulb", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func choose_identify_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_cancel"
        }

        return NSLocalizedString("choose_identify_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel anytime
      ///
      /// Locales: en, es
      static func subscription_cancel_any_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_cancel_any_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_cancel_any_time"
        }

        return NSLocalizedString("subscription_cancel_any_time", bundle: bundle, comment: "")
      }

      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en, es
      static func plants_uniquePlantLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantLabel"
        }

        return NSLocalizedString("plants_uniquePlantLabel", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en, es
      static func diagnosis_capture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_capture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_capture"
        }

        return NSLocalizedString("diagnosis_capture", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en, es
      static func identify_capture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_capture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_capture"
        }

        return NSLocalizedString("identify_capture", bundle: bundle, comment: "")
      }

      /// en translation: Capture sick part of Plant
      ///
      /// Locales: en, es
      static func diagnosis_capture_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_capture_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_capture_info"
        }

        return NSLocalizedString("diagnosis_capture_info", bundle: bundle, comment: "")
      }

      /// en translation: Cares
      ///
      /// Locales: en, es
      static func plant_detail_cares(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_cares", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_cares"
        }

        return NSLocalizedString("plant_detail_cares", bundle: bundle, comment: "")
      }

      /// en translation: Climate Deciduous Unknown
      ///
      /// Locales: en, es
      static func climante_deciduous_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climante_deciduous_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climante_deciduous_unknown"
        }

        return NSLocalizedString("climante_deciduous_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Habit Unknown
      ///
      /// Locales: en, es
      static func climate_habit_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_unknown"
        }

        return NSLocalizedString("climate_habit_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Moisture Unknown
      ///
      /// Locales: en, es
      static func climate_moisture_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_unknown"
        }

        return NSLocalizedString("climate_moisture_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate PH Unknown
      ///
      /// Locales: en, es
      static func climate_ph_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_unknown"
        }

        return NSLocalizedString("climate_ph_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Shade Unknown
      ///
      /// Locales: en, es
      static func climate_shade_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_unknown"
        }

        return NSLocalizedString("climate_shade_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Soial Unknown
      ///
      /// Locales: en, es
      static func climate_soil_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_unknown"
        }

        return NSLocalizedString("climate_soil_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climber
      ///
      /// Locales: en, es
      static func climate_habit_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_climber"
        }

        return NSLocalizedString("climate_habit_climber", bundle: bundle, comment: "")
      }

      /// en translation: Congrads!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_title"
        }

        return NSLocalizedString("plant_add_to_garden_title", bundle: bundle, comment: "")
      }

      /// en translation: D
      ///
      /// Locales: en, es
      static func climate_moisture_d(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_d", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_d"
        }

        return NSLocalizedString("climate_moisture_d", bundle: bundle, comment: "")
      }

      /// en translation: DM
      ///
      /// Locales: en, es
      static func climate_moisture_dm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dm"
        }

        return NSLocalizedString("climate_moisture_dm", bundle: bundle, comment: "")
      }

      /// en translation: DMW
      ///
      /// Locales: en, es
      static func climate_moisture_dmw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dmw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dmw"
        }

        return NSLocalizedString("climate_moisture_dmw", bundle: bundle, comment: "")
      }

      /// en translation: DMWE
      ///
      /// Locales: en, es
      static func climate_moisture_dmwe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dmwe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dmwe"
        }

        return NSLocalizedString("climate_moisture_dmwe", bundle: bundle, comment: "")
      }

      /// en translation: Days
      ///
      /// Locales: en, es
      static func care_period_type_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_days"
        }

        return NSLocalizedString("care_period_type_days", bundle: bundle, comment: "")
      }

      /// en translation: Deciduous
      ///
      /// Locales: en, es
      static func climate_deciduous_deciduous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous_deciduous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous_deciduous"
        }

        return NSLocalizedString("climate_deciduous_deciduous", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose
      ///
      /// Locales: en, es
      static func diagnosis_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_title"
        }

        return NSLocalizedString("diagnosis_title", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose Disease
      ///
      /// Locales: en, es
      static func disease_archive_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disease_archive_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disease_archive_button"
        }

        return NSLocalizedString("disease_archive_button", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose Photo
      ///
      /// Locales: en, es
      static func diagnosis_preview_diagnose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_diagnose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_diagnose"
        }

        return NSLocalizedString("diagnosis_preview_diagnose", bundle: bundle, comment: "")
      }

      /// en translation: Diagnosing in Progress
      ///
      /// Locales: en, es
      static func diagnosis_analyze_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_analyze_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_analyze_info"
        }

        return NSLocalizedString("diagnosis_analyze_info", bundle: bundle, comment: "")
      }

      /// en translation: Diagnosis
      ///
      /// Locales: en, es
      static func choose_identify_diagnosis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_diagnosis", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_diagnosis"
        }

        return NSLocalizedString("choose_identify_diagnosis", bundle: bundle, comment: "")
      }

      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static func disease_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disease_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disease_archive_title"
        }

        return NSLocalizedString("disease_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static func menu_item_archive_disease(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_archive_disease", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_archive_disease"
        }

        return NSLocalizedString("menu_item_archive_disease", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en, es
      static func identify_result_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_info"
        }

        return NSLocalizedString("identify_result_info", bundle: bundle, comment: "")
      }

      /// en translation: Evergreen
      ///
      /// Locales: en, es
      static func climate_deciduous_evergreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous_evergreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous_evergreen"
        }

        return NSLocalizedString("climate_deciduous_evergreen", bundle: bundle, comment: "")
      }

      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en, es
      static func login_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_info"
        }

        return NSLocalizedString("login_info", bundle: bundle, comment: "")
      }

      /// en translation: Explore catalog
      ///
      /// Locales: en, es
      static func plants_explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_explore"
        }

        return NSLocalizedString("plants_explore", bundle: bundle, comment: "")
      }

      /// en translation: FS
      ///
      /// Locales: en, es
      static func climate_shade_fs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_fs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_fs"
        }

        return NSLocalizedString("climate_shade_fs", bundle: bundle, comment: "")
      }

      /// en translation: FSN
      ///
      /// Locales: en, es
      static func climate_shade_fsn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_fsn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_fsn"
        }

        return NSLocalizedString("climate_shade_fsn", bundle: bundle, comment: "")
      }

      /// en translation: Fern
      ///
      /// Locales: en, es
      static func climate_habit_fern(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_fern", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_fern"
        }

        return NSLocalizedString("climate_habit_fern", bundle: bundle, comment: "")
      }

      /// en translation: Full-size image of Plant
      ///
      /// Locales: en, es
      static func identify_make_photo_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_info"
        }

        return NSLocalizedString("identify_make_photo_info", bundle: bundle, comment: "")
      }

      /// en translation: Get access to unlimited Identify/nand Diagnosis Plants
      ///
      /// Locales: en, es
      static func subscription_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_sub_title"
        }

        return NSLocalizedString("subscription_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Great!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_great(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_great", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_great"
        }

        return NSLocalizedString("plant_add_to_garden_great", bundle: bundle, comment: "")
      }

      /// en translation: Habit
      ///
      /// Locales: en, es
      static func climate_habit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit"
        }

        return NSLocalizedString("climate_habit", bundle: bundle, comment: "")
      }

      /// en translation: Hardiness
      ///
      /// Locales: en, es
      static func climate_hardiness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_hardiness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_hardiness"
        }

        return NSLocalizedString("climate_hardiness", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en, es
      static func climate_height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_height"
        }

        return NSLocalizedString("climate_height", bundle: bundle, comment: "")
      }

      /// en translation: Humidity
      ///
      /// Locales: en, es
      static func care_type_humidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_humidity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_humidity"
        }

        return NSLocalizedString("care_type_humidity", bundle: bundle, comment: "")
      }

      /// en translation: Identify
      ///
      /// Locales: en, es
      static func choose_identify_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_identify"
        }

        return NSLocalizedString("choose_identify_identify", bundle: bundle, comment: "")
      }

      /// en translation: Identify Photo
      ///
      /// Locales: en, es
      static func identify_result_identify_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_identify_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_identify_photo"
        }

        return NSLocalizedString("identify_result_identify_photo", bundle: bundle, comment: "")
      }

      /// en translation: Identify Results:
      ///
      /// Locales: en, es
      static func identify_results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_results"
        }

        return NSLocalizedString("identify_results", bundle: bundle, comment: "")
      }

      /// en translation: Identify my Plants
      ///
      /// Locales: en, es
      static func plants_identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_identifier"
        }

        return NSLocalizedString("plants_identifier", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en, es
      static func identify_result_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_title"
        }

        return NSLocalizedString("identify_result_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en, es
      static func identify_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_title"
        }

        return NSLocalizedString("identify_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en, es
      static func identify_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_info"
        }

        return NSLocalizedString("identify_info", bundle: bundle, comment: "")
      }

      /// en translation: Identifying plant
      ///
      /// Locales: en, es
      static func identify_analize_identify_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_identify_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_identify_plant"
        }

        return NSLocalizedString("identify_analize_identify_plant", bundle: bundle, comment: "")
      }

      /// en translation: Invite friends (share app)
      ///
      /// Locales: en, es
      static func menu_item_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_share"
        }

        return NSLocalizedString("menu_item_share", bundle: bundle, comment: "")
      }

      /// en translation: L
      ///
      /// Locales: en, es
      static func climate_soil_l(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_l", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_l"
        }

        return NSLocalizedString("climate_soil_l", bundle: bundle, comment: "")
      }

      /// en translation: LM
      ///
      /// Locales: en, es
      static func climate_soil_lm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_lm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_lm"
        }

        return NSLocalizedString("climate_soil_lm", bundle: bundle, comment: "")
      }

      /// en translation: LMH
      ///
      /// Locales: en, es
      static func climate_soil_lmh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_lmh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_lmh"
        }

        return NSLocalizedString("climate_soil_lmh", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, es
      static func menu_item_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_language"
        }

        return NSLocalizedString("menu_item_language", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, es
      static func menu_laguage_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_laguage_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_laguage_title"
        }

        return NSLocalizedString("menu_laguage_title", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, es
      static func menu_log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_log_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_log_out"
        }

        return NSLocalizedString("menu_log_out", bundle: bundle, comment: "")
      }

      /// en translation: Login with
      ///
      /// Locales: en, es
      static func login_loginWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_loginWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_loginWith"
        }

        return NSLocalizedString("login_loginWith", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, es
      static func climate_moisture_m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_m"
        }

        return NSLocalizedString("climate_moisture_m", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, es
      static func climate_soil_m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_m"
        }

        return NSLocalizedString("climate_soil_m", bundle: bundle, comment: "")
      }

      /// en translation: MH
      ///
      /// Locales: en, es
      static func climate_soil_mh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_mh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_mh"
        }

        return NSLocalizedString("climate_soil_mh", bundle: bundle, comment: "")
      }

      /// en translation: MWE
      ///
      /// Locales: en, es
      static func climate_moisture_mwe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_mwe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_mwe"
        }

        return NSLocalizedString("climate_moisture_mwe", bundle: bundle, comment: "")
      }

      /// en translation: MWEWA
      ///
      /// Locales: en, es
      static func climate_moisture_mwewa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_mwewa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_mwewa"
        }

        return NSLocalizedString("climate_moisture_mwewa", bundle: bundle, comment: "")
      }

      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en, es
      static func identify_make_photo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_title"
        }

        return NSLocalizedString("identify_make_photo_title", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static func diagnosis_onboarding_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_onboarding_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_onboarding_info"
        }

        return NSLocalizedString("diagnosis_onboarding_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static func diagnosis_preview_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_info"
        }

        return NSLocalizedString("diagnosis_preview_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en, es
      static func identify_overview_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_info"
        }

        return NSLocalizedString("identify_overview_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en, es
      static func identify_photo_quality_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_info"
        }

        return NSLocalizedString("identify_photo_quality_info", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: en, es
      static func menu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_title"
        }

        return NSLocalizedString("menu_title", bundle: bundle, comment: "")
      }

      /// en translation: Misting
      ///
      /// Locales: en, es
      static func care_type_misting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_misting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_misting"
        }

        return NSLocalizedString("care_type_misting", bundle: bundle, comment: "")
      }

      /// en translation: Moisture
      ///
      /// Locales: en, es
      static func climate_moisture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture"
        }

        return NSLocalizedString("climate_moisture", bundle: bundle, comment: "")
      }

      /// en translation: More on Wiki
      ///
      /// Locales: en, es
      static func plant_detail_more_on_wiki(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_more_on_wiki", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_more_on_wiki"
        }

        return NSLocalizedString("plant_detail_more_on_wiki", bundle: bundle, comment: "")
      }

      /// en translation: Mounths
      ///
      /// Locales: en, es
      static func care_period_type_mounths(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_mounths", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_mounths"
        }

        return NSLocalizedString("care_period_type_mounths", bundle: bundle, comment: "")
      }

      /// en translation: N
      ///
      /// Locales: en, es
      static func climate_ph_n(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_n"
        }

        return NSLocalizedString("climate_ph_n", bundle: bundle, comment: "")
      }

      /// en translation: N
      ///
      /// Locales: en, es
      static func climate_shade_n(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_n"
        }

        return NSLocalizedString("climate_shade_n", bundle: bundle, comment: "")
      }

      /// en translation: NB
      ///
      /// Locales: en, es
      static func climate_ph_nb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_nb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_nb"
        }

        return NSLocalizedString("climate_ph_nb", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, es
      static func allert_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_no"
        }

        return NSLocalizedString("allert_no", bundle: bundle, comment: "")
      }

      /// en translation: No problems detected
      ///
      /// Locales: en, es
      static func diagnosis_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_no_data"
        }

        return NSLocalizedString("diagnosis_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Overview
      ///
      /// Locales: en, es
      static func identify_overview_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_title"
        }

        return NSLocalizedString("identify_overview_title", bundle: bundle, comment: "")
      }

      /// en translation: PH
      ///
      /// Locales: en, es
      static func climate_ph(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph"
        }

        return NSLocalizedString("climate_ph", bundle: bundle, comment: "")
      }

      /// en translation: Perennial
      ///
      /// Locales: en, es
      static func climate_habit_perenial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_perenial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_perenial"
        }

        return NSLocalizedString("climate_habit_perenial", bundle: bundle, comment: "")
      }

      /// en translation: Perennial Climber
      ///
      /// Locales: en, es
      static func climate_habit_perenial_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_perenial_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_perenial_climber"
        }

        return NSLocalizedString("climate_habit_perenial_climber", bundle: bundle, comment: "")
      }

      /// en translation: Photo quality
      ///
      /// Locales: en, es
      static func identify_photo_quality_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_title"
        }

        return NSLocalizedString("identify_photo_quality_title", bundle: bundle, comment: "")
      }

      /// en translation: Plant is added in your Garden!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_info"
        }

        return NSLocalizedString("plant_add_to_garden_info", bundle: bundle, comment: "")
      }

      /// en translation: Please wait
      ///
      /// Locales: en, es
      static func activity_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity_title"
        }

        return NSLocalizedString("activity_title", bundle: bundle, comment: "")
      }

      /// en translation: Premium
      ///
      /// Locales: en, es
      static func choose_identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_premium"
        }

        return NSLocalizedString("choose_identify_premium", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static func menu_item_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_privacy_policy"
        }

        return NSLocalizedString("menu_item_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static func subscription_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_privacy"
        }

        return NSLocalizedString("subscription_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Rate app
      ///
      /// Locales: en, es
      static func menu_item_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_rate"
        }

        return NSLocalizedString("menu_item_rate", bundle: bundle, comment: "")
      }

      /// en translation: Recognize Plant
      ///
      /// Locales: en, es
      static func recognize_archive_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recognize_archive_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recognize_archive_button"
        }

        return NSLocalizedString("recognize_archive_button", bundle: bundle, comment: "")
      }

      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static func menu_item_archive_recognized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_archive_recognized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_archive_recognized"
        }

        return NSLocalizedString("menu_item_archive_recognized", bundle: bundle, comment: "")
      }

      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static func recognize_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recognize_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recognize_archive_title"
        }

        return NSLocalizedString("recognize_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: Recurring monthly billing
      ///
      /// Locales: en, es
      static func subscription_recurring(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_recurring", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_recurring"
        }

        return NSLocalizedString("subscription_recurring", bundle: bundle, comment: "")
      }

      /// en translation: Removed from Wishlist
      ///
      /// Locales: en, es
      static func plant_detail_removed_from_wishlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_removed_from_wishlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_removed_from_wishlist"
        }

        return NSLocalizedString("plant_detail_removed_from_wishlist", bundle: bundle, comment: "")
      }

      /// en translation: Restart Diagnosing
      ///
      /// Locales: en, es
      static func diagnosis_restart_diagnosing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_restart_diagnosing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_restart_diagnosing"
        }

        return NSLocalizedString("diagnosis_restart_diagnosing", bundle: bundle, comment: "")
      }

      /// en translation: Restore Purchases
      ///
      /// Locales: en, es
      static func subscription_restore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_restore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_restore"
        }

        return NSLocalizedString("subscription_restore", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static func diagnosis_preview_retake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_retake", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_retake"
        }

        return NSLocalizedString("diagnosis_preview_retake", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static func identify_result_retake_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_retake_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_retake_photo"
        }

        return NSLocalizedString("identify_result_retake_photo", bundle: bundle, comment: "")
      }

      /// en translation: Rotating
      ///
      /// Locales: en, es
      static func care_type_rotating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_rotating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_rotating"
        }

        return NSLocalizedString("care_type_rotating", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, es
      static func climate_shade_s(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_s", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_s"
        }

        return NSLocalizedString("climate_shade_s", bundle: bundle, comment: "")
      }

      /// en translation: SELECT LANGUAGE
      ///
      /// Locales: en, es
      static func menu_language_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_language_header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_language_header"
        }

        return NSLocalizedString("menu_language_header", bundle: bundle, comment: "")
      }

      /// en translation: SN
      ///
      /// Locales: en, es
      static func climate_shade_sn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_sn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_sn"
        }

        return NSLocalizedString("climate_shade_sn", bundle: bundle, comment: "")
      }

      /// en translation: Save 33% Off
      ///
      /// Locales: en, es
      static func subscription_save_33(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_save_33", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_save_33"
        }

        return NSLocalizedString("subscription_save_33", bundle: bundle, comment: "")
      }

      /// en translation: Search by Name
      ///
      /// Locales: en, es
      static func plants_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_search"
        }

        return NSLocalizedString("plants_search", bundle: bundle, comment: "")
      }

      /// en translation: Shade
      ///
      /// Locales: en, es
      static func climate_shade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade"
        }

        return NSLocalizedString("climate_shade", bundle: bundle, comment: "")
      }

      /// en translation: Shrub
      ///
      /// Locales: en, es
      static func climate_habit_shrub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_shrub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_shrub"
        }

        return NSLocalizedString("climate_habit_shrub", bundle: bundle, comment: "")
      }

      /// en translation: Soil
      ///
      /// Locales: en, es
      static func climate_soil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil"
        }

        return NSLocalizedString("climate_soil", bundle: bundle, comment: "")
      }

      /// en translation: Sorry,  no results found
      ///
      /// Locales: en, es
      static func identify_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_no_data"
        }

        return NSLocalizedString("identify_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Start Diagnosing
      ///
      /// Locales: en, es
      static func diagnosis_start_diagnose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_start_diagnose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_start_diagnose"
        }

        return NSLocalizedString("diagnosis_start_diagnose", bundle: bundle, comment: "")
      }

      /// en translation: Start Identify
      ///
      /// Locales: en, es
      static func identify_start_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_start_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_start_identify"
        }

        return NSLocalizedString("identify_start_identify", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe
      ///
      /// Locales: en, es
      static func subscription_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_subscribe"
        }

        return NSLocalizedString("subscription_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Subscriptions
      ///
      /// Locales: en, es
      static func menu_item_subscriptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_subscriptions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_subscriptions"
        }

        return NSLocalizedString("menu_item_subscriptions", bundle: bundle, comment: "")
      }

      /// en translation: Terms
      ///
      /// Locales: en, es
      static func menu_item_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_terms"
        }

        return NSLocalizedString("menu_item_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of use
      ///
      /// Locales: en, es
      static func subscription_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_terms"
        }

        return NSLocalizedString("subscription_terms", bundle: bundle, comment: "")
      }

      /// en translation: Tree
      ///
      /// Locales: en, es
      static func climate_habit_tree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_tree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_tree"
        }

        return NSLocalizedString("climate_habit_tree", bundle: bundle, comment: "")
      }

      /// en translation: Type
      ///
      /// Locales: en, es
      static func climate_deciduous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous"
        }

        return NSLocalizedString("climate_deciduous", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, es
      static func care_period_type_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_unknown"
        }

        return NSLocalizedString("care_period_type_unknown", bundle: bundle, comment: "")
      }

      /// en translation: WA
      ///
      /// Locales: en, es
      static func climate_moisture_wa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wa"
        }

        return NSLocalizedString("climate_moisture_wa", bundle: bundle, comment: "")
      }

      /// en translation: WEM
      ///
      /// Locales: en, es
      static func climate_moisture_wem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wem"
        }

        return NSLocalizedString("climate_moisture_wem", bundle: bundle, comment: "")
      }

      /// en translation: WEWA
      ///
      /// Locales: en, es
      static func climate_moisture_wewa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wewa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wewa"
        }

        return NSLocalizedString("climate_moisture_wewa", bundle: bundle, comment: "")
      }

      /// en translation: Watering
      ///
      /// Locales: en, es
      static func care_type_watering(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_watering", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_watering"
        }

        return NSLocalizedString("care_type_watering", bundle: bundle, comment: "")
      }

      /// en translation: Weeks
      ///
      /// Locales: en, es
      static func care_period_type_weeks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_weeks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_weeks"
        }

        return NSLocalizedString("care_period_type_weeks", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist
      ///
      /// Locales: en, es
      static func wish_list_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_title"
        }

        return NSLocalizedString("wish_list_title", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist is empty
      ///
      /// Locales: en, es
      static func wish_list_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_no_data"
        }

        return NSLocalizedString("wish_list_no_data", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, es
      static func allert_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_yes"
        }

        return NSLocalizedString("allert_yes", bundle: bundle, comment: "")
      }

      /// en translation: account
      ///
      /// Locales: en, es
      static func menu_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_account"
        }

        return NSLocalizedString("menu_account", bundle: bundle, comment: "")
      }

      /// en translation: archive
      ///
      /// Locales: en, es
      static func menu_section_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_section_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_section_archive_title"
        }

        return NSLocalizedString("menu_section_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: free snaps
      ///
      /// Locales: en, es
      static func identify_free_snaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_free_snaps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_free_snaps"
        }

        return NSLocalizedString("identify_free_snaps", bundle: bundle, comment: "")
      }

      /// en translation: free snaps left
      ///
      /// Locales: en, es
      static func identify_result_snaps_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_snaps_left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_snaps_left"
        }

        return NSLocalizedString("identify_result_snaps_left", bundle: bundle, comment: "")
      }

      /// en translation: go premium
      ///
      /// Locales: en, es
      static func identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_premium"
        }

        return NSLocalizedString("identify_premium", bundle: bundle, comment: "")
      }

      /// en translation: settings
      ///
      /// Locales: en, es
      static func menu_section_settings_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_section_settings_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_section_settings_title"
        }

        return NSLocalizedString("menu_section_settings_title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ChooseIdentifyController.validate()
      try _CongradsView.validate()
      try _DetailAboutView.validate()
      try _DetailCaresView.validate()
      try _DiagnosisController.validate()
      try _DiseaseArchiveViewController.validate()
      try _GardenViewCell.validate()
      try _IdentifyController.validate()
      try _LanguageController.validate()
      try _LoginController.validate()
      try _MenuAccauntInfoTableViewCell.validate()
      try _OnboardingFirsController.validate()
      try _OnboardingSecondController.validate()
      try _OnboardingThreeController.validate()
      try _PlantCollectionCell.validate()
      try _PlantsDetailController.validate()
      try _RecognizeArchiveController.validate()
      try _SplashController.validate()
      try _SubcribeController.validate()
      try _WishListController.validate()
    }

    struct _ChooseIdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseIdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_choose_identify_diagnosis", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_diagnosis' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose_identify_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_photo' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CongradsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CongradsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CongradsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CongradsView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "congrads_view_flower_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'congrads_view_flower_ic' is used in nib 'CongradsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DetailAboutView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailAboutView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_habit_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_habit_ic' is used in nib 'DetailAboutView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DetailCaresView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailCaresView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_water_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_water_ic' is used in nib 'DetailCaresView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DiagnosisController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiagnosisController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_checkmark' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_1' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_2' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_3' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_4' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_phonendoscope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_phonendoscope' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DiseaseArchiveCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DiseaseArchiveCell

      let bundle = R.hostingBundle
      let identifier = "DiseaseArchiveCell"
      let name = "DiseaseArchiveCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiseaseArchiveCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiseaseArchiveCell
      }

      fileprivate init() {}
    }

    struct _DiseaseArchiveViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiseaseArchiveViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'DiseaseArchiveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_diagnose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_diagnose' is used in nib 'DiseaseArchiveViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GardenButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
      }

      fileprivate init() {}
    }

    struct _GardenViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_plants_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_plants_ic' is used in nib 'GardenViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_checkmark' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_no_data' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_1' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_2' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_3' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_black' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LanguageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LanguageCell

      let bundle = R.hostingBundle
      let identifier = "LanguageCell"
      let name = "LanguageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
      }

      fileprivate init() {}
    }

    struct _LanguageController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LanguageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'LanguageController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_apple' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_close' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_facebook' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_google' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_instagram' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuAccauntInfoTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuAccauntInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuAccauntInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuAccauntInfoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "avatar_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar_ic' is used in nib 'MenuAccauntInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuItemTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _OnboardingFirsController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingFirsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_1_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_1_ic' is used in nib 'OnboardingFirsController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingPageController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingPageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingSecondController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingSecondController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_2_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_2_ic' is used in nib 'OnboardingSecondController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingThreeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingThreeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_3_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_3_ic' is used in nib 'OnboardingThreeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_plants_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_add' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_plants_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_plants_ic' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantsDetailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantsDetailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_back_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_green_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_green_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_no_favorite_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_no_favorite_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_removed_favorites_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_removed_favorites_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_detail_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_detail_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RecognizeArchiveController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RecognizeArchiveController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'RecognizeArchiveController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "recognize_archive_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recognize_archive_ic' is used in nib 'RecognizeArchiveController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'SplashController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'SplashController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SubcribeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SubcribeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'SubcribeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WishListController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WishListController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'WishListController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wishlist_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wishlist_no_data' is used in nib 'WishListController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let gardenController = StoryboardViewControllerResource<GardenController>(identifier: "GardenController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let menuController = StoryboardViewControllerResource<MenuController>(identifier: "MenuController")
      let name = "Main"
      let plantsController = StoryboardViewControllerResource<PlantsController>(identifier: "PlantsController")
      let scheduleController = StoryboardViewControllerResource<ScheduleController>(identifier: "ScheduleController")

      func gardenController(_: Void = ()) -> GardenController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gardenController)
      }

      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func menuController(_: Void = ()) -> MenuController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuController)
      }

      func plantsController(_: Void = ()) -> PlantsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: plantsController)
      }

      func scheduleController(_: Void = ()) -> ScheduleController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduleController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "garden_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_back_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_backToTop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_backToTop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_line' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_unique", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_unique' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_garden", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_garden' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_plants", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_plants' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_schedule", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_schedule' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().gardenController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gardenController' could not be loaded from storyboard 'Main' as 'GardenController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().menuController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuController' could not be loaded from storyboard 'Main' as 'MenuController'.") }
        if _R.storyboard.main().plantsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'plantsController' could not be loaded from storyboard 'Main' as 'PlantsController'.") }
        if _R.storyboard.main().scheduleController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduleController' could not be loaded from storyboard 'Main' as 'ScheduleController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
