//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 45 files.
  struct file {
    /// Resource file `AddImageToGallery.graphql`.
    static let addImageToGalleryGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "AddImageToGallery", pathExtension: "graphql")
    /// Resource file `CareType.graphql`.
    static let careTypeGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "CareType", pathExtension: "graphql")
    /// Resource file `CaresByGarden.graphql`.
    static let caresByGardenGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "CaresByGarden", pathExtension: "graphql")
    /// Resource file `Debug.xcconfig`.
    static let debugXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Debug", pathExtension: "xcconfig")
    /// Resource file `DiagnoseArhive.graphql`.
    static let diagnoseArhiveGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DiagnoseArhive", pathExtension: "graphql")
    /// Resource file `DoneAllCaresByGarden.graphql`.
    static let doneAllCaresByGardenGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoneAllCaresByGarden", pathExtension: "graphql")
    /// Resource file `DoneAllCaresByGardenPlant.graphql`.
    static let doneAllCaresByGardenPlantGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoneAllCaresByGardenPlant", pathExtension: "graphql")
    /// Resource file `DoneAllCaresByGardens.graphql`.
    static let doneAllCaresByGardensGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoneAllCaresByGardens", pathExtension: "graphql")
    /// Resource file `DoneCareByGardenPlant.graphql`.
    static let doneCareByGardenPlantGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoneCareByGardenPlant", pathExtension: "graphql")
    /// Resource file `DoneCareByGardenPlants.graphql`.
    static let doneCareByGardenPlantsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "DoneCareByGardenPlants", pathExtension: "graphql")
    /// Resource file `GardenPlanById.graphql`.
    static let gardenPlanByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlanById", pathExtension: "graphql")
    /// Resource file `GardenPlantByIds.graphql`.
    static let gardenPlantByIdsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantByIds", pathExtension: "graphql")
    /// Resource file `GardenPlantCareCreate.graphql`.
    static let gardenPlantCareCreateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCareCreate", pathExtension: "graphql")
    /// Resource file `GardenPlantCareDelete.graphql`.
    static let gardenPlantCareDeleteGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCareDelete", pathExtension: "graphql")
    /// Resource file `GardenPlantCareUpdate.graphql`.
    static let gardenPlantCareUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCareUpdate", pathExtension: "graphql")
    /// Resource file `GardenPlantCares.graphql`.
    static let gardenPlantCaresGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCares", pathExtension: "graphql")
    /// Resource file `GardenPlantCaresDelete.graphql`.
    static let gardenPlantCaresDeleteGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCaresDelete", pathExtension: "graphql")
    /// Resource file `GardenPlantCaresToDefault.graphql`.
    static let gardenPlantCaresToDefaultGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCaresToDefault", pathExtension: "graphql")
    /// Resource file `GardenPlantClone.graphql`.
    static let gardenPlantCloneGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantClone", pathExtension: "graphql")
    /// Resource file `GardenPlantCreate.graphql`.
    static let gardenPlantCreateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantCreate", pathExtension: "graphql")
    /// Resource file `GardenPlantDelete.graphql`.
    static let gardenPlantDeleteGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantDelete", pathExtension: "graphql")
    /// Resource file `GardenPlantUpdate.graphql`.
    static let gardenPlantUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlantUpdate", pathExtension: "graphql")
    /// Resource file `GardenPlants.graphql`.
    static let gardenPlantsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GardenPlants", pathExtension: "graphql")
    /// Resource file `Generator.xcconfig`.
    static let generatorXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Generator", pathExtension: "xcconfig")
    /// Resource file `GetCatalogPlants.graphql`.
    static let getCatalogPlantsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GetCatalogPlants", pathExtension: "graphql")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `NotificationSettingsUpdate.graphql`.
    static let notificationSettingsUpdateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "NotificationSettingsUpdate", pathExtension: "graphql")
    /// Resource file `OrderCreate.graphql`.
    static let orderCreateGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "OrderCreate", pathExtension: "graphql")
    /// Resource file `PlantById.graphql`.
    static let plantByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PlantById", pathExtension: "graphql")
    /// Resource file `PlantToGarden.graphql`.
    static let plantToGardenGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "PlantToGarden", pathExtension: "graphql")
    /// Resource file `RecognizeArhive.graphql`.
    static let recognizeArhiveGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecognizeArhive", pathExtension: "graphql")
    /// Resource file `Release.xcconfig`.
    static let releaseXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Release", pathExtension: "xcconfig")
    /// Resource file `SFProDisplay-Bold.ttf`.
    static let sfProDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Bold", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Medium.ttf`.
    static let sfProDisplayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Medium", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Regular.ttf`.
    static let sfProDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Regular", pathExtension: "ttf")
    /// Resource file `ScheduleByGardenPlant.graphql`.
    static let scheduleByGardenPlantGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ScheduleByGardenPlant", pathExtension: "graphql")
    /// Resource file `ScheduleByGardens.graphql`.
    static let scheduleByGardensGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "ScheduleByGardens", pathExtension: "graphql")
    /// Resource file `SetFavoritePlantById.graphql`.
    static let setFavoritePlantByIdGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SetFavoritePlantById", pathExtension: "graphql")
    /// Resource file `SetGardenPlantNotifications.graphql`.
    static let setGardenPlantNotificationsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "SetGardenPlantNotifications", pathExtension: "graphql")
    /// Resource file `Staging.xcconfig`.
    static let stagingXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging", pathExtension: "xcconfig")
    /// Resource file `StartDiagnose.graphql`.
    static let startDiagnoseGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StartDiagnose", pathExtension: "graphql")
    /// Resource file `StartRecognize.graphql`.
    static let startRecognizeGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "StartRecognize", pathExtension: "graphql")
    /// Resource file `UploadMedia.graphql`.
    static let uploadMediaGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UploadMedia", pathExtension: "graphql")
    /// Resource file `schema.json`.
    static let schemaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "schema", pathExtension: "json")

    /// `bundle.url(forResource: "AddImageToGallery", withExtension: "graphql")`
    static func addImageToGalleryGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.addImageToGalleryGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CareType", withExtension: "graphql")`
    static func careTypeGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.careTypeGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "CaresByGarden", withExtension: "graphql")`
    static func caresByGardenGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.caresByGardenGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Debug", withExtension: "xcconfig")`
    static func debugXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.debugXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DiagnoseArhive", withExtension: "graphql")`
    static func diagnoseArhiveGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.diagnoseArhiveGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoneAllCaresByGarden", withExtension: "graphql")`
    static func doneAllCaresByGardenGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doneAllCaresByGardenGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoneAllCaresByGardenPlant", withExtension: "graphql")`
    static func doneAllCaresByGardenPlantGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doneAllCaresByGardenPlantGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoneAllCaresByGardens", withExtension: "graphql")`
    static func doneAllCaresByGardensGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doneAllCaresByGardensGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoneCareByGardenPlant", withExtension: "graphql")`
    static func doneCareByGardenPlantGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doneCareByGardenPlantGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "DoneCareByGardenPlants", withExtension: "graphql")`
    static func doneCareByGardenPlantsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.doneCareByGardenPlantsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlanById", withExtension: "graphql")`
    static func gardenPlanByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlanByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantByIds", withExtension: "graphql")`
    static func gardenPlantByIdsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantByIdsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCareCreate", withExtension: "graphql")`
    static func gardenPlantCareCreateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCareCreateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCareDelete", withExtension: "graphql")`
    static func gardenPlantCareDeleteGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCareDeleteGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCareUpdate", withExtension: "graphql")`
    static func gardenPlantCareUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCareUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCares", withExtension: "graphql")`
    static func gardenPlantCaresGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCaresGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCaresDelete", withExtension: "graphql")`
    static func gardenPlantCaresDeleteGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCaresDeleteGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCaresToDefault", withExtension: "graphql")`
    static func gardenPlantCaresToDefaultGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCaresToDefaultGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantClone", withExtension: "graphql")`
    static func gardenPlantCloneGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCloneGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantCreate", withExtension: "graphql")`
    static func gardenPlantCreateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantCreateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantDelete", withExtension: "graphql")`
    static func gardenPlantDeleteGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantDeleteGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlantUpdate", withExtension: "graphql")`
    static func gardenPlantUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GardenPlants", withExtension: "graphql")`
    static func gardenPlantsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gardenPlantsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Generator", withExtension: "xcconfig")`
    static func generatorXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.generatorXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GetCatalogPlants", withExtension: "graphql")`
    static func getCatalogPlantsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getCatalogPlantsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotificationSettingsUpdate", withExtension: "graphql")`
    static func notificationSettingsUpdateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notificationSettingsUpdateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OrderCreate", withExtension: "graphql")`
    static func orderCreateGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orderCreateGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PlantById", withExtension: "graphql")`
    static func plantByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plantByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "PlantToGarden", withExtension: "graphql")`
    static func plantToGardenGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plantToGardenGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecognizeArhive", withExtension: "graphql")`
    static func recognizeArhiveGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recognizeArhiveGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Release", withExtension: "xcconfig")`
    static func releaseXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.releaseXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Bold", withExtension: "ttf")`
    static func sfProDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Medium", withExtension: "ttf")`
    static func sfProDisplayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Regular", withExtension: "ttf")`
    static func sfProDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ScheduleByGardenPlant", withExtension: "graphql")`
    static func scheduleByGardenPlantGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scheduleByGardenPlantGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ScheduleByGardens", withExtension: "graphql")`
    static func scheduleByGardensGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.scheduleByGardensGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SetFavoritePlantById", withExtension: "graphql")`
    static func setFavoritePlantByIdGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.setFavoritePlantByIdGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SetGardenPlantNotifications", withExtension: "graphql")`
    static func setGardenPlantNotificationsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.setGardenPlantNotificationsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Staging", withExtension: "xcconfig")`
    static func stagingXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StartDiagnose", withExtension: "graphql")`
    static func startDiagnoseGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.startDiagnoseGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "StartRecognize", withExtension: "graphql")`
    static func startRecognizeGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.startRecognizeGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UploadMedia", withExtension: "graphql")`
    static func uploadMediaGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uploadMediaGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "schema", withExtension: "json")`
    static func schemaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.schemaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SFProDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SFProDisplay-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFProDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 111 images.
  struct image {
    /// Image `0387eb0228108c3862249f5f68cc1f46a2b645bf`.
    static let eb0228108c3862249f5f68cc1f46a2b645bf = Rswift.ImageResource(bundle: R.hostingBundle, name: "0387eb0228108c3862249f5f68cc1f46a2b645bf")
    /// Image `3c0ee1011123205f7b1af28adb3bdb92ca5bc8e6`.
    static let c0ee1011123205f7b1af28adb3bdb92ca5bc8e6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "3c0ee1011123205f7b1af28adb3bdb92ca5bc8e6")
    /// Image `50768c7e39870d8fe5102da500e2b7dfd6e35156`.
    static let c7e39870d8fe5102da500e2b7dfd6e35156 = Rswift.ImageResource(bundle: R.hostingBundle, name: "50768c7e39870d8fe5102da500e2b7dfd6e35156")
    /// Image `7249753fd0388b133090fb58740a2c12387a848d`.
    static let fd0388b133090fb58740a2c12387a848d = Rswift.ImageResource(bundle: R.hostingBundle, name: "7249753fd0388b133090fb58740a2c12387a848d")
    /// Image `avatar_ic`.
    static let avatar_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar_ic")
    /// Image `background_main`.
    static let background_main = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_main")
    /// Image `ce90603745001e15f304bfaf33f3d09971a2d951`.
    static let ce90603745001e15f304bfaf33f3d09971a2d951 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ce90603745001e15f304bfaf33f3d09971a2d951")
    /// Image `congrads_view_flower_ic`.
    static let congrads_view_flower_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "congrads_view_flower_ic")
    /// Image `d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584`.
    static let d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584 = Rswift.ImageResource(bundle: R.hostingBundle, name: "d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584")
    /// Image `fdba6d1ffef80f7deaf150c9d1df1e2192528442`.
    static let fdba6d1ffef80f7deaf150c9d1df1e2192528442 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fdba6d1ffef80f7deaf150c9d1df1e2192528442")
    /// Image `garde_edit_ic`.
    static let garde_edit_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garde_edit_ic")
    /// Image `garden_added_in_schedule_ic`.
    static let garden_added_in_schedule_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_added_in_schedule_ic")
    /// Image `garden_back_ic`.
    static let garden_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_back_ic")
    /// Image `garden_bell_ic`.
    static let garden_bell_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_bell_ic")
    /// Image `garden_care_humidity_ic`.
    static let garden_care_humidity_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_humidity_ic")
    /// Image `garden_care_missed_ic`.
    static let garden_care_missed_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_missed_ic")
    /// Image `garden_care_misting_ic`.
    static let garden_care_misting_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_misting_ic")
    /// Image `garden_care_rotating_ic`.
    static let garden_care_rotating_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_rotating_ic")
    /// Image `garden_care_waiting_ic`.
    static let garden_care_waiting_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_waiting_ic")
    /// Image `garden_care_watering_ic`.
    static let garden_care_watering_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_care_watering_ic")
    /// Image `garden_delete_ic`.
    static let garden_delete_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_delete_ic")
    /// Image `garden_delete_select_ic`.
    static let garden_delete_select_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_delete_select_ic")
    /// Image `garden_delete_unselect_ic`.
    static let garden_delete_unselect_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_delete_unselect_ic")
    /// Image `garden_removed_from_schedule_ic`.
    static let garden_removed_from_schedule_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_removed_from_schedule_ic")
    /// Image `garden_schelure_ic`.
    static let garden_schelure_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_schelure_ic")
    /// Image `garden_selected_bell_ic`.
    static let garden_selected_bell_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_selected_bell_ic")
    /// Image `ic_background`.
    static let ic_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_background")
    /// Image `ic_choose_identify_diagnosis`.
    static let ic_choose_identify_diagnosis = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_diagnosis")
    /// Image `ic_choose_identify_photo`.
    static let ic_choose_identify_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_photo")
    /// Image `ic_diagnosis_checkmark`.
    static let ic_diagnosis_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_checkmark")
    /// Image `ic_diagnosis_close`.
    static let ic_diagnosis_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_close")
    /// Image `ic_diagnosis_onboarding_1`.
    static let ic_diagnosis_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_1")
    /// Image `ic_diagnosis_onboarding_2`.
    static let ic_diagnosis_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_2")
    /// Image `ic_diagnosis_onboarding_3`.
    static let ic_diagnosis_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_3")
    /// Image `ic_diagnosis_onboarding_4`.
    static let ic_diagnosis_onboarding_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_4")
    /// Image `ic_diagnosis_phonendoscope`.
    static let ic_diagnosis_phonendoscope = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_phonendoscope")
    /// Image `ic_identify_checkmark`.
    static let ic_identify_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_checkmark")
    /// Image `ic_identify_close`.
    static let ic_identify_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_close")
    /// Image `ic_identify_flash_off`.
    static let ic_identify_flash_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_off")
    /// Image `ic_identify_flash_on`.
    static let ic_identify_flash_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_on")
    /// Image `ic_identify_gallery`.
    static let ic_identify_gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_gallery")
    /// Image `ic_identify_no_data`.
    static let ic_identify_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_no_data")
    /// Image `ic_identify_onboarding_1`.
    static let ic_identify_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_1")
    /// Image `ic_identify_onboarding_2`.
    static let ic_identify_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_2")
    /// Image `ic_identify_onboarding_3`.
    static let ic_identify_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_3")
    /// Image `ic_identify_photo_black`.
    static let ic_identify_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_black")
    /// Image `ic_identify_photo_rectangle`.
    static let ic_identify_photo_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_rectangle")
    /// Image `ic_identify_photo_white`.
    static let ic_identify_photo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_white")
    /// Image `ic_identify_recognize_arhive`.
    static let ic_identify_recognize_arhive = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_recognize_arhive")
    /// Image `ic_login_apple`.
    static let ic_login_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_apple")
    /// Image `ic_login_bg`.
    static let ic_login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_bg")
    /// Image `ic_login_close`.
    static let ic_login_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_close")
    /// Image `ic_login_facebook`.
    static let ic_login_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_facebook")
    /// Image `ic_login_google`.
    static let ic_login_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_google")
    /// Image `ic_login_instagram`.
    static let ic_login_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_instagram")
    /// Image `ic_login_logo`.
    static let ic_login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_logo")
    /// Image `ic_plants_add`.
    static let ic_plants_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_add")
    /// Image `ic_plants_backToTop`.
    static let ic_plants_backToTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_backToTop")
    /// Image `ic_plants_close`.
    static let ic_plants_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_close")
    /// Image `ic_plants_favorite`.
    static let ic_plants_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_favorite")
    /// Image `ic_plants_line`.
    static let ic_plants_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_line")
    /// Image `ic_plants_photo`.
    static let ic_plants_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_photo")
    /// Image `ic_plants_search`.
    static let ic_plants_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_search")
    /// Image `ic_plants_unfavorite`.
    static let ic_plants_unfavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unfavorite")
    /// Image `ic_plants_unique`.
    static let ic_plants_unique = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unique")
    /// Image `ic_tab_garden_act`.
    static let ic_tab_garden_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden_act")
    /// Image `ic_tab_garden`.
    static let ic_tab_garden = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden")
    /// Image `ic_tab_menu_act`.
    static let ic_tab_menu_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu_act")
    /// Image `ic_tab_menu`.
    static let ic_tab_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu")
    /// Image `ic_tab_plants_act`.
    static let ic_tab_plants_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants_act")
    /// Image `ic_tab_plants`.
    static let ic_tab_plants = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants")
    /// Image `ic_tab_schedule_act`.
    static let ic_tab_schedule_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule_act")
    /// Image `ic_tab_schedule`.
    static let ic_tab_schedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule")
    /// Image `ic_wishlist_no_data`.
    static let ic_wishlist_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wishlist_no_data")
    /// Image `icn_diagnose`.
    static let icn_diagnose = Rswift.ImageResource(bundle: R.hostingBundle, name: "icn_diagnose")
    /// Image `placeholder_big_ic`.
    static let placeholder_big_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_big_ic")
    /// Image `placeholder_little_ic`.
    static let placeholder_little_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_little_ic")
    /// Image `plants_detail_about_deciduous_ic`.
    static let plants_detail_about_deciduous_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_deciduous_ic")
    /// Image `plants_detail_about_habit_ic`.
    static let plants_detail_about_habit_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_habit_ic")
    /// Image `plants_detail_about_hardiness_ic`.
    static let plants_detail_about_hardiness_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_hardiness_ic")
    /// Image `plants_detail_about_height_ic`.
    static let plants_detail_about_height_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_height_ic")
    /// Image `plants_detail_about_moisture_ic`.
    static let plants_detail_about_moisture_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_moisture_ic")
    /// Image `plants_detail_about_ph_ic`.
    static let plants_detail_about_ph_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_ph_ic")
    /// Image `plants_detail_about_shade_ic`.
    static let plants_detail_about_shade_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_shade_ic")
    /// Image `plants_detail_about_soil_ic`.
    static let plants_detail_about_soil_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_about_soil_ic")
    /// Image `plants_detail_added_favorites_ic`.
    static let plants_detail_added_favorites_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_added_favorites_ic")
    /// Image `plants_detail_back_ic`.
    static let plants_detail_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_back_ic")
    /// Image `plants_detail_favorite_ic`.
    static let plants_detail_favorite_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_favorite_ic")
    /// Image `plants_detail_green_ic`.
    static let plants_detail_green_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_green_ic")
    /// Image `plants_detail_humidity_ic`.
    static let plants_detail_humidity_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_humidity_ic")
    /// Image `plants_detail_misting_ic`.
    static let plants_detail_misting_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_misting_ic")
    /// Image `plants_detail_no_favorite_ic`.
    static let plants_detail_no_favorite_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_no_favorite_ic")
    /// Image `plants_detail_removed_favorites_ic`.
    static let plants_detail_removed_favorites_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_removed_favorites_ic")
    /// Image `plants_detail_rotating_ic`.
    static let plants_detail_rotating_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_rotating_ic")
    /// Image `plants_detail_watering_ic`.
    static let plants_detail_watering_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_detail_watering_ic")
    /// Image `plants_dots_ic`.
    static let plants_dots_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "plants_dots_ic")
    /// Image `recognize_archive_ic`.
    static let recognize_archive_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "recognize_archive_ic")
    /// Image `scheldure_bell_ic`.
    static let scheldure_bell_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "scheldure_bell_ic")
    /// Image `scheldure_settings_bell_ic`.
    static let scheldure_settings_bell_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "scheldure_settings_bell_ic")
    /// Image `scheldure_settings_ic`.
    static let scheldure_settings_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "scheldure_settings_ic")
    /// Image `sub_active_check_ic`.
    static let sub_active_check_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "sub_active_check_ic")
    /// Image `sub_back_ic`.
    static let sub_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "sub_back_ic")
    /// Image `sub_close_ic`.
    static let sub_close_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "sub_close_ic")
    /// Image `temp_detail_ic`.
    static let temp_detail_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_detail_ic")
    /// Image `temp_plants_ic`.
    static let temp_plants_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_plants_ic")
    /// Image `unique_add_back_ic`.
    static let unique_add_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "unique_add_back_ic")
    /// Image `unique_arrow_back_ic`.
    static let unique_arrow_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "unique_arrow_back_ic")
    /// Image `unique_cover_capture_ic`.
    static let unique_cover_capture_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "unique_cover_capture_ic")
    /// Image `unique_cover_close_ic`.
    static let unique_cover_close_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "unique_cover_close_ic")
    /// Image `welcome_plant_ic`.
    static let welcome_plant_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_plant_ic")
    /// Image `welcome_plant_title_ic`.
    static let welcome_plant_title_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcome_plant_title_ic")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "0387eb0228108c3862249f5f68cc1f46a2b645bf", bundle: ..., traitCollection: ...)`
    static func eb0228108c3862249f5f68cc1f46a2b645bf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eb0228108c3862249f5f68cc1f46a2b645bf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "3c0ee1011123205f7b1af28adb3bdb92ca5bc8e6", bundle: ..., traitCollection: ...)`
    static func c0ee1011123205f7b1af28adb3bdb92ca5bc8e6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c0ee1011123205f7b1af28adb3bdb92ca5bc8e6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "50768c7e39870d8fe5102da500e2b7dfd6e35156", bundle: ..., traitCollection: ...)`
    static func c7e39870d8fe5102da500e2b7dfd6e35156(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.c7e39870d8fe5102da500e2b7dfd6e35156, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "7249753fd0388b133090fb58740a2c12387a848d", bundle: ..., traitCollection: ...)`
    static func fd0388b133090fb58740a2c12387a848d(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fd0388b133090fb58740a2c12387a848d, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "avatar_ic", bundle: ..., traitCollection: ...)`
    static func avatar_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatar_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_main", bundle: ..., traitCollection: ...)`
    static func background_main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ce90603745001e15f304bfaf33f3d09971a2d951", bundle: ..., traitCollection: ...)`
    static func ce90603745001e15f304bfaf33f3d09971a2d951(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ce90603745001e15f304bfaf33f3d09971a2d951, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "congrads_view_flower_ic", bundle: ..., traitCollection: ...)`
    static func congrads_view_flower_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.congrads_view_flower_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584", bundle: ..., traitCollection: ...)`
    static func d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.d2a1bacac2b6f24c96eeaa53d308d0b6f8bab584, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fdba6d1ffef80f7deaf150c9d1df1e2192528442", bundle: ..., traitCollection: ...)`
    static func fdba6d1ffef80f7deaf150c9d1df1e2192528442(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fdba6d1ffef80f7deaf150c9d1df1e2192528442, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garde_edit_ic", bundle: ..., traitCollection: ...)`
    static func garde_edit_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garde_edit_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_added_in_schedule_ic", bundle: ..., traitCollection: ...)`
    static func garden_added_in_schedule_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_added_in_schedule_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_back_ic", bundle: ..., traitCollection: ...)`
    static func garden_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_bell_ic", bundle: ..., traitCollection: ...)`
    static func garden_bell_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_bell_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_humidity_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_humidity_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_humidity_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_missed_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_missed_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_missed_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_misting_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_misting_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_misting_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_rotating_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_rotating_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_rotating_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_waiting_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_waiting_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_waiting_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_care_watering_ic", bundle: ..., traitCollection: ...)`
    static func garden_care_watering_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_care_watering_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_delete_ic", bundle: ..., traitCollection: ...)`
    static func garden_delete_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_delete_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_delete_select_ic", bundle: ..., traitCollection: ...)`
    static func garden_delete_select_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_delete_select_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_delete_unselect_ic", bundle: ..., traitCollection: ...)`
    static func garden_delete_unselect_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_delete_unselect_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_removed_from_schedule_ic", bundle: ..., traitCollection: ...)`
    static func garden_removed_from_schedule_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_removed_from_schedule_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_schelure_ic", bundle: ..., traitCollection: ...)`
    static func garden_schelure_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_schelure_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_selected_bell_ic", bundle: ..., traitCollection: ...)`
    static func garden_selected_bell_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_selected_bell_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_background", bundle: ..., traitCollection: ...)`
    static func ic_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_diagnosis", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_diagnosis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_diagnosis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_photo", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_close", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_4", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_phonendoscope", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_phonendoscope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_phonendoscope, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_identify_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_close", bundle: ..., traitCollection: ...)`
    static func ic_identify_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_off", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_on", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_gallery", bundle: ..., traitCollection: ...)`
    static func ic_identify_gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_no_data", bundle: ..., traitCollection: ...)`
    static func ic_identify_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_black", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_rectangle", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_white", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_recognize_arhive", bundle: ..., traitCollection: ...)`
    static func ic_identify_recognize_arhive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_recognize_arhive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_apple", bundle: ..., traitCollection: ...)`
    static func ic_login_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_bg", bundle: ..., traitCollection: ...)`
    static func ic_login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_close", bundle: ..., traitCollection: ...)`
    static func ic_login_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_facebook", bundle: ..., traitCollection: ...)`
    static func ic_login_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_google", bundle: ..., traitCollection: ...)`
    static func ic_login_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_instagram", bundle: ..., traitCollection: ...)`
    static func ic_login_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_logo", bundle: ..., traitCollection: ...)`
    static func ic_login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_add", bundle: ..., traitCollection: ...)`
    static func ic_plants_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_backToTop", bundle: ..., traitCollection: ...)`
    static func ic_plants_backToTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_backToTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_close", bundle: ..., traitCollection: ...)`
    static func ic_plants_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_favorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_line", bundle: ..., traitCollection: ...)`
    static func ic_plants_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_photo", bundle: ..., traitCollection: ...)`
    static func ic_plants_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_search", bundle: ..., traitCollection: ...)`
    static func ic_plants_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unfavorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_unfavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unfavorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unique", bundle: ..., traitCollection: ...)`
    static func ic_plants_unique(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unique, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wishlist_no_data", bundle: ..., traitCollection: ...)`
    static func ic_wishlist_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wishlist_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icn_diagnose", bundle: ..., traitCollection: ...)`
    static func icn_diagnose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icn_diagnose, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_big_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_big_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_big_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder_little_ic", bundle: ..., traitCollection: ...)`
    static func placeholder_little_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_little_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_deciduous_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_deciduous_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_deciduous_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_habit_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_habit_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_habit_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_hardiness_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_hardiness_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_hardiness_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_height_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_height_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_height_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_moisture_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_moisture_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_moisture_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_ph_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_ph_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_ph_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_shade_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_shade_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_shade_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_about_soil_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_about_soil_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_about_soil_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_added_favorites_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_added_favorites_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_added_favorites_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_back_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_favorite_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_favorite_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_favorite_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_green_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_green_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_green_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_humidity_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_humidity_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_humidity_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_misting_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_misting_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_misting_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_no_favorite_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_no_favorite_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_no_favorite_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_removed_favorites_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_removed_favorites_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_removed_favorites_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_rotating_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_rotating_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_rotating_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_detail_watering_ic", bundle: ..., traitCollection: ...)`
    static func plants_detail_watering_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_detail_watering_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plants_dots_ic", bundle: ..., traitCollection: ...)`
    static func plants_dots_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plants_dots_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recognize_archive_ic", bundle: ..., traitCollection: ...)`
    static func recognize_archive_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recognize_archive_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scheldure_bell_ic", bundle: ..., traitCollection: ...)`
    static func scheldure_bell_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scheldure_bell_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scheldure_settings_bell_ic", bundle: ..., traitCollection: ...)`
    static func scheldure_settings_bell_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scheldure_settings_bell_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scheldure_settings_ic", bundle: ..., traitCollection: ...)`
    static func scheldure_settings_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scheldure_settings_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sub_active_check_ic", bundle: ..., traitCollection: ...)`
    static func sub_active_check_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sub_active_check_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sub_back_ic", bundle: ..., traitCollection: ...)`
    static func sub_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sub_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sub_close_ic", bundle: ..., traitCollection: ...)`
    static func sub_close_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sub_close_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_detail_ic", bundle: ..., traitCollection: ...)`
    static func temp_detail_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_detail_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_plants_ic", bundle: ..., traitCollection: ...)`
    static func temp_plants_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_plants_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unique_add_back_ic", bundle: ..., traitCollection: ...)`
    static func unique_add_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unique_add_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unique_arrow_back_ic", bundle: ..., traitCollection: ...)`
    static func unique_arrow_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unique_arrow_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unique_cover_capture_ic", bundle: ..., traitCollection: ...)`
    static func unique_cover_capture_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unique_cover_capture_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unique_cover_close_ic", bundle: ..., traitCollection: ...)`
    static func unique_cover_close_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unique_cover_close_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome_plant_ic", bundle: ..., traitCollection: ...)`
    static func welcome_plant_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_plant_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcome_plant_title_ic", bundle: ..., traitCollection: ...)`
    static func welcome_plant_title_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcome_plant_title_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 65 nibs.
  struct nib {
    /// Nib `AddCareCell`.
    static let addCareCell = _R.nib._AddCareCell()
    /// Nib `AddCoverAddController`.
    static let addCoverAddController = _R.nib._AddCoverAddController()
    /// Nib `AddCoverIdentifierController`.
    static let addCoverIdentifierController = _R.nib._AddCoverIdentifierController()
    /// Nib `AddPlantCareView`.
    static let addPlantCareView = _R.nib._AddPlantCareView()
    /// Nib `AddPlantTimeCell`.
    static let addPlantTimeCell = _R.nib._AddPlantTimeCell()
    /// Nib `AddPlantTimeController`.
    static let addPlantTimeController = _R.nib._AddPlantTimeController()
    /// Nib `AddPlantTitleCell`.
    static let addPlantTitleCell = _R.nib._AddPlantTitleCell()
    /// Nib `AddPlantsCareController`.
    static let addPlantsCareController = _R.nib._AddPlantsCareController()
    /// Nib `CareCell`.
    static let careCell = _R.nib._CareCell()
    /// Nib `CareInfoCell`.
    static let careInfoCell = _R.nib._CareInfoCell()
    /// Nib `ChooseIdentifyController`.
    static let chooseIdentifyController = _R.nib._ChooseIdentifyController()
    /// Nib `CongradsView`.
    static let congradsView = _R.nib._CongradsView()
    /// Nib `DetailAboutView`.
    static let detailAboutView = _R.nib._DetailAboutView()
    /// Nib `DetailCaresView`.
    static let detailCaresView = _R.nib._DetailCaresView()
    /// Nib `DiagnosisController`.
    static let diagnosisController = _R.nib._DiagnosisController()
    /// Nib `DiseaseArchiveCell`.
    static let diseaseArchiveCell = _R.nib._DiseaseArchiveCell()
    /// Nib `DiseaseArchiveViewController`.
    static let diseaseArchiveViewController = _R.nib._DiseaseArchiveViewController()
    /// Nib `GardenButtonCell`.
    static let gardenButtonCell = _R.nib._GardenButtonCell()
    /// Nib `GardenCareDetailView`.
    static let gardenCareDetailView = _R.nib._GardenCareDetailView()
    /// Nib `GardenCaresDetail`.
    static let gardenCaresDetail = _R.nib._GardenCaresDetail()
    /// Nib `GardenChooseAddPlantController`.
    static let gardenChooseAddPlantController = _R.nib._GardenChooseAddPlantController()
    /// Nib `GardenDetailAboutCell`.
    static let gardenDetailAboutCell = _R.nib._GardenDetailAboutCell()
    /// Nib `GardenDetailAllWaitingCell`.
    static let gardenDetailAllWaitingCell = _R.nib._GardenDetailAllWaitingCell()
    /// Nib `GardenDetailCaresCell`.
    static let gardenDetailCaresCell = _R.nib._GardenDetailCaresCell()
    /// Nib `GardenDetailController`.
    static let gardenDetailController = _R.nib._GardenDetailController()
    /// Nib `GardenDetailDeletePlanController`.
    static let gardenDetailDeletePlanController = _R.nib._GardenDetailDeletePlanController()
    /// Nib `GardenDetailEditCareCell`.
    static let gardenDetailEditCareCell = _R.nib._GardenDetailEditCareCell()
    /// Nib `GardenDetailScheduleCell`.
    static let gardenDetailScheduleCell = _R.nib._GardenDetailScheduleCell()
    /// Nib `GardenDetailSegmentCell`.
    static let gardenDetailSegmentCell = _R.nib._GardenDetailSegmentCell()
    /// Nib `GardenDetailTitleCell`.
    static let gardenDetailTitleCell = _R.nib._GardenDetailTitleCell()
    /// Nib `GardenPlantAddCaresSetup`.
    static let gardenPlantAddCaresSetup = _R.nib._GardenPlantAddCaresSetup()
    /// Nib `GardenPlantAddCares`.
    static let gardenPlantAddCares = _R.nib._GardenPlantAddCares()
    /// Nib `GardenPlantCareView`.
    static let gardenPlantCareView = _R.nib._GardenPlantCareView()
    /// Nib `GardenPlantCaresEditDelete`.
    static let gardenPlantCaresEditDelete = _R.nib._GardenPlantCaresEditDelete()
    /// Nib `GardenPlantCaresEdit`.
    static let gardenPlantCaresEdit = _R.nib._GardenPlantCaresEdit()
    /// Nib `GardenViewCell`.
    static let gardenViewCell = _R.nib._GardenViewCell()
    /// Nib `IdentifyController`.
    static let identifyController = _R.nib._IdentifyController()
    /// Nib `LanguageCell`.
    static let languageCell = _R.nib._LanguageCell()
    /// Nib `LanguageController`.
    static let languageController = _R.nib._LanguageController()
    /// Nib `LillActivityIndicator`.
    static let lillActivityIndicator = _R.nib._LillActivityIndicator()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `MainOnboardingController`.
    static let mainOnboardingController = _R.nib._MainOnboardingController()
    /// Nib `MenuAccauntInfoTableViewCell`.
    static let menuAccauntInfoTableViewCell = _R.nib._MenuAccauntInfoTableViewCell()
    /// Nib `MenuItemTableViewCell`.
    static let menuItemTableViewCell = _R.nib._MenuItemTableViewCell()
    /// Nib `OnboardingFirsController`.
    static let onboardingFirsController = _R.nib._OnboardingFirsController()
    /// Nib `OnboardingFourController`.
    static let onboardingFourController = _R.nib._OnboardingFourController()
    /// Nib `OnboardingPageController`.
    static let onboardingPageController = _R.nib._OnboardingPageController()
    /// Nib `OnboardingSecondController`.
    static let onboardingSecondController = _R.nib._OnboardingSecondController()
    /// Nib `OnboardingThreeController`.
    static let onboardingThreeController = _R.nib._OnboardingThreeController()
    /// Nib `OnboardingWelcomeController`.
    static let onboardingWelcomeController = _R.nib._OnboardingWelcomeController()
    /// Nib `PickerCaresController`.
    static let pickerCaresController = _R.nib._PickerCaresController()
    /// Nib `PlantCollectionCell`.
    static let plantCollectionCell = _R.nib._PlantCollectionCell()
    /// Nib `PlantsDetailController`.
    static let plantsDetailController = _R.nib._PlantsDetailController()
    /// Nib `PopChangeNameController`.
    static let popChangeNameController = _R.nib._PopChangeNameController()
    /// Nib `PopClonePlantController`.
    static let popClonePlantController = _R.nib._PopClonePlantController()
    /// Nib `PopUniquePlantController`.
    static let popUniquePlantController = _R.nib._PopUniquePlantController()
    /// Nib `RecognizeArchiveController`.
    static let recognizeArchiveController = _R.nib._RecognizeArchiveController()
    /// Nib `ScheduleCell`.
    static let scheduleCell = _R.nib._ScheduleCell()
    /// Nib `ScheduleColapsBottomView`.
    static let scheduleColapsBottomView = _R.nib._ScheduleColapsBottomView()
    /// Nib `ScheduleColapsView`.
    static let scheduleColapsView = _R.nib._ScheduleColapsView()
    /// Nib `ScheduleDoneAllCell`.
    static let scheduleDoneAllCell = _R.nib._ScheduleDoneAllCell()
    /// Nib `ScheduleSettingsController`.
    static let scheduleSettingsController = _R.nib._ScheduleSettingsController()
    /// Nib `SplashController`.
    static let splashController = _R.nib._SplashController()
    /// Nib `SubcribeController`.
    static let subcribeController = _R.nib._SubcribeController()
    /// Nib `WishListController`.
    static let wishListController = _R.nib._WishListController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddCareCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCareCell) instead")
    static func addCareCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCareCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddCoverAddController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCoverAddController) instead")
    static func addCoverAddController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCoverAddController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddCoverIdentifierController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addCoverIdentifierController) instead")
    static func addCoverIdentifierController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addCoverIdentifierController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPlantCareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPlantCareView) instead")
    static func addPlantCareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPlantCareView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPlantTimeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPlantTimeCell) instead")
    static func addPlantTimeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPlantTimeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPlantTimeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPlantTimeController) instead")
    static func addPlantTimeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPlantTimeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPlantTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPlantTitleCell) instead")
    static func addPlantTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPlantTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddPlantsCareController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addPlantsCareController) instead")
    static func addPlantsCareController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPlantsCareController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CareCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.careCell) instead")
    static func careCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.careCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CareInfoCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.careInfoCell) instead")
    static func careInfoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.careInfoCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChooseIdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chooseIdentifyController) instead")
    static func chooseIdentifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseIdentifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CongradsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.congradsView) instead")
    static func congradsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.congradsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailAboutView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailAboutView) instead")
    static func detailAboutView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailAboutView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailCaresView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailCaresView) instead")
    static func detailCaresView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailCaresView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiagnosisController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diagnosisController) instead")
    static func diagnosisController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diagnosisController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiseaseArchiveCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diseaseArchiveCell) instead")
    static func diseaseArchiveCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diseaseArchiveCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiseaseArchiveViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diseaseArchiveViewController) instead")
    static func diseaseArchiveViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diseaseArchiveViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenButtonCell) instead")
    static func gardenButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenButtonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenCareDetailView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenCareDetailView) instead")
    static func gardenCareDetailView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenCareDetailView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenCaresDetail", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenCaresDetail) instead")
    static func gardenCaresDetail(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenCaresDetail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenChooseAddPlantController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenChooseAddPlantController) instead")
    static func gardenChooseAddPlantController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenChooseAddPlantController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailAboutCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailAboutCell) instead")
    static func gardenDetailAboutCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailAboutCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailAllWaitingCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailAllWaitingCell) instead")
    static func gardenDetailAllWaitingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailAllWaitingCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailCaresCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailCaresCell) instead")
    static func gardenDetailCaresCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailCaresCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailController) instead")
    static func gardenDetailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailDeletePlanController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailDeletePlanController) instead")
    static func gardenDetailDeletePlanController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailDeletePlanController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailEditCareCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailEditCareCell) instead")
    static func gardenDetailEditCareCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailEditCareCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailScheduleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailScheduleCell) instead")
    static func gardenDetailScheduleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailScheduleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailSegmentCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailSegmentCell) instead")
    static func gardenDetailSegmentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailSegmentCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenDetailTitleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenDetailTitleCell) instead")
    static func gardenDetailTitleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenDetailTitleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenPlantAddCares", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenPlantAddCares) instead")
    static func gardenPlantAddCares(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenPlantAddCares)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenPlantAddCaresSetup", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenPlantAddCaresSetup) instead")
    static func gardenPlantAddCaresSetup(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenPlantAddCaresSetup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenPlantCareView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenPlantCareView) instead")
    static func gardenPlantCareView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenPlantCareView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenPlantCaresEdit", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenPlantCaresEdit) instead")
    static func gardenPlantCaresEdit(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenPlantCaresEdit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenPlantCaresEditDelete", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenPlantCaresEditDelete) instead")
    static func gardenPlantCaresEditDelete(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenPlantCaresEditDelete)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenViewCell) instead")
    static func gardenViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.identifyController) instead")
    static func identifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.identifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageCell) instead")
    static func languageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LanguageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.languageController) instead")
    static func languageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.languageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LillActivityIndicator", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lillActivityIndicator) instead")
    static func lillActivityIndicator(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lillActivityIndicator)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainOnboardingController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainOnboardingController) instead")
    static func mainOnboardingController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainOnboardingController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuAccauntInfoTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuAccauntInfoTableViewCell) instead")
    static func menuAccauntInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuAccauntInfoTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuItemTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuItemTableViewCell) instead")
    static func menuItemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuItemTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingFirsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingFirsController) instead")
    static func onboardingFirsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingFirsController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingFourController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingFourController) instead")
    static func onboardingFourController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingFourController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingPageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingPageController) instead")
    static func onboardingPageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingPageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingSecondController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingSecondController) instead")
    static func onboardingSecondController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingSecondController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingThreeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingThreeController) instead")
    static func onboardingThreeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingThreeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingWelcomeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingWelcomeController) instead")
    static func onboardingWelcomeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingWelcomeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PickerCaresController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.pickerCaresController) instead")
    static func pickerCaresController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.pickerCaresController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantCollectionCell) instead")
    static func plantCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantsDetailController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantsDetailController) instead")
    static func plantsDetailController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantsDetailController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopChangeNameController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popChangeNameController) instead")
    static func popChangeNameController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popChangeNameController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopClonePlantController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popClonePlantController) instead")
    static func popClonePlantController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popClonePlantController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopUniquePlantController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popUniquePlantController) instead")
    static func popUniquePlantController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popUniquePlantController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RecognizeArchiveController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.recognizeArchiveController) instead")
    static func recognizeArchiveController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recognizeArchiveController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduleCell) instead")
    static func scheduleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduleColapsBottomView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduleColapsBottomView) instead")
    static func scheduleColapsBottomView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleColapsBottomView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduleColapsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduleColapsView) instead")
    static func scheduleColapsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleColapsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduleDoneAllCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduleDoneAllCell) instead")
    static func scheduleDoneAllCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleDoneAllCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScheduleSettingsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scheduleSettingsController) instead")
    static func scheduleSettingsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scheduleSettingsController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashController) instead")
    static func splashController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubcribeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subcribeController) instead")
    static func subcribeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subcribeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WishListController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wishListController) instead")
    static func wishListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wishListController)
    }
    #endif

    static func addCareCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCareCell? {
      return R.nib.addCareCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCareCell
    }

    static func addCoverAddController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addCoverAddController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addCoverIdentifierController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addCoverIdentifierController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addPlantCareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addPlantCareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addPlantTimeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPlantTimeCell? {
      return R.nib.addPlantTimeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPlantTimeCell
    }

    static func addPlantTimeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addPlantTimeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func addPlantTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPlantTitleCell? {
      return R.nib.addPlantTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPlantTitleCell
    }

    static func addPlantsCareController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.addPlantsCareController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func careCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CareCell? {
      return R.nib.careCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CareCell
    }

    static func careInfoCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CareInfoCell? {
      return R.nib.careInfoCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CareInfoCell
    }

    static func chooseIdentifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chooseIdentifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func congradsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CongradsView? {
      return R.nib.congradsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CongradsView
    }

    static func detailAboutView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailAboutView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailCaresView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailCaresView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func diagnosisController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.diagnosisController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func diseaseArchiveCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiseaseArchiveCell? {
      return R.nib.diseaseArchiveCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiseaseArchiveCell
    }

    static func diseaseArchiveViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.diseaseArchiveViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
      return R.nib.gardenButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
    }

    static func gardenCareDetailView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenCareDetailView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenCaresDetail(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenCaresDetail.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenChooseAddPlantController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenChooseAddPlantController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenDetailAboutCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailAboutCell? {
      return R.nib.gardenDetailAboutCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailAboutCell
    }

    static func gardenDetailAllWaitingCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailAllWaitingCell? {
      return R.nib.gardenDetailAllWaitingCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailAllWaitingCell
    }

    static func gardenDetailCaresCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailCaresCell? {
      return R.nib.gardenDetailCaresCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailCaresCell
    }

    static func gardenDetailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenDetailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenDetailDeletePlanController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenDetailDeletePlanController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenDetailEditCareCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailEditCareCell? {
      return R.nib.gardenDetailEditCareCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailEditCareCell
    }

    static func gardenDetailScheduleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailScheduleCell? {
      return R.nib.gardenDetailScheduleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailScheduleCell
    }

    static func gardenDetailSegmentCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailSegmentCell? {
      return R.nib.gardenDetailSegmentCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailSegmentCell
    }

    static func gardenDetailTitleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailTitleCell? {
      return R.nib.gardenDetailTitleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailTitleCell
    }

    static func gardenPlantAddCares(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenPlantAddCares.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenPlantAddCaresSetup(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenPlantAddCaresSetup.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenPlantCareView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenPlantCareView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenPlantCaresEdit(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenPlantCaresEdit.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenPlantCaresEditDelete(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gardenPlantCaresEditDelete.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
      return R.nib.gardenViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
    }

    static func identifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.identifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func languageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
      return R.nib.languageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
    }

    static func languageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.languageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func lillActivityIndicator(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.lillActivityIndicator.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainOnboardingController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainOnboardingController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuAccauntInfoTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuAccauntInfoTableViewCell? {
      return R.nib.menuAccauntInfoTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuAccauntInfoTableViewCell
    }

    static func menuItemTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuItemTableViewCell? {
      return R.nib.menuItemTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuItemTableViewCell
    }

    static func onboardingFirsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingFirsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingFourController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingFourController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingPageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingPageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingSecondController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingSecondController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingThreeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingThreeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingWelcomeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingWelcomeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func pickerCaresController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.pickerCaresController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func plantCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
      return R.nib.plantCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
    }

    static func plantsDetailController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.plantsDetailController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func popChangeNameController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popChangeNameController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func popClonePlantController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popClonePlantController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func popUniquePlantController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popUniquePlantController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func recognizeArchiveController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.recognizeArchiveController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scheduleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduleCell? {
      return R.nib.scheduleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduleCell
    }

    static func scheduleColapsBottomView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scheduleColapsBottomView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scheduleColapsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scheduleColapsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scheduleDoneAllCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduleDoneAllCell? {
      return R.nib.scheduleDoneAllCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduleDoneAllCell
    }

    static func scheduleSettingsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.scheduleSettingsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func splashController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func subcribeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.subcribeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func wishListController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.wishListController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 16 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddCareCell`.
    static let addCareCell: Rswift.ReuseIdentifier<AddCareCell> = Rswift.ReuseIdentifier(identifier: "AddCareCell")
    /// Reuse identifier `AddPlantTimeCell`.
    static let addPlantTimeCell: Rswift.ReuseIdentifier<AddPlantTimeCell> = Rswift.ReuseIdentifier(identifier: "AddPlantTimeCell")
    /// Reuse identifier `AddPlantTitleCell`.
    static let addPlantTitleCell: Rswift.ReuseIdentifier<AddPlantTitleCell> = Rswift.ReuseIdentifier(identifier: "AddPlantTitleCell")
    /// Reuse identifier `CareCell`.
    static let careCell: Rswift.ReuseIdentifier<CareCell> = Rswift.ReuseIdentifier(identifier: "CareCell")
    /// Reuse identifier `CareInfoCell`.
    static let careInfoCell: Rswift.ReuseIdentifier<CareInfoCell> = Rswift.ReuseIdentifier(identifier: "CareInfoCell")
    /// Reuse identifier `DiseaseArchiveCell`.
    static let diseaseArchiveCell: Rswift.ReuseIdentifier<DiseaseArchiveCell> = Rswift.ReuseIdentifier(identifier: "DiseaseArchiveCell")
    /// Reuse identifier `GardenDetailAboutCell`.
    static let gardenDetailAboutCell: Rswift.ReuseIdentifier<GardenDetailAboutCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailAboutCell")
    /// Reuse identifier `GardenDetailAllWaitingCell`.
    static let gardenDetailAllWaitingCell: Rswift.ReuseIdentifier<GardenDetailAllWaitingCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailAllWaitingCell")
    /// Reuse identifier `GardenDetailCaresCell`.
    static let gardenDetailCaresCell: Rswift.ReuseIdentifier<GardenDetailCaresCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailCaresCell")
    /// Reuse identifier `GardenDetailEditCareCell`.
    static let gardenDetailEditCareCell: Rswift.ReuseIdentifier<GardenDetailEditCareCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailEditCareCell")
    /// Reuse identifier `GardenDetailScheduleCell`.
    static let gardenDetailScheduleCell: Rswift.ReuseIdentifier<GardenDetailScheduleCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailScheduleCell")
    /// Reuse identifier `GardenDetailSegmentCell`.
    static let gardenDetailSegmentCell: Rswift.ReuseIdentifier<GardenDetailSegmentCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailSegmentCell")
    /// Reuse identifier `GardenDetailTitleCell`.
    static let gardenDetailTitleCell: Rswift.ReuseIdentifier<GardenDetailTitleCell> = Rswift.ReuseIdentifier(identifier: "GardenDetailTitleCell")
    /// Reuse identifier `LanguageCell`.
    static let languageCell: Rswift.ReuseIdentifier<LanguageCell> = Rswift.ReuseIdentifier(identifier: "LanguageCell")
    /// Reuse identifier `ScheduleCell`.
    static let scheduleCell: Rswift.ReuseIdentifier<ScheduleCell> = Rswift.ReuseIdentifier(identifier: "ScheduleCell")
    /// Reuse identifier `ScheduleDoneAllCell`.
    static let scheduleDoneAllCell: Rswift.ReuseIdentifier<ScheduleDoneAllCell> = Rswift.ReuseIdentifier(identifier: "ScheduleDoneAllCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// en translation: Allow access to Camera to be able to take photos of plants and gardens. Allow access to Photos to identify plants on your photos.
      ///
      /// Locales: en, es
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your data will be used to provide you with tailored personalized experience.
      ///
      /// Locales: en, es
      static let nsUserTrackingUsageDescription = Rswift.StringResource(key: "NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: Allow access to Camera to be able to take photos of plants and gardens. Allow access to Photos to identify plants on your photos.
      ///
      /// Locales: en, es
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: Your data will be used to provide you with tailored personalized experience.
      ///
      /// Locales: en, es
      static func nsUserTrackingUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSUserTrackingUsageDescription"
        }

        return NSLocalizedString("NSUserTrackingUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 264 localization keys.
    struct localizable {
      /// en translation: A
      ///
      /// Locales: en, es
      static let climate_ph_a = Rswift.StringResource(key: "climate_ph_a", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: AN
      ///
      /// Locales: en, es
      static let climate_ph_an = Rswift.StringResource(key: "climate_ph_an", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: ANB
      ///
      /// Locales: en, es
      static let climate_ph_anb = Rswift.StringResource(key: "climate_ph_anb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, es
      static let garden_detail_about = Rswift.StringResource(key: "garden_detail_about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, es
      static let plant_detail_about = Rswift.StringResource(key: "plant_detail_about", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Actions with Plant
      ///
      /// Locales: en, es
      static let action_edit_title = Rswift.StringResource(key: "action_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Active
      ///
      /// Locales: en, es
      static let subscription_active = Rswift.StringResource(key: "subscription_active", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Care
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_setup_title = Rswift.StringResource(key: "garden_plant_add_cares_setup_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Care
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_title = Rswift.StringResource(key: "garden_plant_add_cares_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Care
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_add_care = Rswift.StringResource(key: "garden_plant_cares_edit_add_care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Cares
      ///
      /// Locales: en, es
      static let uniques_add_care = Rswift.StringResource(key: "uniques_add_care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Cover
      ///
      /// Locales: en, es
      static let uniques_cover_add = Rswift.StringResource(key: "uniques_cover_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Custom Care
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_add_custom_care = Rswift.StringResource(key: "garden_plant_add_cares_add_custom_care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Plant
      ///
      /// Locales: en, es
      static let uniques_cover_title = Rswift.StringResource(key: "uniques_cover_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Plant Cares
      ///
      /// Locales: en, es
      static let uniques_cares_title = Rswift.StringResource(key: "uniques_cares_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Unique
      ///
      /// Locales: en, es
      static let plants_uniquePlantButton = Rswift.StringResource(key: "plants_uniquePlantButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add Unique Plant
      ///
      /// Locales: en, es
      static let uniquel_plan_name_title = Rswift.StringResource(key: "uniquel_plan_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Add to My Garden
      ///
      /// Locales: en, es
      static let plant_detail_add_to_my_garden = Rswift.StringResource(key: "plant_detail_add_to_my_garden", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Added in Schedule
      ///
      /// Locales: en, es
      static let garden_plant_detail_added_in_schedule = Rswift.StringResource(key: "garden_plant_detail_added_in_schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Added in Wishlist
      ///
      /// Locales: en, es
      static let plant_detail_added_to_wishlist = Rswift.StringResource(key: "plant_detail_added_to_wishlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Analyzing image
      ///
      /// Locales: en, es
      static let identify_analize_image = Rswift.StringResource(key: "identify_analize_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Annual Climber
      ///
      /// Locales: en, es
      static let climate_habit_annual_climber = Rswift.StringResource(key: "climate_habit_annual_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Annual Perennial
      ///
      /// Locales: en, es
      static let climate_habit_annual_perennial = Rswift.StringResource(key: "climate_habit_annual_perennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: en, es
      static let uniques_cover_add_apply = Rswift.StringResource(key: "uniques_cover_add_apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure want log out?
      ///
      /// Locales: en, es
      static let allert_logout_message = Rswift.StringResource(key: "allert_logout_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure want to mark as done?
      ///
      /// Locales: en, es
      static let garden_cares_detail_info = Rswift.StringResource(key: "garden_cares_detail_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Are you sure you want to do this?
      ///
      /// Locales: en, es
      static let garde_edit_delete_allert_sub_title = Rswift.StringResource(key: "garde_edit_delete_allert_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: B
      ///
      /// Locales: en, es
      static let climate_ph_b = Rswift.StringResource(key: "climate_ph_b", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, es
      static let plant_detail_back = Rswift.StringResource(key: "plant_detail_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, es
      static let wish_list_back = Rswift.StringResource(key: "wish_list_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Back to top
      ///
      /// Locales: en, es
      static let plants_backToTop = Rswift.StringResource(key: "plants_backToTop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Bamboo
      ///
      /// Locales: en, es
      static let climate_habit_bamboo = Rswift.StringResource(key: "climate_habit_bamboo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Become a Premium
      ///
      /// Locales: en, es
      static let subscription_title = Rswift.StringResource(key: "subscription_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Biennial
      ///
      /// Locales: en, es
      static let climate_habit_biennial = Rswift.StringResource(key: "climate_habit_biennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Biennial Perennial
      ///
      /// Locales: en, es
      static let climate_habit_biennial_perennial = Rswift.StringResource(key: "climate_habit_biennial_perennial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Bulb
      ///
      /// Locales: en, es
      static let climate_habit_bulb = Rswift.StringResource(key: "climate_habit_bulb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let action_edit_cancel = Rswift.StringResource(key: "action_edit_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let choose_identify_cancel = Rswift.StringResource(key: "choose_identify_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let garden_choose_add_plant_cancel = Rswift.StringResource(key: "garden_choose_add_plant_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let garden_delete_cancel = Rswift.StringResource(key: "garden_delete_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_cancel = Rswift.StringResource(key: "garden_plant_cares_edit_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let scheldure_setting_cancel = Rswift.StringResource(key: "scheldure_setting_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, es
      static let uniques_cover_cancel = Rswift.StringResource(key: "uniques_cover_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cancel anytime
      ///
      /// Locales: en, es
      static let subscription_cancel_any_time = Rswift.StringResource(key: "subscription_cancel_any_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en, es
      static let plants_uniquePlantLabel = Rswift.StringResource(key: "plants_uniquePlantLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en, es
      static let diagnosis_capture = Rswift.StringResource(key: "diagnosis_capture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en, es
      static let identify_capture = Rswift.StringResource(key: "identify_capture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en, es
      static let unique_ident_cover_capture_title = Rswift.StringResource(key: "unique_ident_cover_capture_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Capture sick part of Plant
      ///
      /// Locales: en, es
      static let diagnosis_capture_info = Rswift.StringResource(key: "diagnosis_capture_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Care Plan
      ///
      /// Locales: en, es
      static let garden_detail_care_plan = Rswift.StringResource(key: "garden_detail_care_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares
      ///
      /// Locales: en, es
      static let garden_cares_detail_cares = Rswift.StringResource(key: "garden_cares_detail_cares", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares
      ///
      /// Locales: en, es
      static let plant_detail_cares = Rswift.StringResource(key: "plant_detail_cares", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares
      ///
      /// Locales: en, es
      static let scheldure_setting_cares = Rswift.StringResource(key: "scheldure_setting_cares", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares Notifications
      ///
      /// Locales: en, es
      static let scheldure_setting_cares_notification = Rswift.StringResource(key: "scheldure_setting_cares_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cares added:
      ///
      /// Locales: en, es
      static let uniques_cares_add = Rswift.StringResource(key: "uniques_cares_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Catalog
      ///
      /// Locales: en, es
      static let garden_choose_add_plant_catalog = Rswift.StringResource(key: "garden_choose_add_plant_catalog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Change
      ///
      /// Locales: en, es
      static let pop_change_name_button = Rswift.StringResource(key: "pop_change_name_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Change Name
      ///
      /// Locales: en, es
      static let action_edit_change_name = Rswift.StringResource(key: "action_edit_change_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Change Name
      ///
      /// Locales: en, es
      static let pop_change_name_title = Rswift.StringResource(key: "pop_change_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Change Photo
      ///
      /// Locales: en, es
      static let action_edit_add_photo = Rswift.StringResource(key: "action_edit_add_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Check all Waiting Cares as done
      ///
      /// Locales: en, es
      static let garden_detail_check_all = Rswift.StringResource(key: "garden_detail_check_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Deciduous Unknown
      ///
      /// Locales: en, es
      static let climante_deciduous_unknown = Rswift.StringResource(key: "climante_deciduous_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Habit Unknown
      ///
      /// Locales: en, es
      static let climate_habit_unknown = Rswift.StringResource(key: "climate_habit_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Moisture Unknown
      ///
      /// Locales: en, es
      static let climate_moisture_unknown = Rswift.StringResource(key: "climate_moisture_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate PH Unknown
      ///
      /// Locales: en, es
      static let climate_ph_unknown = Rswift.StringResource(key: "climate_ph_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Shade Unknown
      ///
      /// Locales: en, es
      static let climate_shade_unknown = Rswift.StringResource(key: "climate_shade_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climate Soial Unknown
      ///
      /// Locales: en, es
      static let climate_soil_unknown = Rswift.StringResource(key: "climate_soil_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Climber
      ///
      /// Locales: en, es
      static let climate_habit_climber = Rswift.StringResource(key: "climate_habit_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static let action_edit_clone_plant = Rswift.StringResource(key: "action_edit_clone_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static let garden_clone_plant_button = Rswift.StringResource(key: "garden_clone_plant_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static let garden_clone_plant_title = Rswift.StringResource(key: "garden_clone_plant_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Confirm deleting Plant from your Garden
      ///
      /// Locales: en, es
      static let garden_delete_sub_title = Rswift.StringResource(key: "garden_delete_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Congrats!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_title = Rswift.StringResource(key: "plant_add_to_garden_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Cover
      ///
      /// Locales: en, es
      static let uniques_cares_back_title = Rswift.StringResource(key: "uniques_cares_back_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create Cover for your new Place
      ///
      /// Locales: en, es
      static let unique_ident_cover_sub_title = Rswift.StringResource(key: "unique_ident_cover_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create Plant name
      ///
      /// Locales: en, es
      static let uniquel_plan_create = Rswift.StringResource(key: "uniquel_plan_create", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Create name for your plant
      ///
      /// Locales: en, es
      static let uniquel_plan_name_sub_title = Rswift.StringResource(key: "uniquel_plan_name_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: D
      ///
      /// Locales: en, es
      static let climate_moisture_d = Rswift.StringResource(key: "climate_moisture_d", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DM
      ///
      /// Locales: en, es
      static let climate_moisture_dm = Rswift.StringResource(key: "climate_moisture_dm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DMW
      ///
      /// Locales: en, es
      static let climate_moisture_dmw = Rswift.StringResource(key: "climate_moisture_dmw", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: DMWE
      ///
      /// Locales: en, es
      static let climate_moisture_dmwe = Rswift.StringResource(key: "climate_moisture_dmwe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Days
      ///
      /// Locales: en, es
      static let care_period_type_days = Rswift.StringResource(key: "care_period_type_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Deciduous
      ///
      /// Locales: en, es
      static let climate_deciduous_deciduous = Rswift.StringResource(key: "climate_deciduous_deciduous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete %d Cares
      ///
      /// Locales: en, es
      static let garde_edit_delete_allert_button = Rswift.StringResource(key: "garde_edit_delete_allert_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete Care
      ///
      /// Locales: en, es
      static let garde_edit_delete_title = Rswift.StringResource(key: "garde_edit_delete_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete Cares
      ///
      /// Locales: en, es
      static let garde_edit_delete_delete_cares = Rswift.StringResource(key: "garde_edit_delete_delete_cares", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete Plant
      ///
      /// Locales: en, es
      static let action_edit_delete_plant = Rswift.StringResource(key: "action_edit_delete_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Delete Plant
      ///
      /// Locales: en, es
      static let garden_delete_plant = Rswift.StringResource(key: "garden_delete_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Deleting Plant
      ///
      /// Locales: en, es
      static let garden_delete_title = Rswift.StringResource(key: "garden_delete_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose
      ///
      /// Locales: en, es
      static let diagnosis_title = Rswift.StringResource(key: "diagnosis_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose Disease
      ///
      /// Locales: en, es
      static let disease_archive_button = Rswift.StringResource(key: "disease_archive_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnose Photo
      ///
      /// Locales: en, es
      static let diagnosis_preview_diagnose = Rswift.StringResource(key: "diagnosis_preview_diagnose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnosing in Progress
      ///
      /// Locales: en, es
      static let diagnosis_analyze_info = Rswift.StringResource(key: "diagnosis_analyze_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Diagnosis
      ///
      /// Locales: en, es
      static let choose_identify_diagnosis = Rswift.StringResource(key: "choose_identify_diagnosis", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static let disease_archive_title = Rswift.StringResource(key: "disease_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static let menu_item_archive_disease = Rswift.StringResource(key: "menu_item_archive_disease", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en, es
      static let identify_result_info = Rswift.StringResource(key: "identify_result_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let add_plant_done = Rswift.StringResource(key: "add_plant_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let garden_plan_done = Rswift.StringResource(key: "garden_plan_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_done = Rswift.StringResource(key: "garden_plant_add_cares_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_setup_done = Rswift.StringResource(key: "garden_plant_add_cares_setup_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_done = Rswift.StringResource(key: "garden_plant_cares_edit_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, es
      static let scheldure_setting_done = Rswift.StringResource(key: "scheldure_setting_done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Done all Waiting Cares
      ///
      /// Locales: en, es
      static let scheldure_done_all = Rswift.StringResource(key: "scheldure_done_all", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Edit Care Plan
      ///
      /// Locales: en, es
      static let action_edit_care_plan = Rswift.StringResource(key: "action_edit_care_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Edit Care Plan
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_title = Rswift.StringResource(key: "garden_plant_cares_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Edit My Care Plan
      ///
      /// Locales: en, es
      static let garden_detail_care_edit_my_plan = Rswift.StringResource(key: "garden_detail_care_edit_my_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Evergreen
      ///
      /// Locales: en, es
      static let climate_deciduous_evergreen = Rswift.StringResource(key: "climate_deciduous_evergreen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en, es
      static let login_info = Rswift.StringResource(key: "login_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Explore catalog
      ///
      /// Locales: en, es
      static let plants_explore = Rswift.StringResource(key: "plants_explore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FS
      ///
      /// Locales: en, es
      static let climate_shade_fs = Rswift.StringResource(key: "climate_shade_fs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: FSN
      ///
      /// Locales: en, es
      static let climate_shade_fsn = Rswift.StringResource(key: "climate_shade_fsn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Fern
      ///
      /// Locales: en, es
      static let climate_habit_fern = Rswift.StringResource(key: "climate_habit_fern", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Frequency
      ///
      /// Locales: en, es
      static let add_plant_frequency = Rswift.StringResource(key: "add_plant_frequency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Frequency of Notifications
      ///
      /// Locales: en, es
      static let scheldure_setting_frequency = Rswift.StringResource(key: "scheldure_setting_frequency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Full-size image of Plant
      ///
      /// Locales: en, es
      static let identify_make_photo_info = Rswift.StringResource(key: "identify_make_photo_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Get access to unlimited Identify and Diagnosis Plants
      ///
      /// Locales: en, es
      static let subscription_sub_title = Rswift.StringResource(key: "subscription_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Give name for clone of this plant
      ///
      /// Locales: en, es
      static let garden_clone_plant_subtitle = Rswift.StringResource(key: "garden_clone_plant_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Give your plant name
      ///
      /// Locales: en, es
      static let pop_change_name_subtitle = Rswift.StringResource(key: "pop_change_name_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Great!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_great = Rswift.StringResource(key: "plant_add_to_garden_great", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Habit
      ///
      /// Locales: en, es
      static let climate_habit = Rswift.StringResource(key: "climate_habit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hardiness
      ///
      /// Locales: en, es
      static let climate_hardiness = Rswift.StringResource(key: "climate_hardiness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Height
      ///
      /// Locales: en, es
      static let climate_height = Rswift.StringResource(key: "climate_height", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Hour
      ///
      /// Locales: en, es
      static let scheldure_setting_hour = Rswift.StringResource(key: "scheldure_setting_hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Humidity
      ///
      /// Locales: en, es
      static let care_type_humidity = Rswift.StringResource(key: "care_type_humidity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify
      ///
      /// Locales: en, es
      static let choose_identify_identify = Rswift.StringResource(key: "choose_identify_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify
      ///
      /// Locales: en, es
      static let garden_choose_add_plant_identify = Rswift.StringResource(key: "garden_choose_add_plant_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify Photo
      ///
      /// Locales: en
      static let identify_result_identify_photo = Rswift.StringResource(key: "identify_result_identify_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identify Results:
      ///
      /// Locales: en, es
      static let identify_results = Rswift.StringResource(key: "identify_results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identify my Plants
      ///
      /// Locales: en, es
      static let plants_identifier = Rswift.StringResource(key: "plants_identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en, es
      static let identify_result_title = Rswift.StringResource(key: "identify_result_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en, es
      static let identify_title = Rswift.StringResource(key: "identify_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en, es
      static let identify_info = Rswift.StringResource(key: "identify_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Identifying plant
      ///
      /// Locales: en, es
      static let identify_analize_identify_plant = Rswift.StringResource(key: "identify_analize_identify_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Invite friends (share app)
      ///
      /// Locales: en, es
      static let menu_item_share = Rswift.StringResource(key: "menu_item_share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: L
      ///
      /// Locales: en, es
      static let climate_soil_l = Rswift.StringResource(key: "climate_soil_l", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LM
      ///
      /// Locales: en, es
      static let climate_soil_lm = Rswift.StringResource(key: "climate_soil_lm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: LMH
      ///
      /// Locales: en, es
      static let climate_soil_lmh = Rswift.StringResource(key: "climate_soil_lmh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, es
      static let menu_item_language = Rswift.StringResource(key: "menu_item_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, es
      static let menu_laguage_title = Rswift.StringResource(key: "menu_laguage_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Log out
      ///
      /// Locales: en, es
      static let menu_log_out = Rswift.StringResource(key: "menu_log_out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, es
      static let climate_moisture_m = Rswift.StringResource(key: "climate_moisture_m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: M
      ///
      /// Locales: en, es
      static let climate_soil_m = Rswift.StringResource(key: "climate_soil_m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MH
      ///
      /// Locales: en, es
      static let climate_soil_mh = Rswift.StringResource(key: "climate_soil_mh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MWE
      ///
      /// Locales: en, es
      static let climate_moisture_mwe = Rswift.StringResource(key: "climate_moisture_mwe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: MWEWA
      ///
      /// Locales: en, es
      static let climate_moisture_mwewa = Rswift.StringResource(key: "climate_moisture_mwewa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en, es
      static let identify_make_photo_title = Rswift.StringResource(key: "identify_make_photo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static let diagnosis_onboarding_info = Rswift.StringResource(key: "diagnosis_onboarding_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static let diagnosis_preview_info = Rswift.StringResource(key: "diagnosis_preview_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en, es
      static let identify_overview_info = Rswift.StringResource(key: "identify_overview_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en, es
      static let identify_photo_quality_info = Rswift.StringResource(key: "identify_photo_quality_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Menu
      ///
      /// Locales: en, es
      static let menu_title = Rswift.StringResource(key: "menu_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Missed
      ///
      /// Locales: en, es
      static let garden_plan_missed = Rswift.StringResource(key: "garden_plan_missed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Missed
      ///
      /// Locales: en, es
      static let scheldure_setting_missed = Rswift.StringResource(key: "scheldure_setting_missed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Misting
      ///
      /// Locales: en, es
      static let care_type_misting = Rswift.StringResource(key: "care_type_misting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Moisture
      ///
      /// Locales: en, es
      static let climate_moisture = Rswift.StringResource(key: "climate_moisture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: More on Wiki
      ///
      /// Locales: en, es
      static let plant_detail_more_on_wiki = Rswift.StringResource(key: "plant_detail_more_on_wiki", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Mounths
      ///
      /// Locales: en, es
      static let care_period_type_mounths = Rswift.StringResource(key: "care_period_type_mounths", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: N
      ///
      /// Locales: en, es
      static let climate_ph_n = Rswift.StringResource(key: "climate_ph_n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: N
      ///
      /// Locales: en, es
      static let climate_shade_n = Rswift.StringResource(key: "climate_shade_n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NB
      ///
      /// Locales: en, es
      static let climate_ph_nb = Rswift.StringResource(key: "climate_ph_nb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: NO
      ///
      /// Locales: en, es
      static let allert_no = Rswift.StringResource(key: "allert_no", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Next 7 days
      ///
      /// Locales: en, es
      static let scheldure_next_days = Rswift.StringResource(key: "scheldure_next_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Next Date
      ///
      /// Locales: en, es
      static let add_plant_next_date = Rswift.StringResource(key: "add_plant_next_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: No problems detected
      ///
      /// Locales: en, es
      static let diagnosis_no_data = Rswift.StringResource(key: "diagnosis_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Overview
      ///
      /// Locales: en, es
      static let identify_overview_title = Rswift.StringResource(key: "identify_overview_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: PH
      ///
      /// Locales: en, es
      static let climate_ph = Rswift.StringResource(key: "climate_ph", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Perennial
      ///
      /// Locales: en, es
      static let climate_habit_perenial = Rswift.StringResource(key: "climate_habit_perenial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Perennial Climber
      ///
      /// Locales: en, es
      static let climate_habit_perenial_climber = Rswift.StringResource(key: "climate_habit_perenial_climber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Photo quality
      ///
      /// Locales: en, es
      static let identify_photo_quality_title = Rswift.StringResource(key: "identify_photo_quality_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant Cover is captured
      ///
      /// Locales: en, es
      static let uniques_cover_add_captured = Rswift.StringResource(key: "uniques_cover_add_captured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant has been Deleted
      ///
      /// Locales: en, es
      static let garden_delete_success = Rswift.StringResource(key: "garden_delete_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant is added in your Garden!
      ///
      /// Locales: en, es
      static let plant_add_to_garden_info = Rswift.StringResource(key: "plant_add_to_garden_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant is added to your Garden!
      ///
      /// Locales: en, es
      static let add_plants_success = Rswift.StringResource(key: "add_plants_success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plant name
      ///
      /// Locales: en, es
      static let uniques_cover_back_title = Rswift.StringResource(key: "uniques_cover_back_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Plants
      ///
      /// Locales: en, es
      static let scheldure_plants = Rswift.StringResource(key: "scheldure_plants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please Select Care you want to add to Plant Care Plan
      ///
      /// Locales: en, es
      static let uniques_cares_sub_title = Rswift.StringResource(key: "uniques_cares_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please Setup your Care for new Plant
      ///
      /// Locales: en, es
      static let add_plant_time_subtitle = Rswift.StringResource(key: "add_plant_time_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Please wait
      ///
      /// Locales: en, es
      static let activity_title = Rswift.StringResource(key: "activity_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Premium
      ///
      /// Locales: en, es
      static let choose_identify_premium = Rswift.StringResource(key: "choose_identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static let menu_item_privacy_policy = Rswift.StringResource(key: "menu_item_privacy_policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static let subscription_privacy = Rswift.StringResource(key: "subscription_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rate app
      ///
      /// Locales: en, es
      static let menu_item_rate = Rswift.StringResource(key: "menu_item_rate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognize Plant
      ///
      /// Locales: en, es
      static let recognize_archive_button = Rswift.StringResource(key: "recognize_archive_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static let menu_item_archive_recognized = Rswift.StringResource(key: "menu_item_archive_recognized", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static let recognize_archive_title = Rswift.StringResource(key: "recognize_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recurring monthly billing
      ///
      /// Locales: en, es
      static let subscription_recurring = Rswift.StringResource(key: "subscription_recurring", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Recurring yearly billing
      ///
      /// Locales: en
      static let subscription_recurring_yearly = Rswift.StringResource(key: "subscription_recurring_yearly", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Removed from Schedule
      ///
      /// Locales: en, es
      static let garden_plant_detail_removed_from_schedule = Rswift.StringResource(key: "garden_plant_detail_removed_from_schedule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Removed from Wishlist
      ///
      /// Locales: en, es
      static let plant_detail_removed_from_wishlist = Rswift.StringResource(key: "plant_detail_removed_from_wishlist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Restart Diagnosing
      ///
      /// Locales: en, es
      static let diagnosis_restart_diagnosing = Rswift.StringResource(key: "diagnosis_restart_diagnosing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Restore Purchases
      ///
      /// Locales: en, es
      static let subscription_restore = Rswift.StringResource(key: "subscription_restore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static let diagnosis_preview_retake = Rswift.StringResource(key: "diagnosis_preview_retake", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static let identify_result_retake_photo = Rswift.StringResource(key: "identify_result_retake_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static let uniques_cover_add_retake = Rswift.StringResource(key: "uniques_cover_add_retake", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Rotating
      ///
      /// Locales: en, es
      static let care_type_rotating = Rswift.StringResource(key: "care_type_rotating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: S
      ///
      /// Locales: en, es
      static let climate_shade_s = Rswift.StringResource(key: "climate_shade_s", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SELECT LANGUAGE
      ///
      /// Locales: en, es
      static let menu_language_header = Rswift.StringResource(key: "menu_language_header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: SN
      ///
      /// Locales: en, es
      static let climate_shade_sn = Rswift.StringResource(key: "climate_shade_sn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Save 33% Off
      ///
      /// Locales: en, es
      static let subscription_save_33 = Rswift.StringResource(key: "subscription_save_33", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Schedule
      ///
      /// Locales: en, es
      static let scheldure_title = Rswift.StringResource(key: "scheldure_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Search by Name
      ///
      /// Locales: en, es
      static let plants_search = Rswift.StringResource(key: "plants_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Second chance Alert
      ///
      /// Locales: en, es
      static let scheldure_setting_alert = Rswift.StringResource(key: "scheldure_setting_alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select Cares that you want to delete
      ///
      /// Locales: en, es
      static let garde_edit_delete_sub_title = Rswift.StringResource(key: "garde_edit_delete_sub_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Select From Cares
      ///
      /// Locales: en, es
      static let garden_plant_add_cares_info = Rswift.StringResource(key: "garden_plant_add_cares_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send Time:
      ///
      /// Locales: en, es
      static let scheldure_setting_send_time = Rswift.StringResource(key: "scheldure_setting_send_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send a daily list of cares and plants
      ///
      /// Locales: en, es
      static let scheldure_setting_send_daily_list = Rswift.StringResource(key: "scheldure_setting_send_daily_list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send additional notification if you miss your first one
      ///
      /// Locales: en, es
      static let scheldure_setting_after_sub = Rswift.StringResource(key: "scheldure_setting_after_sub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send after:
      ///
      /// Locales: en, es
      static let scheldure_setting_after = Rswift.StringResource(key: "scheldure_setting_after", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Send notifications no more often than the specified time period
      ///
      /// Locales: en, es
      static let scheldure_setting_frequency_sub = Rswift.StringResource(key: "scheldure_setting_frequency_sub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Set to Recommended Cares
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_set_to_recommended = Rswift.StringResource(key: "garden_plant_cares_edit_set_to_recommended", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, es
      static let scheldure_setting_title = Rswift.StringResource(key: "scheldure_setting_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shade
      ///
      /// Locales: en, es
      static let climate_shade = Rswift.StringResource(key: "climate_shade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Shrub
      ///
      /// Locales: en, es
      static let climate_habit_shrub = Rswift.StringResource(key: "climate_habit_shrub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign in with Apple
      ///
      /// Locales: en, es
      static let login_apple = Rswift.StringResource(key: "login_apple", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign in with Facebook
      ///
      /// Locales: en, es
      static let login_facebook = Rswift.StringResource(key: "login_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign in with Google
      ///
      /// Locales: en, es
      static let login_google = Rswift.StringResource(key: "login_google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sign in with Instagram
      ///
      /// Locales: en, es
      static let login_instagram = Rswift.StringResource(key: "login_instagram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, es
      static let uniques_skip_care = Rswift.StringResource(key: "uniques_skip_care", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Soil
      ///
      /// Locales: en, es
      static let climate_soil = Rswift.StringResource(key: "climate_soil", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Sorry,  no results found
      ///
      /// Locales: en, es
      static let identify_no_data = Rswift.StringResource(key: "identify_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start Diagnosing
      ///
      /// Locales: en, es
      static let diagnosis_start_diagnose = Rswift.StringResource(key: "diagnosis_start_diagnose", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Start Identify
      ///
      /// Locales: en, es
      static let identify_start_identify = Rswift.StringResource(key: "identify_start_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Subscribe
      ///
      /// Locales: en, es
      static let subscription_subscribe = Rswift.StringResource(key: "subscription_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Subscriptions
      ///
      /// Locales: en, es
      static let menu_item_subscriptions = Rswift.StringResource(key: "menu_item_subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Terms
      ///
      /// Locales: en, es
      static let menu_item_terms = Rswift.StringResource(key: "menu_item_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Terms of use
      ///
      /// Locales: en, es
      static let subscription_terms = Rswift.StringResource(key: "subscription_terms", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Thanks for subscribing, you have full version of app
      ///
      /// Locales: en, es
      static let subscription_thanks_subscription = Rswift.StringResource(key: "subscription_thanks_subscription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Time
      ///
      /// Locales: en, es
      static let add_plant_time = Rswift.StringResource(key: "add_plant_time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: To have daily schedule and notifications - turn ON Ring icon in Plant card
      ///
      /// Locales: en, es
      static let scheldure_empty_title = Rswift.StringResource(key: "scheldure_empty_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, es
      static let scheldure_today = Rswift.StringResource(key: "scheldure_today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Today List Notification
      ///
      /// Locales: en, es
      static let scheldure_setting_list_notification = Rswift.StringResource(key: "scheldure_setting_list_notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Tree
      ///
      /// Locales: en, es
      static let climate_habit_tree = Rswift.StringResource(key: "climate_habit_tree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Turn on/off Cares   to add/remove from Care Plan
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_info = Rswift.StringResource(key: "garden_plant_cares_edit_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Type
      ///
      /// Locales: en, es
      static let climate_deciduous = Rswift.StringResource(key: "climate_deciduous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Unknown
      ///
      /// Locales: en, es
      static let care_period_type_unknown = Rswift.StringResource(key: "care_period_type_unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Unsubscribe
      ///
      /// Locales: en, es
      static let subscription_unsubscribe = Rswift.StringResource(key: "subscription_unsubscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Upcoming
      ///
      /// Locales: en, es
      static let garden_plan_upcoming = Rswift.StringResource(key: "garden_plan_upcoming", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WA
      ///
      /// Locales: en, es
      static let climate_moisture_wa = Rswift.StringResource(key: "climate_moisture_wa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WEM
      ///
      /// Locales: en, es
      static let climate_moisture_wem = Rswift.StringResource(key: "climate_moisture_wem", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: WEWA
      ///
      /// Locales: en, es
      static let climate_moisture_wewa = Rswift.StringResource(key: "climate_moisture_wewa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Waiting
      ///
      /// Locales: en, es
      static let garden_plan_waiting = Rswift.StringResource(key: "garden_plan_waiting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Waiting
      ///
      /// Locales: en, es
      static let scheldure_setting_waiting = Rswift.StringResource(key: "scheldure_setting_waiting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Watering
      ///
      /// Locales: en, es
      static let care_type_watering = Rswift.StringResource(key: "care_type_watering", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Weeks
      ///
      /// Locales: en, es
      static let care_period_type_weeks = Rswift.StringResource(key: "care_period_type_weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wishlist
      ///
      /// Locales: en, es
      static let wish_list_title = Rswift.StringResource(key: "wish_list_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Wishlist is empty
      ///
      /// Locales: en, es
      static let wish_list_no_data = Rswift.StringResource(key: "wish_list_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: YES
      ///
      /// Locales: en, es
      static let allert_yes = Rswift.StringResource(key: "allert_yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You can cancel your subscription of free trial anytime by cancelling your subscription through your iTunes account settings, or it will automatically renew. This must be done in 24 hours before the end of the free trial or any subscription period to avoid being charged. Subscription with a free trial period will automatically renew to a paid subscription. Please note: any unused portion of a free trial period (if offered) will be forfeited when you purchase a premium subscription during the free trial period. Subscription payments will be charged to your iTunes account at confirmation of your purchase and upon commencement of each renewal term. For more information, please see our Terms of Use and Privacy Policy.
      ///
      /// Locales: en, es
      static let subscription_description = Rswift.StringResource(key: "subscription_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: You will not miss Caring for plants even with closed application!
      ///
      /// Locales: en, es
      static let scheldure_setting_cares_notification_sub = Rswift.StringResource(key: "scheldure_setting_cares_notification_sub", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: Your Plan
      ///
      /// Locales: en, es
      static let subscription_your_plan = Rswift.StringResource(key: "subscription_your_plan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: account
      ///
      /// Locales: en, es
      static let menu_account = Rswift.StringResource(key: "menu_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: archive
      ///
      /// Locales: en, es
      static let menu_section_archive_title = Rswift.StringResource(key: "menu_section_archive_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: days
      ///
      /// Locales: en, es
      static let period_type_day = Rswift.StringResource(key: "period_type_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: days
      ///
      /// Locales: en, es
      static let scheldure_days = Rswift.StringResource(key: "scheldure_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: every
      ///
      /// Locales: en, es
      static let add_plant_every = Rswift.StringResource(key: "add_plant_every", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: every
      ///
      /// Locales: en, es
      static let garden_plant_cares_edit_every = Rswift.StringResource(key: "garden_plant_cares_edit_every", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: free snaps
      ///
      /// Locales: en, es
      static let identify_free_snaps = Rswift.StringResource(key: "identify_free_snaps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: free snaps left
      ///
      /// Locales: en, es
      static let identify_result_snaps_left = Rswift.StringResource(key: "identify_result_snaps_left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: go premium
      ///
      /// Locales: en, es
      static let identify_premium = Rswift.StringResource(key: "identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: month
      ///
      /// Locales: en, es
      static let subscription_month = Rswift.StringResource(key: "subscription_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: months
      ///
      /// Locales: en, es
      static let period_type_month = Rswift.StringResource(key: "period_type_month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: settings
      ///
      /// Locales: en, es
      static let menu_section_settings_title = Rswift.StringResource(key: "menu_section_settings_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)
      /// en translation: weeks
      ///
      /// Locales: en, es
      static let period_type_week = Rswift.StringResource(key: "period_type_week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es"], comment: nil)

      /// en translation: A
      ///
      /// Locales: en, es
      static func climate_ph_a(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_a", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_a"
        }

        return NSLocalizedString("climate_ph_a", bundle: bundle, comment: "")
      }

      /// en translation: AN
      ///
      /// Locales: en, es
      static func climate_ph_an(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_an", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_an"
        }

        return NSLocalizedString("climate_ph_an", bundle: bundle, comment: "")
      }

      /// en translation: ANB
      ///
      /// Locales: en, es
      static func climate_ph_anb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_anb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_anb"
        }

        return NSLocalizedString("climate_ph_anb", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, es
      static func garden_detail_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_detail_about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_detail_about"
        }

        return NSLocalizedString("garden_detail_about", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, es
      static func plant_detail_about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_about", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_about"
        }

        return NSLocalizedString("plant_detail_about", bundle: bundle, comment: "")
      }

      /// en translation: Actions with Plant
      ///
      /// Locales: en, es
      static func action_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_title"
        }

        return NSLocalizedString("action_edit_title", bundle: bundle, comment: "")
      }

      /// en translation: Active
      ///
      /// Locales: en, es
      static func subscription_active(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_active", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_active"
        }

        return NSLocalizedString("subscription_active", bundle: bundle, comment: "")
      }

      /// en translation: Add Care
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_setup_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_setup_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_setup_title"
        }

        return NSLocalizedString("garden_plant_add_cares_setup_title", bundle: bundle, comment: "")
      }

      /// en translation: Add Care
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_title"
        }

        return NSLocalizedString("garden_plant_add_cares_title", bundle: bundle, comment: "")
      }

      /// en translation: Add Care
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_add_care(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_add_care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_add_care"
        }

        return NSLocalizedString("garden_plant_cares_edit_add_care", bundle: bundle, comment: "")
      }

      /// en translation: Add Cares
      ///
      /// Locales: en, es
      static func uniques_add_care(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_add_care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_add_care"
        }

        return NSLocalizedString("uniques_add_care", bundle: bundle, comment: "")
      }

      /// en translation: Add Cover
      ///
      /// Locales: en, es
      static func uniques_cover_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_add"
        }

        return NSLocalizedString("uniques_cover_add", bundle: bundle, comment: "")
      }

      /// en translation: Add Custom Care
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_add_custom_care(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_add_custom_care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_add_custom_care"
        }

        return NSLocalizedString("garden_plant_add_cares_add_custom_care", bundle: bundle, comment: "")
      }

      /// en translation: Add Plant
      ///
      /// Locales: en, es
      static func uniques_cover_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_title"
        }

        return NSLocalizedString("uniques_cover_title", bundle: bundle, comment: "")
      }

      /// en translation: Add Plant Cares
      ///
      /// Locales: en, es
      static func uniques_cares_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cares_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cares_title"
        }

        return NSLocalizedString("uniques_cares_title", bundle: bundle, comment: "")
      }

      /// en translation: Add Unique
      ///
      /// Locales: en, es
      static func plants_uniquePlantButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantButton"
        }

        return NSLocalizedString("plants_uniquePlantButton", bundle: bundle, comment: "")
      }

      /// en translation: Add Unique Plant
      ///
      /// Locales: en, es
      static func uniquel_plan_name_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniquel_plan_name_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniquel_plan_name_title"
        }

        return NSLocalizedString("uniquel_plan_name_title", bundle: bundle, comment: "")
      }

      /// en translation: Add to My Garden
      ///
      /// Locales: en, es
      static func plant_detail_add_to_my_garden(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_add_to_my_garden", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_add_to_my_garden"
        }

        return NSLocalizedString("plant_detail_add_to_my_garden", bundle: bundle, comment: "")
      }

      /// en translation: Added in Schedule
      ///
      /// Locales: en, es
      static func garden_plant_detail_added_in_schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_detail_added_in_schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_detail_added_in_schedule"
        }

        return NSLocalizedString("garden_plant_detail_added_in_schedule", bundle: bundle, comment: "")
      }

      /// en translation: Added in Wishlist
      ///
      /// Locales: en, es
      static func plant_detail_added_to_wishlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_added_to_wishlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_added_to_wishlist"
        }

        return NSLocalizedString("plant_detail_added_to_wishlist", bundle: bundle, comment: "")
      }

      /// en translation: Analyzing image
      ///
      /// Locales: en, es
      static func identify_analize_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_image"
        }

        return NSLocalizedString("identify_analize_image", bundle: bundle, comment: "")
      }

      /// en translation: Annual Climber
      ///
      /// Locales: en, es
      static func climate_habit_annual_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_annual_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_annual_climber"
        }

        return NSLocalizedString("climate_habit_annual_climber", bundle: bundle, comment: "")
      }

      /// en translation: Annual Perennial
      ///
      /// Locales: en, es
      static func climate_habit_annual_perennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_annual_perennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_annual_perennial"
        }

        return NSLocalizedString("climate_habit_annual_perennial", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: en, es
      static func uniques_cover_add_apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_add_apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_add_apply"
        }

        return NSLocalizedString("uniques_cover_add_apply", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want log out?
      ///
      /// Locales: en, es
      static func allert_logout_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_logout_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_logout_message"
        }

        return NSLocalizedString("allert_logout_message", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure want to mark as done?
      ///
      /// Locales: en, es
      static func garden_cares_detail_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_cares_detail_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_cares_detail_info"
        }

        return NSLocalizedString("garden_cares_detail_info", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to do this?
      ///
      /// Locales: en, es
      static func garde_edit_delete_allert_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garde_edit_delete_allert_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garde_edit_delete_allert_sub_title"
        }

        return NSLocalizedString("garde_edit_delete_allert_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: B
      ///
      /// Locales: en, es
      static func climate_ph_b(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_b", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_b"
        }

        return NSLocalizedString("climate_ph_b", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, es
      static func plant_detail_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_back"
        }

        return NSLocalizedString("plant_detail_back", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, es
      static func wish_list_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_back"
        }

        return NSLocalizedString("wish_list_back", bundle: bundle, comment: "")
      }

      /// en translation: Back to top
      ///
      /// Locales: en, es
      static func plants_backToTop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_backToTop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_backToTop"
        }

        return NSLocalizedString("plants_backToTop", bundle: bundle, comment: "")
      }

      /// en translation: Bamboo
      ///
      /// Locales: en, es
      static func climate_habit_bamboo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_bamboo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_bamboo"
        }

        return NSLocalizedString("climate_habit_bamboo", bundle: bundle, comment: "")
      }

      /// en translation: Become a Premium
      ///
      /// Locales: en, es
      static func subscription_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_title"
        }

        return NSLocalizedString("subscription_title", bundle: bundle, comment: "")
      }

      /// en translation: Biennial
      ///
      /// Locales: en, es
      static func climate_habit_biennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_biennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_biennial"
        }

        return NSLocalizedString("climate_habit_biennial", bundle: bundle, comment: "")
      }

      /// en translation: Biennial Perennial
      ///
      /// Locales: en, es
      static func climate_habit_biennial_perennial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_biennial_perennial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_biennial_perennial"
        }

        return NSLocalizedString("climate_habit_biennial_perennial", bundle: bundle, comment: "")
      }

      /// en translation: Bulb
      ///
      /// Locales: en, es
      static func climate_habit_bulb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_bulb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_bulb"
        }

        return NSLocalizedString("climate_habit_bulb", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func action_edit_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_cancel"
        }

        return NSLocalizedString("action_edit_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func choose_identify_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_cancel"
        }

        return NSLocalizedString("choose_identify_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func garden_choose_add_plant_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_choose_add_plant_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_choose_add_plant_cancel"
        }

        return NSLocalizedString("garden_choose_add_plant_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func garden_delete_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_delete_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_delete_cancel"
        }

        return NSLocalizedString("garden_delete_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_cancel"
        }

        return NSLocalizedString("garden_plant_cares_edit_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func scheldure_setting_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_cancel"
        }

        return NSLocalizedString("scheldure_setting_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, es
      static func uniques_cover_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_cancel"
        }

        return NSLocalizedString("uniques_cover_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Cancel anytime
      ///
      /// Locales: en, es
      static func subscription_cancel_any_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_cancel_any_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_cancel_any_time"
        }

        return NSLocalizedString("subscription_cancel_any_time", bundle: bundle, comment: "")
      }

      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en, es
      static func plants_uniquePlantLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantLabel"
        }

        return NSLocalizedString("plants_uniquePlantLabel", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en, es
      static func diagnosis_capture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_capture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_capture"
        }

        return NSLocalizedString("diagnosis_capture", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en, es
      static func identify_capture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_capture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_capture"
        }

        return NSLocalizedString("identify_capture", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en, es
      static func unique_ident_cover_capture_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unique_ident_cover_capture_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unique_ident_cover_capture_title"
        }

        return NSLocalizedString("unique_ident_cover_capture_title", bundle: bundle, comment: "")
      }

      /// en translation: Capture sick part of Plant
      ///
      /// Locales: en, es
      static func diagnosis_capture_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_capture_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_capture_info"
        }

        return NSLocalizedString("diagnosis_capture_info", bundle: bundle, comment: "")
      }

      /// en translation: Care Plan
      ///
      /// Locales: en, es
      static func garden_detail_care_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_detail_care_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_detail_care_plan"
        }

        return NSLocalizedString("garden_detail_care_plan", bundle: bundle, comment: "")
      }

      /// en translation: Cares
      ///
      /// Locales: en, es
      static func garden_cares_detail_cares(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_cares_detail_cares", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_cares_detail_cares"
        }

        return NSLocalizedString("garden_cares_detail_cares", bundle: bundle, comment: "")
      }

      /// en translation: Cares
      ///
      /// Locales: en, es
      static func plant_detail_cares(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_cares", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_cares"
        }

        return NSLocalizedString("plant_detail_cares", bundle: bundle, comment: "")
      }

      /// en translation: Cares
      ///
      /// Locales: en, es
      static func scheldure_setting_cares(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_cares", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_cares"
        }

        return NSLocalizedString("scheldure_setting_cares", bundle: bundle, comment: "")
      }

      /// en translation: Cares Notifications
      ///
      /// Locales: en, es
      static func scheldure_setting_cares_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_cares_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_cares_notification"
        }

        return NSLocalizedString("scheldure_setting_cares_notification", bundle: bundle, comment: "")
      }

      /// en translation: Cares added:
      ///
      /// Locales: en, es
      static func uniques_cares_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cares_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cares_add"
        }

        return NSLocalizedString("uniques_cares_add", bundle: bundle, comment: "")
      }

      /// en translation: Catalog
      ///
      /// Locales: en, es
      static func garden_choose_add_plant_catalog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_choose_add_plant_catalog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_choose_add_plant_catalog"
        }

        return NSLocalizedString("garden_choose_add_plant_catalog", bundle: bundle, comment: "")
      }

      /// en translation: Change
      ///
      /// Locales: en, es
      static func pop_change_name_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pop_change_name_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pop_change_name_button"
        }

        return NSLocalizedString("pop_change_name_button", bundle: bundle, comment: "")
      }

      /// en translation: Change Name
      ///
      /// Locales: en, es
      static func action_edit_change_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_change_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_change_name"
        }

        return NSLocalizedString("action_edit_change_name", bundle: bundle, comment: "")
      }

      /// en translation: Change Name
      ///
      /// Locales: en, es
      static func pop_change_name_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pop_change_name_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pop_change_name_title"
        }

        return NSLocalizedString("pop_change_name_title", bundle: bundle, comment: "")
      }

      /// en translation: Change Photo
      ///
      /// Locales: en, es
      static func action_edit_add_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_add_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_add_photo"
        }

        return NSLocalizedString("action_edit_add_photo", bundle: bundle, comment: "")
      }

      /// en translation: Check all Waiting Cares as done
      ///
      /// Locales: en, es
      static func garden_detail_check_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_detail_check_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_detail_check_all"
        }

        return NSLocalizedString("garden_detail_check_all", bundle: bundle, comment: "")
      }

      /// en translation: Climate Deciduous Unknown
      ///
      /// Locales: en, es
      static func climante_deciduous_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climante_deciduous_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climante_deciduous_unknown"
        }

        return NSLocalizedString("climante_deciduous_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Habit Unknown
      ///
      /// Locales: en, es
      static func climate_habit_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_unknown"
        }

        return NSLocalizedString("climate_habit_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Moisture Unknown
      ///
      /// Locales: en, es
      static func climate_moisture_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_unknown"
        }

        return NSLocalizedString("climate_moisture_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate PH Unknown
      ///
      /// Locales: en, es
      static func climate_ph_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_unknown"
        }

        return NSLocalizedString("climate_ph_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Shade Unknown
      ///
      /// Locales: en, es
      static func climate_shade_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_unknown"
        }

        return NSLocalizedString("climate_shade_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climate Soial Unknown
      ///
      /// Locales: en, es
      static func climate_soil_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_unknown"
        }

        return NSLocalizedString("climate_soil_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Climber
      ///
      /// Locales: en, es
      static func climate_habit_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_climber"
        }

        return NSLocalizedString("climate_habit_climber", bundle: bundle, comment: "")
      }

      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static func action_edit_clone_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_clone_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_clone_plant"
        }

        return NSLocalizedString("action_edit_clone_plant", bundle: bundle, comment: "")
      }

      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static func garden_clone_plant_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_clone_plant_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_clone_plant_button"
        }

        return NSLocalizedString("garden_clone_plant_button", bundle: bundle, comment: "")
      }

      /// en translation: Clone Plant
      ///
      /// Locales: en, es
      static func garden_clone_plant_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_clone_plant_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_clone_plant_title"
        }

        return NSLocalizedString("garden_clone_plant_title", bundle: bundle, comment: "")
      }

      /// en translation: Confirm deleting Plant from your Garden
      ///
      /// Locales: en, es
      static func garden_delete_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_delete_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_delete_sub_title"
        }

        return NSLocalizedString("garden_delete_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Congrats!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_title"
        }

        return NSLocalizedString("plant_add_to_garden_title", bundle: bundle, comment: "")
      }

      /// en translation: Cover
      ///
      /// Locales: en, es
      static func uniques_cares_back_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cares_back_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cares_back_title"
        }

        return NSLocalizedString("uniques_cares_back_title", bundle: bundle, comment: "")
      }

      /// en translation: Create Cover for your new Place
      ///
      /// Locales: en, es
      static func unique_ident_cover_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unique_ident_cover_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unique_ident_cover_sub_title"
        }

        return NSLocalizedString("unique_ident_cover_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Create Plant name
      ///
      /// Locales: en, es
      static func uniquel_plan_create(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniquel_plan_create", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniquel_plan_create"
        }

        return NSLocalizedString("uniquel_plan_create", bundle: bundle, comment: "")
      }

      /// en translation: Create name for your plant
      ///
      /// Locales: en, es
      static func uniquel_plan_name_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniquel_plan_name_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniquel_plan_name_sub_title"
        }

        return NSLocalizedString("uniquel_plan_name_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: D
      ///
      /// Locales: en, es
      static func climate_moisture_d(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_d", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_d"
        }

        return NSLocalizedString("climate_moisture_d", bundle: bundle, comment: "")
      }

      /// en translation: DM
      ///
      /// Locales: en, es
      static func climate_moisture_dm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dm"
        }

        return NSLocalizedString("climate_moisture_dm", bundle: bundle, comment: "")
      }

      /// en translation: DMW
      ///
      /// Locales: en, es
      static func climate_moisture_dmw(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dmw", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dmw"
        }

        return NSLocalizedString("climate_moisture_dmw", bundle: bundle, comment: "")
      }

      /// en translation: DMWE
      ///
      /// Locales: en, es
      static func climate_moisture_dmwe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_dmwe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_dmwe"
        }

        return NSLocalizedString("climate_moisture_dmwe", bundle: bundle, comment: "")
      }

      /// en translation: Days
      ///
      /// Locales: en, es
      static func care_period_type_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_days"
        }

        return NSLocalizedString("care_period_type_days", bundle: bundle, comment: "")
      }

      /// en translation: Deciduous
      ///
      /// Locales: en, es
      static func climate_deciduous_deciduous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous_deciduous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous_deciduous"
        }

        return NSLocalizedString("climate_deciduous_deciduous", bundle: bundle, comment: "")
      }

      /// en translation: Delete %d Cares
      ///
      /// Locales: en, es
      static func garde_edit_delete_allert_button(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("garde_edit_delete_allert_button", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garde_edit_delete_allert_button"
        }

        let format = NSLocalizedString("garde_edit_delete_allert_button", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Delete Care
      ///
      /// Locales: en, es
      static func garde_edit_delete_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garde_edit_delete_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garde_edit_delete_title"
        }

        return NSLocalizedString("garde_edit_delete_title", bundle: bundle, comment: "")
      }

      /// en translation: Delete Cares
      ///
      /// Locales: en, es
      static func garde_edit_delete_delete_cares(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garde_edit_delete_delete_cares", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garde_edit_delete_delete_cares"
        }

        return NSLocalizedString("garde_edit_delete_delete_cares", bundle: bundle, comment: "")
      }

      /// en translation: Delete Plant
      ///
      /// Locales: en, es
      static func action_edit_delete_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_delete_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_delete_plant"
        }

        return NSLocalizedString("action_edit_delete_plant", bundle: bundle, comment: "")
      }

      /// en translation: Delete Plant
      ///
      /// Locales: en, es
      static func garden_delete_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_delete_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_delete_plant"
        }

        return NSLocalizedString("garden_delete_plant", bundle: bundle, comment: "")
      }

      /// en translation: Deleting Plant
      ///
      /// Locales: en, es
      static func garden_delete_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_delete_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_delete_title"
        }

        return NSLocalizedString("garden_delete_title", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose
      ///
      /// Locales: en, es
      static func diagnosis_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_title"
        }

        return NSLocalizedString("diagnosis_title", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose Disease
      ///
      /// Locales: en, es
      static func disease_archive_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disease_archive_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disease_archive_button"
        }

        return NSLocalizedString("disease_archive_button", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose Photo
      ///
      /// Locales: en, es
      static func diagnosis_preview_diagnose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_diagnose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_diagnose"
        }

        return NSLocalizedString("diagnosis_preview_diagnose", bundle: bundle, comment: "")
      }

      /// en translation: Diagnosing in Progress
      ///
      /// Locales: en, es
      static func diagnosis_analyze_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_analyze_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_analyze_info"
        }

        return NSLocalizedString("diagnosis_analyze_info", bundle: bundle, comment: "")
      }

      /// en translation: Diagnosis
      ///
      /// Locales: en, es
      static func choose_identify_diagnosis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_diagnosis", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_diagnosis"
        }

        return NSLocalizedString("choose_identify_diagnosis", bundle: bundle, comment: "")
      }

      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static func disease_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("disease_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "disease_archive_title"
        }

        return NSLocalizedString("disease_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: Disease Archive
      ///
      /// Locales: en, es
      static func menu_item_archive_disease(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_archive_disease", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_archive_disease"
        }

        return NSLocalizedString("menu_item_archive_disease", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en, es
      static func identify_result_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_info"
        }

        return NSLocalizedString("identify_result_info", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func add_plant_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_done"
        }

        return NSLocalizedString("add_plant_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func garden_plan_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plan_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plan_done"
        }

        return NSLocalizedString("garden_plan_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_done"
        }

        return NSLocalizedString("garden_plant_add_cares_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_setup_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_setup_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_setup_done"
        }

        return NSLocalizedString("garden_plant_add_cares_setup_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_done"
        }

        return NSLocalizedString("garden_plant_cares_edit_done", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, es
      static func scheldure_setting_done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_done"
        }

        return NSLocalizedString("scheldure_setting_done", bundle: bundle, comment: "")
      }

      /// en translation: Done all Waiting Cares
      ///
      /// Locales: en, es
      static func scheldure_done_all(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_done_all", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_done_all"
        }

        return NSLocalizedString("scheldure_done_all", bundle: bundle, comment: "")
      }

      /// en translation: Edit Care Plan
      ///
      /// Locales: en, es
      static func action_edit_care_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("action_edit_care_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "action_edit_care_plan"
        }

        return NSLocalizedString("action_edit_care_plan", bundle: bundle, comment: "")
      }

      /// en translation: Edit Care Plan
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_title"
        }

        return NSLocalizedString("garden_plant_cares_edit_title", bundle: bundle, comment: "")
      }

      /// en translation: Edit My Care Plan
      ///
      /// Locales: en, es
      static func garden_detail_care_edit_my_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_detail_care_edit_my_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_detail_care_edit_my_plan"
        }

        return NSLocalizedString("garden_detail_care_edit_my_plan", bundle: bundle, comment: "")
      }

      /// en translation: Evergreen
      ///
      /// Locales: en, es
      static func climate_deciduous_evergreen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous_evergreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous_evergreen"
        }

        return NSLocalizedString("climate_deciduous_evergreen", bundle: bundle, comment: "")
      }

      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en, es
      static func login_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_info"
        }

        return NSLocalizedString("login_info", bundle: bundle, comment: "")
      }

      /// en translation: Explore catalog
      ///
      /// Locales: en, es
      static func plants_explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_explore"
        }

        return NSLocalizedString("plants_explore", bundle: bundle, comment: "")
      }

      /// en translation: FS
      ///
      /// Locales: en, es
      static func climate_shade_fs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_fs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_fs"
        }

        return NSLocalizedString("climate_shade_fs", bundle: bundle, comment: "")
      }

      /// en translation: FSN
      ///
      /// Locales: en, es
      static func climate_shade_fsn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_fsn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_fsn"
        }

        return NSLocalizedString("climate_shade_fsn", bundle: bundle, comment: "")
      }

      /// en translation: Fern
      ///
      /// Locales: en, es
      static func climate_habit_fern(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_fern", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_fern"
        }

        return NSLocalizedString("climate_habit_fern", bundle: bundle, comment: "")
      }

      /// en translation: Frequency
      ///
      /// Locales: en, es
      static func add_plant_frequency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_frequency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_frequency"
        }

        return NSLocalizedString("add_plant_frequency", bundle: bundle, comment: "")
      }

      /// en translation: Frequency of Notifications
      ///
      /// Locales: en, es
      static func scheldure_setting_frequency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_frequency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_frequency"
        }

        return NSLocalizedString("scheldure_setting_frequency", bundle: bundle, comment: "")
      }

      /// en translation: Full-size image of Plant
      ///
      /// Locales: en, es
      static func identify_make_photo_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_info"
        }

        return NSLocalizedString("identify_make_photo_info", bundle: bundle, comment: "")
      }

      /// en translation: Get access to unlimited Identify and Diagnosis Plants
      ///
      /// Locales: en, es
      static func subscription_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_sub_title"
        }

        return NSLocalizedString("subscription_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Give name for clone of this plant
      ///
      /// Locales: en, es
      static func garden_clone_plant_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_clone_plant_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_clone_plant_subtitle"
        }

        return NSLocalizedString("garden_clone_plant_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Give your plant name
      ///
      /// Locales: en, es
      static func pop_change_name_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pop_change_name_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pop_change_name_subtitle"
        }

        return NSLocalizedString("pop_change_name_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Great!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_great(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_great", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_great"
        }

        return NSLocalizedString("plant_add_to_garden_great", bundle: bundle, comment: "")
      }

      /// en translation: Habit
      ///
      /// Locales: en, es
      static func climate_habit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit"
        }

        return NSLocalizedString("climate_habit", bundle: bundle, comment: "")
      }

      /// en translation: Hardiness
      ///
      /// Locales: en, es
      static func climate_hardiness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_hardiness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_hardiness"
        }

        return NSLocalizedString("climate_hardiness", bundle: bundle, comment: "")
      }

      /// en translation: Height
      ///
      /// Locales: en, es
      static func climate_height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_height"
        }

        return NSLocalizedString("climate_height", bundle: bundle, comment: "")
      }

      /// en translation: Hour
      ///
      /// Locales: en, es
      static func scheldure_setting_hour(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_hour", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_hour"
        }

        return NSLocalizedString("scheldure_setting_hour", bundle: bundle, comment: "")
      }

      /// en translation: Humidity
      ///
      /// Locales: en, es
      static func care_type_humidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_humidity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_humidity"
        }

        return NSLocalizedString("care_type_humidity", bundle: bundle, comment: "")
      }

      /// en translation: Identify
      ///
      /// Locales: en, es
      static func choose_identify_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_identify"
        }

        return NSLocalizedString("choose_identify_identify", bundle: bundle, comment: "")
      }

      /// en translation: Identify
      ///
      /// Locales: en, es
      static func garden_choose_add_plant_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_choose_add_plant_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_choose_add_plant_identify"
        }

        return NSLocalizedString("garden_choose_add_plant_identify", bundle: bundle, comment: "")
      }

      /// en translation: Identify Photo
      ///
      /// Locales: en
      static func identify_result_identify_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_identify_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_identify_photo"
        }

        return NSLocalizedString("identify_result_identify_photo", bundle: bundle, comment: "")
      }

      /// en translation: Identify Results:
      ///
      /// Locales: en, es
      static func identify_results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_results"
        }

        return NSLocalizedString("identify_results", bundle: bundle, comment: "")
      }

      /// en translation: Identify my Plants
      ///
      /// Locales: en, es
      static func plants_identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_identifier"
        }

        return NSLocalizedString("plants_identifier", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en, es
      static func identify_result_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_title"
        }

        return NSLocalizedString("identify_result_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en, es
      static func identify_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_title"
        }

        return NSLocalizedString("identify_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en, es
      static func identify_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_info"
        }

        return NSLocalizedString("identify_info", bundle: bundle, comment: "")
      }

      /// en translation: Identifying plant
      ///
      /// Locales: en, es
      static func identify_analize_identify_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_identify_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_identify_plant"
        }

        return NSLocalizedString("identify_analize_identify_plant", bundle: bundle, comment: "")
      }

      /// en translation: Invite friends (share app)
      ///
      /// Locales: en, es
      static func menu_item_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_share"
        }

        return NSLocalizedString("menu_item_share", bundle: bundle, comment: "")
      }

      /// en translation: L
      ///
      /// Locales: en, es
      static func climate_soil_l(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_l", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_l"
        }

        return NSLocalizedString("climate_soil_l", bundle: bundle, comment: "")
      }

      /// en translation: LM
      ///
      /// Locales: en, es
      static func climate_soil_lm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_lm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_lm"
        }

        return NSLocalizedString("climate_soil_lm", bundle: bundle, comment: "")
      }

      /// en translation: LMH
      ///
      /// Locales: en, es
      static func climate_soil_lmh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_lmh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_lmh"
        }

        return NSLocalizedString("climate_soil_lmh", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, es
      static func menu_item_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_language"
        }

        return NSLocalizedString("menu_item_language", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, es
      static func menu_laguage_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_laguage_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_laguage_title"
        }

        return NSLocalizedString("menu_laguage_title", bundle: bundle, comment: "")
      }

      /// en translation: Log out
      ///
      /// Locales: en, es
      static func menu_log_out(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_log_out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_log_out"
        }

        return NSLocalizedString("menu_log_out", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, es
      static func climate_moisture_m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_m"
        }

        return NSLocalizedString("climate_moisture_m", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: en, es
      static func climate_soil_m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_m"
        }

        return NSLocalizedString("climate_soil_m", bundle: bundle, comment: "")
      }

      /// en translation: MH
      ///
      /// Locales: en, es
      static func climate_soil_mh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil_mh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil_mh"
        }

        return NSLocalizedString("climate_soil_mh", bundle: bundle, comment: "")
      }

      /// en translation: MWE
      ///
      /// Locales: en, es
      static func climate_moisture_mwe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_mwe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_mwe"
        }

        return NSLocalizedString("climate_moisture_mwe", bundle: bundle, comment: "")
      }

      /// en translation: MWEWA
      ///
      /// Locales: en, es
      static func climate_moisture_mwewa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_mwewa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_mwewa"
        }

        return NSLocalizedString("climate_moisture_mwewa", bundle: bundle, comment: "")
      }

      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en, es
      static func identify_make_photo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_title"
        }

        return NSLocalizedString("identify_make_photo_title", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static func diagnosis_onboarding_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_onboarding_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_onboarding_info"
        }

        return NSLocalizedString("diagnosis_onboarding_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that Photo is sharp and contains the diseased part
      ///
      /// Locales: en, es
      static func diagnosis_preview_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_info"
        }

        return NSLocalizedString("diagnosis_preview_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en, es
      static func identify_overview_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_info"
        }

        return NSLocalizedString("identify_overview_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en, es
      static func identify_photo_quality_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_info"
        }

        return NSLocalizedString("identify_photo_quality_info", bundle: bundle, comment: "")
      }

      /// en translation: Menu
      ///
      /// Locales: en, es
      static func menu_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_title"
        }

        return NSLocalizedString("menu_title", bundle: bundle, comment: "")
      }

      /// en translation: Missed
      ///
      /// Locales: en, es
      static func garden_plan_missed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plan_missed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plan_missed"
        }

        return NSLocalizedString("garden_plan_missed", bundle: bundle, comment: "")
      }

      /// en translation: Missed
      ///
      /// Locales: en, es
      static func scheldure_setting_missed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_missed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_missed"
        }

        return NSLocalizedString("scheldure_setting_missed", bundle: bundle, comment: "")
      }

      /// en translation: Misting
      ///
      /// Locales: en, es
      static func care_type_misting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_misting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_misting"
        }

        return NSLocalizedString("care_type_misting", bundle: bundle, comment: "")
      }

      /// en translation: Moisture
      ///
      /// Locales: en, es
      static func climate_moisture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture"
        }

        return NSLocalizedString("climate_moisture", bundle: bundle, comment: "")
      }

      /// en translation: More on Wiki
      ///
      /// Locales: en, es
      static func plant_detail_more_on_wiki(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_more_on_wiki", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_more_on_wiki"
        }

        return NSLocalizedString("plant_detail_more_on_wiki", bundle: bundle, comment: "")
      }

      /// en translation: Mounths
      ///
      /// Locales: en, es
      static func care_period_type_mounths(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_mounths", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_mounths"
        }

        return NSLocalizedString("care_period_type_mounths", bundle: bundle, comment: "")
      }

      /// en translation: N
      ///
      /// Locales: en, es
      static func climate_ph_n(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_n"
        }

        return NSLocalizedString("climate_ph_n", bundle: bundle, comment: "")
      }

      /// en translation: N
      ///
      /// Locales: en, es
      static func climate_shade_n(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_n"
        }

        return NSLocalizedString("climate_shade_n", bundle: bundle, comment: "")
      }

      /// en translation: NB
      ///
      /// Locales: en, es
      static func climate_ph_nb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph_nb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph_nb"
        }

        return NSLocalizedString("climate_ph_nb", bundle: bundle, comment: "")
      }

      /// en translation: NO
      ///
      /// Locales: en, es
      static func allert_no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_no"
        }

        return NSLocalizedString("allert_no", bundle: bundle, comment: "")
      }

      /// en translation: Next 7 days
      ///
      /// Locales: en, es
      static func scheldure_next_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_next_days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_next_days"
        }

        return NSLocalizedString("scheldure_next_days", bundle: bundle, comment: "")
      }

      /// en translation: Next Date
      ///
      /// Locales: en, es
      static func add_plant_next_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_next_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_next_date"
        }

        return NSLocalizedString("add_plant_next_date", bundle: bundle, comment: "")
      }

      /// en translation: No problems detected
      ///
      /// Locales: en, es
      static func diagnosis_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_no_data"
        }

        return NSLocalizedString("diagnosis_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Overview
      ///
      /// Locales: en, es
      static func identify_overview_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_title"
        }

        return NSLocalizedString("identify_overview_title", bundle: bundle, comment: "")
      }

      /// en translation: PH
      ///
      /// Locales: en, es
      static func climate_ph(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_ph", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_ph"
        }

        return NSLocalizedString("climate_ph", bundle: bundle, comment: "")
      }

      /// en translation: Perennial
      ///
      /// Locales: en, es
      static func climate_habit_perenial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_perenial", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_perenial"
        }

        return NSLocalizedString("climate_habit_perenial", bundle: bundle, comment: "")
      }

      /// en translation: Perennial Climber
      ///
      /// Locales: en, es
      static func climate_habit_perenial_climber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_perenial_climber", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_perenial_climber"
        }

        return NSLocalizedString("climate_habit_perenial_climber", bundle: bundle, comment: "")
      }

      /// en translation: Photo quality
      ///
      /// Locales: en, es
      static func identify_photo_quality_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_title"
        }

        return NSLocalizedString("identify_photo_quality_title", bundle: bundle, comment: "")
      }

      /// en translation: Plant Cover is captured
      ///
      /// Locales: en, es
      static func uniques_cover_add_captured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_add_captured", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_add_captured"
        }

        return NSLocalizedString("uniques_cover_add_captured", bundle: bundle, comment: "")
      }

      /// en translation: Plant has been Deleted
      ///
      /// Locales: en, es
      static func garden_delete_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_delete_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_delete_success"
        }

        return NSLocalizedString("garden_delete_success", bundle: bundle, comment: "")
      }

      /// en translation: Plant is added in your Garden!
      ///
      /// Locales: en, es
      static func plant_add_to_garden_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_add_to_garden_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_add_to_garden_info"
        }

        return NSLocalizedString("plant_add_to_garden_info", bundle: bundle, comment: "")
      }

      /// en translation: Plant is added to your Garden!
      ///
      /// Locales: en, es
      static func add_plants_success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plants_success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plants_success"
        }

        return NSLocalizedString("add_plants_success", bundle: bundle, comment: "")
      }

      /// en translation: Plant name
      ///
      /// Locales: en, es
      static func uniques_cover_back_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_back_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_back_title"
        }

        return NSLocalizedString("uniques_cover_back_title", bundle: bundle, comment: "")
      }

      /// en translation: Plants
      ///
      /// Locales: en, es
      static func scheldure_plants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_plants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_plants"
        }

        return NSLocalizedString("scheldure_plants", bundle: bundle, comment: "")
      }

      /// en translation: Please Select Care you want to add to Plant Care Plan
      ///
      /// Locales: en, es
      static func uniques_cares_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cares_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cares_sub_title"
        }

        return NSLocalizedString("uniques_cares_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Please Setup your Care for new Plant
      ///
      /// Locales: en, es
      static func add_plant_time_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_time_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_time_subtitle"
        }

        return NSLocalizedString("add_plant_time_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Please wait
      ///
      /// Locales: en, es
      static func activity_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity_title"
        }

        return NSLocalizedString("activity_title", bundle: bundle, comment: "")
      }

      /// en translation: Premium
      ///
      /// Locales: en, es
      static func choose_identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_premium"
        }

        return NSLocalizedString("choose_identify_premium", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static func menu_item_privacy_policy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_privacy_policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_privacy_policy"
        }

        return NSLocalizedString("menu_item_privacy_policy", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: en, es
      static func subscription_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_privacy"
        }

        return NSLocalizedString("subscription_privacy", bundle: bundle, comment: "")
      }

      /// en translation: Rate app
      ///
      /// Locales: en, es
      static func menu_item_rate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_rate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_rate"
        }

        return NSLocalizedString("menu_item_rate", bundle: bundle, comment: "")
      }

      /// en translation: Recognize Plant
      ///
      /// Locales: en, es
      static func recognize_archive_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recognize_archive_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recognize_archive_button"
        }

        return NSLocalizedString("recognize_archive_button", bundle: bundle, comment: "")
      }

      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static func menu_item_archive_recognized(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_archive_recognized", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_archive_recognized"
        }

        return NSLocalizedString("menu_item_archive_recognized", bundle: bundle, comment: "")
      }

      /// en translation: Recognized Archive
      ///
      /// Locales: en, es
      static func recognize_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recognize_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recognize_archive_title"
        }

        return NSLocalizedString("recognize_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: Recurring monthly billing
      ///
      /// Locales: en, es
      static func subscription_recurring(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_recurring", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_recurring"
        }

        return NSLocalizedString("subscription_recurring", bundle: bundle, comment: "")
      }

      /// en translation: Recurring yearly billing
      ///
      /// Locales: en
      static func subscription_recurring_yearly(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_recurring_yearly", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_recurring_yearly"
        }

        return NSLocalizedString("subscription_recurring_yearly", bundle: bundle, comment: "")
      }

      /// en translation: Removed from Schedule
      ///
      /// Locales: en, es
      static func garden_plant_detail_removed_from_schedule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_detail_removed_from_schedule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_detail_removed_from_schedule"
        }

        return NSLocalizedString("garden_plant_detail_removed_from_schedule", bundle: bundle, comment: "")
      }

      /// en translation: Removed from Wishlist
      ///
      /// Locales: en, es
      static func plant_detail_removed_from_wishlist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plant_detail_removed_from_wishlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plant_detail_removed_from_wishlist"
        }

        return NSLocalizedString("plant_detail_removed_from_wishlist", bundle: bundle, comment: "")
      }

      /// en translation: Restart Diagnosing
      ///
      /// Locales: en, es
      static func diagnosis_restart_diagnosing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_restart_diagnosing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_restart_diagnosing"
        }

        return NSLocalizedString("diagnosis_restart_diagnosing", bundle: bundle, comment: "")
      }

      /// en translation: Restore Purchases
      ///
      /// Locales: en, es
      static func subscription_restore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_restore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_restore"
        }

        return NSLocalizedString("subscription_restore", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static func diagnosis_preview_retake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_preview_retake", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_preview_retake"
        }

        return NSLocalizedString("diagnosis_preview_retake", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static func identify_result_retake_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_retake_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_retake_photo"
        }

        return NSLocalizedString("identify_result_retake_photo", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en, es
      static func uniques_cover_add_retake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_cover_add_retake", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_cover_add_retake"
        }

        return NSLocalizedString("uniques_cover_add_retake", bundle: bundle, comment: "")
      }

      /// en translation: Rotating
      ///
      /// Locales: en, es
      static func care_type_rotating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_rotating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_rotating"
        }

        return NSLocalizedString("care_type_rotating", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: en, es
      static func climate_shade_s(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_s", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_s"
        }

        return NSLocalizedString("climate_shade_s", bundle: bundle, comment: "")
      }

      /// en translation: SELECT LANGUAGE
      ///
      /// Locales: en, es
      static func menu_language_header(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_language_header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_language_header"
        }

        return NSLocalizedString("menu_language_header", bundle: bundle, comment: "")
      }

      /// en translation: SN
      ///
      /// Locales: en, es
      static func climate_shade_sn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade_sn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade_sn"
        }

        return NSLocalizedString("climate_shade_sn", bundle: bundle, comment: "")
      }

      /// en translation: Save 33% Off
      ///
      /// Locales: en, es
      static func subscription_save_33(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_save_33", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_save_33"
        }

        return NSLocalizedString("subscription_save_33", bundle: bundle, comment: "")
      }

      /// en translation: Schedule
      ///
      /// Locales: en, es
      static func scheldure_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_title"
        }

        return NSLocalizedString("scheldure_title", bundle: bundle, comment: "")
      }

      /// en translation: Search by Name
      ///
      /// Locales: en, es
      static func plants_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_search"
        }

        return NSLocalizedString("plants_search", bundle: bundle, comment: "")
      }

      /// en translation: Second chance Alert
      ///
      /// Locales: en, es
      static func scheldure_setting_alert(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_alert", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_alert"
        }

        return NSLocalizedString("scheldure_setting_alert", bundle: bundle, comment: "")
      }

      /// en translation: Select Cares that you want to delete
      ///
      /// Locales: en, es
      static func garde_edit_delete_sub_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garde_edit_delete_sub_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garde_edit_delete_sub_title"
        }

        return NSLocalizedString("garde_edit_delete_sub_title", bundle: bundle, comment: "")
      }

      /// en translation: Select From Cares
      ///
      /// Locales: en, es
      static func garden_plant_add_cares_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_add_cares_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_add_cares_info"
        }

        return NSLocalizedString("garden_plant_add_cares_info", bundle: bundle, comment: "")
      }

      /// en translation: Send Time:
      ///
      /// Locales: en, es
      static func scheldure_setting_send_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_send_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_send_time"
        }

        return NSLocalizedString("scheldure_setting_send_time", bundle: bundle, comment: "")
      }

      /// en translation: Send a daily list of cares and plants
      ///
      /// Locales: en, es
      static func scheldure_setting_send_daily_list(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_send_daily_list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_send_daily_list"
        }

        return NSLocalizedString("scheldure_setting_send_daily_list", bundle: bundle, comment: "")
      }

      /// en translation: Send additional notification if you miss your first one
      ///
      /// Locales: en, es
      static func scheldure_setting_after_sub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_after_sub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_after_sub"
        }

        return NSLocalizedString("scheldure_setting_after_sub", bundle: bundle, comment: "")
      }

      /// en translation: Send after:
      ///
      /// Locales: en, es
      static func scheldure_setting_after(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_after", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_after"
        }

        return NSLocalizedString("scheldure_setting_after", bundle: bundle, comment: "")
      }

      /// en translation: Send notifications no more often than the specified time period
      ///
      /// Locales: en, es
      static func scheldure_setting_frequency_sub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_frequency_sub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_frequency_sub"
        }

        return NSLocalizedString("scheldure_setting_frequency_sub", bundle: bundle, comment: "")
      }

      /// en translation: Set to Recommended Cares
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_set_to_recommended(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_set_to_recommended", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_set_to_recommended"
        }

        return NSLocalizedString("garden_plant_cares_edit_set_to_recommended", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, es
      static func scheldure_setting_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_title"
        }

        return NSLocalizedString("scheldure_setting_title", bundle: bundle, comment: "")
      }

      /// en translation: Shade
      ///
      /// Locales: en, es
      static func climate_shade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_shade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_shade"
        }

        return NSLocalizedString("climate_shade", bundle: bundle, comment: "")
      }

      /// en translation: Shrub
      ///
      /// Locales: en, es
      static func climate_habit_shrub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_shrub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_shrub"
        }

        return NSLocalizedString("climate_habit_shrub", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Apple
      ///
      /// Locales: en, es
      static func login_apple(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_apple", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_apple"
        }

        return NSLocalizedString("login_apple", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Facebook
      ///
      /// Locales: en, es
      static func login_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_facebook"
        }

        return NSLocalizedString("login_facebook", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Google
      ///
      /// Locales: en, es
      static func login_google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_google"
        }

        return NSLocalizedString("login_google", bundle: bundle, comment: "")
      }

      /// en translation: Sign in with Instagram
      ///
      /// Locales: en, es
      static func login_instagram(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_instagram", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_instagram"
        }

        return NSLocalizedString("login_instagram", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, es
      static func uniques_skip_care(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uniques_skip_care", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uniques_skip_care"
        }

        return NSLocalizedString("uniques_skip_care", bundle: bundle, comment: "")
      }

      /// en translation: Soil
      ///
      /// Locales: en, es
      static func climate_soil(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_soil", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_soil"
        }

        return NSLocalizedString("climate_soil", bundle: bundle, comment: "")
      }

      /// en translation: Sorry,  no results found
      ///
      /// Locales: en, es
      static func identify_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_no_data"
        }

        return NSLocalizedString("identify_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Start Diagnosing
      ///
      /// Locales: en, es
      static func diagnosis_start_diagnose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_start_diagnose", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_start_diagnose"
        }

        return NSLocalizedString("diagnosis_start_diagnose", bundle: bundle, comment: "")
      }

      /// en translation: Start Identify
      ///
      /// Locales: en, es
      static func identify_start_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_start_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_start_identify"
        }

        return NSLocalizedString("identify_start_identify", bundle: bundle, comment: "")
      }

      /// en translation: Subscribe
      ///
      /// Locales: en, es
      static func subscription_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_subscribe"
        }

        return NSLocalizedString("subscription_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: Subscriptions
      ///
      /// Locales: en, es
      static func menu_item_subscriptions(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_subscriptions", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_subscriptions"
        }

        return NSLocalizedString("menu_item_subscriptions", bundle: bundle, comment: "")
      }

      /// en translation: Terms
      ///
      /// Locales: en, es
      static func menu_item_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_item_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_item_terms"
        }

        return NSLocalizedString("menu_item_terms", bundle: bundle, comment: "")
      }

      /// en translation: Terms of use
      ///
      /// Locales: en, es
      static func subscription_terms(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_terms", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_terms"
        }

        return NSLocalizedString("subscription_terms", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for subscribing, you have full version of app
      ///
      /// Locales: en, es
      static func subscription_thanks_subscription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_thanks_subscription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_thanks_subscription"
        }

        return NSLocalizedString("subscription_thanks_subscription", bundle: bundle, comment: "")
      }

      /// en translation: Time
      ///
      /// Locales: en, es
      static func add_plant_time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_time"
        }

        return NSLocalizedString("add_plant_time", bundle: bundle, comment: "")
      }

      /// en translation: To have daily schedule and notifications - turn ON Ring icon in Plant card
      ///
      /// Locales: en, es
      static func scheldure_empty_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_empty_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_empty_title"
        }

        return NSLocalizedString("scheldure_empty_title", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, es
      static func scheldure_today(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_today"
        }

        return NSLocalizedString("scheldure_today", bundle: bundle, comment: "")
      }

      /// en translation: Today List Notification
      ///
      /// Locales: en, es
      static func scheldure_setting_list_notification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_list_notification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_list_notification"
        }

        return NSLocalizedString("scheldure_setting_list_notification", bundle: bundle, comment: "")
      }

      /// en translation: Tree
      ///
      /// Locales: en, es
      static func climate_habit_tree(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_habit_tree", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_habit_tree"
        }

        return NSLocalizedString("climate_habit_tree", bundle: bundle, comment: "")
      }

      /// en translation: Turn on/off Cares   to add/remove from Care Plan
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_info"
        }

        return NSLocalizedString("garden_plant_cares_edit_info", bundle: bundle, comment: "")
      }

      /// en translation: Type
      ///
      /// Locales: en, es
      static func climate_deciduous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_deciduous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_deciduous"
        }

        return NSLocalizedString("climate_deciduous", bundle: bundle, comment: "")
      }

      /// en translation: Unknown
      ///
      /// Locales: en, es
      static func care_period_type_unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_unknown"
        }

        return NSLocalizedString("care_period_type_unknown", bundle: bundle, comment: "")
      }

      /// en translation: Unsubscribe
      ///
      /// Locales: en, es
      static func subscription_unsubscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_unsubscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_unsubscribe"
        }

        return NSLocalizedString("subscription_unsubscribe", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming
      ///
      /// Locales: en, es
      static func garden_plan_upcoming(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plan_upcoming", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plan_upcoming"
        }

        return NSLocalizedString("garden_plan_upcoming", bundle: bundle, comment: "")
      }

      /// en translation: WA
      ///
      /// Locales: en, es
      static func climate_moisture_wa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wa"
        }

        return NSLocalizedString("climate_moisture_wa", bundle: bundle, comment: "")
      }

      /// en translation: WEM
      ///
      /// Locales: en, es
      static func climate_moisture_wem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wem"
        }

        return NSLocalizedString("climate_moisture_wem", bundle: bundle, comment: "")
      }

      /// en translation: WEWA
      ///
      /// Locales: en, es
      static func climate_moisture_wewa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("climate_moisture_wewa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "climate_moisture_wewa"
        }

        return NSLocalizedString("climate_moisture_wewa", bundle: bundle, comment: "")
      }

      /// en translation: Waiting
      ///
      /// Locales: en, es
      static func garden_plan_waiting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plan_waiting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plan_waiting"
        }

        return NSLocalizedString("garden_plan_waiting", bundle: bundle, comment: "")
      }

      /// en translation: Waiting
      ///
      /// Locales: en, es
      static func scheldure_setting_waiting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_waiting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_waiting"
        }

        return NSLocalizedString("scheldure_setting_waiting", bundle: bundle, comment: "")
      }

      /// en translation: Watering
      ///
      /// Locales: en, es
      static func care_type_watering(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_type_watering", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_type_watering"
        }

        return NSLocalizedString("care_type_watering", bundle: bundle, comment: "")
      }

      /// en translation: Weeks
      ///
      /// Locales: en, es
      static func care_period_type_weeks(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("care_period_type_weeks", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "care_period_type_weeks"
        }

        return NSLocalizedString("care_period_type_weeks", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist
      ///
      /// Locales: en, es
      static func wish_list_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_title"
        }

        return NSLocalizedString("wish_list_title", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist is empty
      ///
      /// Locales: en, es
      static func wish_list_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_no_data"
        }

        return NSLocalizedString("wish_list_no_data", bundle: bundle, comment: "")
      }

      /// en translation: YES
      ///
      /// Locales: en, es
      static func allert_yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allert_yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allert_yes"
        }

        return NSLocalizedString("allert_yes", bundle: bundle, comment: "")
      }

      /// en translation: You can cancel your subscription of free trial anytime by cancelling your subscription through your iTunes account settings, or it will automatically renew. This must be done in 24 hours before the end of the free trial or any subscription period to avoid being charged. Subscription with a free trial period will automatically renew to a paid subscription. Please note: any unused portion of a free trial period (if offered) will be forfeited when you purchase a premium subscription during the free trial period. Subscription payments will be charged to your iTunes account at confirmation of your purchase and upon commencement of each renewal term. For more information, please see our Terms of Use and Privacy Policy.
      ///
      /// Locales: en, es
      static func subscription_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_description"
        }

        return NSLocalizedString("subscription_description", bundle: bundle, comment: "")
      }

      /// en translation: You will not miss Caring for plants even with closed application!
      ///
      /// Locales: en, es
      static func scheldure_setting_cares_notification_sub(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_setting_cares_notification_sub", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_setting_cares_notification_sub"
        }

        return NSLocalizedString("scheldure_setting_cares_notification_sub", bundle: bundle, comment: "")
      }

      /// en translation: Your Plan
      ///
      /// Locales: en, es
      static func subscription_your_plan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_your_plan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_your_plan"
        }

        return NSLocalizedString("subscription_your_plan", bundle: bundle, comment: "")
      }

      /// en translation: account
      ///
      /// Locales: en, es
      static func menu_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_account"
        }

        return NSLocalizedString("menu_account", bundle: bundle, comment: "")
      }

      /// en translation: archive
      ///
      /// Locales: en, es
      static func menu_section_archive_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_section_archive_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_section_archive_title"
        }

        return NSLocalizedString("menu_section_archive_title", bundle: bundle, comment: "")
      }

      /// en translation: days
      ///
      /// Locales: en, es
      static func period_type_day(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("period_type_day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "period_type_day"
        }

        return NSLocalizedString("period_type_day", bundle: bundle, comment: "")
      }

      /// en translation: days
      ///
      /// Locales: en, es
      static func scheldure_days(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scheldure_days", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scheldure_days"
        }

        return NSLocalizedString("scheldure_days", bundle: bundle, comment: "")
      }

      /// en translation: every
      ///
      /// Locales: en, es
      static func add_plant_every(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add_plant_every", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add_plant_every"
        }

        return NSLocalizedString("add_plant_every", bundle: bundle, comment: "")
      }

      /// en translation: every
      ///
      /// Locales: en, es
      static func garden_plant_cares_edit_every(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("garden_plant_cares_edit_every", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "garden_plant_cares_edit_every"
        }

        return NSLocalizedString("garden_plant_cares_edit_every", bundle: bundle, comment: "")
      }

      /// en translation: free snaps
      ///
      /// Locales: en, es
      static func identify_free_snaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_free_snaps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_free_snaps"
        }

        return NSLocalizedString("identify_free_snaps", bundle: bundle, comment: "")
      }

      /// en translation: free snaps left
      ///
      /// Locales: en, es
      static func identify_result_snaps_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_snaps_left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_snaps_left"
        }

        return NSLocalizedString("identify_result_snaps_left", bundle: bundle, comment: "")
      }

      /// en translation: go premium
      ///
      /// Locales: en, es
      static func identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_premium"
        }

        return NSLocalizedString("identify_premium", bundle: bundle, comment: "")
      }

      /// en translation: month
      ///
      /// Locales: en, es
      static func subscription_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("subscription_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "subscription_month"
        }

        return NSLocalizedString("subscription_month", bundle: bundle, comment: "")
      }

      /// en translation: months
      ///
      /// Locales: en, es
      static func period_type_month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("period_type_month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "period_type_month"
        }

        return NSLocalizedString("period_type_month", bundle: bundle, comment: "")
      }

      /// en translation: settings
      ///
      /// Locales: en, es
      static func menu_section_settings_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_section_settings_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_section_settings_title"
        }

        return NSLocalizedString("menu_section_settings_title", bundle: bundle, comment: "")
      }

      /// en translation: weeks
      ///
      /// Locales: en, es
      static func period_type_week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("period_type_week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "period_type_week"
        }

        return NSLocalizedString("period_type_week", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddCoverAddController.validate()
      try _AddCoverIdentifierController.validate()
      try _AddPlantCareView.validate()
      try _AddPlantTimeCell.validate()
      try _AddPlantTimeController.validate()
      try _AddPlantsCareController.validate()
      try _CareCell.validate()
      try _ChooseIdentifyController.validate()
      try _CongradsView.validate()
      try _DetailAboutView.validate()
      try _DetailCaresView.validate()
      try _DiagnosisController.validate()
      try _DiseaseArchiveViewController.validate()
      try _GardenCareDetailView.validate()
      try _GardenChooseAddPlantController.validate()
      try _GardenDetailController.validate()
      try _GardenDetailDeletePlanController.validate()
      try _GardenDetailEditCareCell.validate()
      try _GardenDetailScheduleCell.validate()
      try _GardenDetailTitleCell.validate()
      try _GardenPlantAddCares.validate()
      try _GardenPlantAddCaresSetup.validate()
      try _GardenPlantCareView.validate()
      try _GardenPlantCaresEdit.validate()
      try _GardenPlantCaresEditDelete.validate()
      try _GardenViewCell.validate()
      try _IdentifyController.validate()
      try _LanguageController.validate()
      try _LoginController.validate()
      try _MenuAccauntInfoTableViewCell.validate()
      try _OnboardingWelcomeController.validate()
      try _PlantCollectionCell.validate()
      try _PlantsDetailController.validate()
      try _PopChangeNameController.validate()
      try _PopClonePlantController.validate()
      try _PopUniquePlantController.validate()
      try _RecognizeArchiveController.validate()
      try _ScheduleCell.validate()
      try _ScheduleColapsView.validate()
      try _ScheduleSettingsController.validate()
      try _SplashController.validate()
      try _SubcribeController.validate()
      try _WishListController.validate()
    }

    struct _AddCareCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddCareCell

      let bundle = R.hostingBundle
      let identifier = "AddCareCell"
      let name = "AddCareCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddCareCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddCareCell
      }

      fileprivate init() {}
    }

    struct _AddCoverAddController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddCoverAddController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_little_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_little_ic' is used in nib 'AddCoverAddController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unique_add_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unique_add_back_ic' is used in nib 'AddCoverAddController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddCoverIdentifierController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddCoverIdentifierController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'AddCoverIdentifierController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'AddCoverIdentifierController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'AddCoverIdentifierController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unique_cover_capture_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unique_cover_capture_ic' is used in nib 'AddCoverIdentifierController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unique_cover_close_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unique_cover_close_ic' is used in nib 'AddCoverIdentifierController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPlantCareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPlantCareView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_habit_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_habit_ic' is used in nib 'AddPlantCareView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPlantTimeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddPlantTimeCell

      let bundle = R.hostingBundle
      let identifier = "AddPlantTimeCell"
      let name = "AddPlantTimeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPlantTimeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPlantTimeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_humidity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_humidity_ic' is used in nib 'AddPlantTimeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPlantTimeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPlantTimeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "unique_add_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unique_add_back_ic' is used in nib 'AddPlantTimeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AddPlantTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AddPlantTitleCell

      let bundle = R.hostingBundle
      let identifier = "AddPlantTitleCell"
      let name = "AddPlantTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddPlantTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddPlantTitleCell
      }

      fileprivate init() {}
    }

    struct _AddPlantsCareController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPlantsCareController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "unique_add_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unique_add_back_ic' is used in nib 'AddPlantsCareController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CareCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CareCell

      let bundle = R.hostingBundle
      let identifier = "CareCell"
      let name = "CareCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CareCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CareCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_care_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_care_watering_ic' is used in nib 'CareCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CareInfoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CareInfoCell

      let bundle = R.hostingBundle
      let identifier = "CareInfoCell"
      let name = "CareInfoCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CareInfoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CareInfoCell
      }

      fileprivate init() {}
    }

    struct _ChooseIdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseIdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_choose_identify_diagnosis", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_diagnosis' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose_identify_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_photo' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CongradsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CongradsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CongradsView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CongradsView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "congrads_view_flower_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'congrads_view_flower_ic' is used in nib 'CongradsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DetailAboutView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailAboutView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_habit_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_habit_ic' is used in nib 'DetailAboutView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DetailCaresView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailCaresView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plants_detail_water_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_water_ic' is used in nib 'DetailCaresView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DiagnosisController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiagnosisController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_checkmark' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_1' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_2' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_3' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_4' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_phonendoscope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_phonendoscope' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DiseaseArchiveCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DiseaseArchiveCell

      let bundle = R.hostingBundle
      let identifier = "DiseaseArchiveCell"
      let name = "DiseaseArchiveCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DiseaseArchiveCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiseaseArchiveCell
      }

      fileprivate init() {}
    }

    struct _DiseaseArchiveViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiseaseArchiveViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'DiseaseArchiveViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icn_diagnose", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icn_diagnose' is used in nib 'DiseaseArchiveViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GardenButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
      }

      fileprivate init() {}
    }

    struct _GardenCareDetailView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenCareDetailView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_care_missed_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_care_missed_ic' is used in nib 'GardenCareDetailView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "garden_care_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_care_watering_ic' is used in nib 'GardenCareDetailView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenCaresDetail: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GardenCaresDetail"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _GardenChooseAddPlantController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenChooseAddPlantController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_choose_identify_diagnosis", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_diagnosis' is used in nib 'GardenChooseAddPlantController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose_identify_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_photo' is used in nib 'GardenChooseAddPlantController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenDetailAboutCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GardenDetailAboutCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailAboutCell"
      let name = "GardenDetailAboutCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailAboutCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailAboutCell
      }

      fileprivate init() {}
    }

    struct _GardenDetailAllWaitingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GardenDetailAllWaitingCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailAllWaitingCell"
      let name = "GardenDetailAllWaitingCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailAllWaitingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailAllWaitingCell
      }

      fileprivate init() {}
    }

    struct _GardenDetailCaresCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GardenDetailCaresCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailCaresCell"
      let name = "GardenDetailCaresCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailCaresCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailCaresCell
      }

      fileprivate init() {}
    }

    struct _GardenDetailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenDetailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_added_in_schedule_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_added_in_schedule_ic' is used in nib 'GardenDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_big_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_ic' is used in nib 'GardenDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_back_ic' is used in nib 'GardenDetailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenDetailDeletePlanController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenDetailDeletePlanController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_delete_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_delete_ic' is used in nib 'GardenDetailDeletePlanController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_big_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_ic' is used in nib 'GardenDetailDeletePlanController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenDetailEditCareCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GardenDetailEditCareCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailEditCareCell"
      let name = "GardenDetailEditCareCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailEditCareCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailEditCareCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garde_edit_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garde_edit_ic' is used in nib 'GardenDetailEditCareCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenDetailScheduleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GardenDetailScheduleCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailScheduleCell"
      let name = "GardenDetailScheduleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailScheduleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailScheduleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_schelure_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_schelure_ic' is used in nib 'GardenDetailScheduleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_watering_ic' is used in nib 'GardenDetailScheduleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenDetailSegmentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GardenDetailSegmentCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailSegmentCell"
      let name = "GardenDetailSegmentCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailSegmentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailSegmentCell
      }

      fileprivate init() {}
    }

    struct _GardenDetailTitleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GardenDetailTitleCell

      let bundle = R.hostingBundle
      let identifier = "GardenDetailTitleCell"
      let name = "GardenDetailTitleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenDetailTitleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenDetailTitleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_bell_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_bell_ic' is used in nib 'GardenDetailTitleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_green_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_green_ic' is used in nib 'GardenDetailTitleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenPlantAddCares: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenPlantAddCares"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'GardenPlantAddCares', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenPlantAddCaresSetup: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenPlantAddCaresSetup"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'GardenPlantAddCaresSetup', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenPlantCareView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenPlantCareView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_care_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_care_watering_ic' is used in nib 'GardenPlantCareView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenPlantCaresEdit: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenPlantCaresEdit"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'GardenPlantCaresEdit', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenPlantCaresEditDelete: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenPlantCaresEditDelete"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_care_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_care_watering_ic' is used in nib 'GardenPlantCaresEditDelete', but couldn't be loaded.") }
        if UIKit.UIImage(named: "garden_delete_unselect_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_delete_unselect_ic' is used in nib 'GardenPlantCaresEditDelete', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_humidity_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_humidity_ic' is used in nib 'GardenPlantCaresEditDelete', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_little_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_little_ic' is used in nib 'GardenViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_checkmark' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_no_data' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_1' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_2' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_3' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_black' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_recognize_arhive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_recognize_arhive' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LanguageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LanguageCell

      let bundle = R.hostingBundle
      let identifier = "LanguageCell"
      let name = "LanguageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LanguageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LanguageCell
      }

      fileprivate init() {}
    }

    struct _LanguageController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LanguageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'LanguageController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LillActivityIndicator: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LillActivityIndicator"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_apple' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_close' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_facebook' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_google' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_instagram' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MainOnboardingController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainOnboardingController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MenuAccauntInfoTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MenuAccauntInfoTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuAccauntInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuAccauntInfoTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "avatar_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'avatar_ic' is used in nib 'MenuAccauntInfoTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuItemTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuItemTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuItemTableViewCell
      }

      fileprivate init() {}
    }

    struct _OnboardingFirsController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingFirsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingFourController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingFourController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingPageController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingPageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingSecondController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingSecondController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingThreeController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingThreeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingWelcomeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingWelcomeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "welcome_plant_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome_plant_ic' is used in nib 'OnboardingWelcomeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcome_plant_title_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcome_plant_title_ic' is used in nib 'OnboardingWelcomeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PickerCaresController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PickerCaresController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PlantCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_plants_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_add' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_little_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_little_ic' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantsDetailController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantsDetailController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_big_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_big_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_back_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_green_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_green_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_no_favorite_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_no_favorite_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_removed_favorites_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_removed_favorites_ic' is used in nib 'PlantsDetailController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PopChangeNameController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopChangeNameController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sub_close_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_close_ic' is used in nib 'PopChangeNameController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PopClonePlantController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopClonePlantController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sub_close_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_close_ic' is used in nib 'PopClonePlantController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PopUniquePlantController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PopUniquePlantController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sub_close_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_close_ic' is used in nib 'PopUniquePlantController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RecognizeArchiveController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RecognizeArchiveController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in nib 'RecognizeArchiveController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "recognize_archive_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recognize_archive_ic' is used in nib 'RecognizeArchiveController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ScheduleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ScheduleCell

      let bundle = R.hostingBundle
      let identifier = "ScheduleCell"
      let name = "ScheduleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_schelure_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_schelure_ic' is used in nib 'ScheduleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plants_detail_watering_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plants_detail_watering_ic' is used in nib 'ScheduleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ScheduleColapsBottomView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ScheduleColapsBottomView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ScheduleColapsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScheduleColapsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "placeholder_little_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_little_ic' is used in nib 'ScheduleColapsView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ScheduleDoneAllCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ScheduleDoneAllCell

      let bundle = R.hostingBundle
      let identifier = "ScheduleDoneAllCell"
      let name = "ScheduleDoneAllCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScheduleDoneAllCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScheduleDoneAllCell
      }

      fileprivate init() {}
    }

    struct _ScheduleSettingsController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScheduleSettingsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "scheldure_settings_bell_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scheldure_settings_bell_ic' is used in nib 'ScheduleSettingsController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'SplashController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'SplashController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SubcribeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SubcribeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sub_active_check_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_active_check_ic' is used in nib 'SubcribeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sub_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_back_ic' is used in nib 'SubcribeController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sub_close_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sub_close_ic' is used in nib 'SubcribeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WishListController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WishListController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'WishListController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wishlist_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wishlist_no_data' is used in nib 'WishListController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let gardenController = StoryboardViewControllerResource<GardenController>(identifier: "GardenController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let menuController = StoryboardViewControllerResource<MenuController>(identifier: "MenuController")
      let name = "Main"
      let plantsController = StoryboardViewControllerResource<PlantsController>(identifier: "PlantsController")
      let scheduleController = StoryboardViewControllerResource<ScheduleController>(identifier: "ScheduleController")

      func gardenController(_: Void = ()) -> GardenController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gardenController)
      }

      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func menuController(_: Void = ()) -> MenuController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuController)
      }

      func plantsController(_: Void = ()) -> PlantsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: plantsController)
      }

      func scheduleController(_: Void = ()) -> ScheduleController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduleController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "background_main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background_main' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "garden_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_back_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_backToTop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_backToTop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_line' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_unique", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_unique' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_garden", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_garden' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_plants", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_plants' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_schedule", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_schedule' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scheldure_bell_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scheldure_bell_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "scheldure_settings_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'scheldure_settings_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().gardenController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gardenController' could not be loaded from storyboard 'Main' as 'GardenController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().menuController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuController' could not be loaded from storyboard 'Main' as 'MenuController'.") }
        if _R.storyboard.main().plantsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'plantsController' could not be loaded from storyboard 'Main' as 'PlantsController'.") }
        if _R.storyboard.main().scheduleController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduleController' could not be loaded from storyboard 'Main' as 'ScheduleController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
