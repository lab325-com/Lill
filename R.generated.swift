//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 14 files.
  struct file {
    /// Resource file `Debug.xcconfig`.
    static let debugXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Debug", pathExtension: "xcconfig")
    /// Resource file `Generator.xcconfig`.
    static let generatorXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Generator", pathExtension: "xcconfig")
    /// Resource file `GetCatalogPlants.graphql`.
    static let getCatalogPlantsGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "GetCatalogPlants", pathExtension: "graphql")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Login.graphql`.
    static let loginGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Login", pathExtension: "graphql")
    /// Resource file `Me.graphql`.
    static let meGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "Me", pathExtension: "graphql")
    /// Resource file `RecognitionPhoto.graphql`.
    static let recognitionPhotoGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "RecognitionPhoto", pathExtension: "graphql")
    /// Resource file `Release.xcconfig`.
    static let releaseXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Release", pathExtension: "xcconfig")
    /// Resource file `SFProDisplay-Bold.ttf`.
    static let sfProDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Bold", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Medium.ttf`.
    static let sfProDisplayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Medium", pathExtension: "ttf")
    /// Resource file `SFProDisplay-Regular.ttf`.
    static let sfProDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Regular", pathExtension: "ttf")
    /// Resource file `Staging.xcconfig`.
    static let stagingXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging", pathExtension: "xcconfig")
    /// Resource file `UploadPhoto.graphql`.
    static let uploadPhotoGraphql = Rswift.FileResource(bundle: R.hostingBundle, name: "UploadPhoto", pathExtension: "graphql")
    /// Resource file `schema.json`.
    static let schemaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "schema", pathExtension: "json")

    /// `bundle.url(forResource: "Debug", withExtension: "xcconfig")`
    static func debugXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.debugXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Generator", withExtension: "xcconfig")`
    static func generatorXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.generatorXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GetCatalogPlants", withExtension: "graphql")`
    static func getCatalogPlantsGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.getCatalogPlantsGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Login", withExtension: "graphql")`
    static func loginGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loginGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Me", withExtension: "graphql")`
    static func meGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RecognitionPhoto", withExtension: "graphql")`
    static func recognitionPhotoGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.recognitionPhotoGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Release", withExtension: "xcconfig")`
    static func releaseXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.releaseXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Bold", withExtension: "ttf")`
    static func sfProDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Medium", withExtension: "ttf")`
    static func sfProDisplayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFProDisplay-Regular", withExtension: "ttf")`
    static func sfProDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Staging", withExtension: "xcconfig")`
    static func stagingXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "UploadPhoto", withExtension: "graphql")`
    static func uploadPhotoGraphql(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.uploadPhotoGraphql
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "schema", withExtension: "json")`
    static func schemaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.schemaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SFProDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SFProDisplay-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SFProDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 53 images.
  struct image {
    /// Image `garden_back_ic`.
    static let garden_back_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "garden_back_ic")
    /// Image `ic_background`.
    static let ic_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_background")
    /// Image `ic_choose_identify_diagnosis`.
    static let ic_choose_identify_diagnosis = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_diagnosis")
    /// Image `ic_choose_identify_photo`.
    static let ic_choose_identify_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose_identify_photo")
    /// Image `ic_diagnosis_checkmark`.
    static let ic_diagnosis_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_checkmark")
    /// Image `ic_diagnosis_close`.
    static let ic_diagnosis_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_close")
    /// Image `ic_diagnosis_onboarding_1`.
    static let ic_diagnosis_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_1")
    /// Image `ic_diagnosis_onboarding_2`.
    static let ic_diagnosis_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_2")
    /// Image `ic_diagnosis_onboarding_3`.
    static let ic_diagnosis_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_3")
    /// Image `ic_diagnosis_onboarding_4`.
    static let ic_diagnosis_onboarding_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_onboarding_4")
    /// Image `ic_diagnosis_phonendoscope`.
    static let ic_diagnosis_phonendoscope = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_diagnosis_phonendoscope")
    /// Image `ic_identify_checkmark`.
    static let ic_identify_checkmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_checkmark")
    /// Image `ic_identify_close`.
    static let ic_identify_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_close")
    /// Image `ic_identify_flash_off`.
    static let ic_identify_flash_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_off")
    /// Image `ic_identify_flash_on`.
    static let ic_identify_flash_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_flash_on")
    /// Image `ic_identify_gallery`.
    static let ic_identify_gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_gallery")
    /// Image `ic_identify_no_data`.
    static let ic_identify_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_no_data")
    /// Image `ic_identify_onboarding_1`.
    static let ic_identify_onboarding_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_1")
    /// Image `ic_identify_onboarding_2`.
    static let ic_identify_onboarding_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_2")
    /// Image `ic_identify_onboarding_3`.
    static let ic_identify_onboarding_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_onboarding_3")
    /// Image `ic_identify_photo_black`.
    static let ic_identify_photo_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_black")
    /// Image `ic_identify_photo_rectangle`.
    static let ic_identify_photo_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_rectangle")
    /// Image `ic_identify_photo_white`.
    static let ic_identify_photo_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_identify_photo_white")
    /// Image `ic_login_apple`.
    static let ic_login_apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_apple")
    /// Image `ic_login_bg`.
    static let ic_login_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_bg")
    /// Image `ic_login_close`.
    static let ic_login_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_close")
    /// Image `ic_login_facebook`.
    static let ic_login_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_facebook")
    /// Image `ic_login_google`.
    static let ic_login_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_google")
    /// Image `ic_login_instagram`.
    static let ic_login_instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_instagram")
    /// Image `ic_login_logo`.
    static let ic_login_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_login_logo")
    /// Image `ic_plants_add`.
    static let ic_plants_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_add")
    /// Image `ic_plants_backToTop`.
    static let ic_plants_backToTop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_backToTop")
    /// Image `ic_plants_close`.
    static let ic_plants_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_close")
    /// Image `ic_plants_favorite`.
    static let ic_plants_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_favorite")
    /// Image `ic_plants_line`.
    static let ic_plants_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_line")
    /// Image `ic_plants_photo`.
    static let ic_plants_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_photo")
    /// Image `ic_plants_search`.
    static let ic_plants_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_search")
    /// Image `ic_plants_unfavorite`.
    static let ic_plants_unfavorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unfavorite")
    /// Image `ic_plants_unique`.
    static let ic_plants_unique = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plants_unique")
    /// Image `ic_tab_garden_act`.
    static let ic_tab_garden_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden_act")
    /// Image `ic_tab_garden`.
    static let ic_tab_garden = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_garden")
    /// Image `ic_tab_menu_act`.
    static let ic_tab_menu_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu_act")
    /// Image `ic_tab_menu`.
    static let ic_tab_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_menu")
    /// Image `ic_tab_plants_act`.
    static let ic_tab_plants_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants_act")
    /// Image `ic_tab_plants`.
    static let ic_tab_plants = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_plants")
    /// Image `ic_tab_schedule_act`.
    static let ic_tab_schedule_act = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule_act")
    /// Image `ic_tab_schedule`.
    static let ic_tab_schedule = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tab_schedule")
    /// Image `ic_wishlist_no_data`.
    static let ic_wishlist_no_data = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wishlist_no_data")
    /// Image `temp_onboarding_1_ic`.
    static let temp_onboarding_1_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_1_ic")
    /// Image `temp_onboarding_2_ic`.
    static let temp_onboarding_2_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_2_ic")
    /// Image `temp_onboarding_3_ic`.
    static let temp_onboarding_3_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_onboarding_3_ic")
    /// Image `temp_plants_ic`.
    static let temp_plants_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp_plants_ic")
    /// Image `temp`.
    static let temp = Rswift.ImageResource(bundle: R.hostingBundle, name: "temp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "garden_back_ic", bundle: ..., traitCollection: ...)`
    static func garden_back_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.garden_back_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_background", bundle: ..., traitCollection: ...)`
    static func ic_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_diagnosis", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_diagnosis(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_diagnosis, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_choose_identify_photo", bundle: ..., traitCollection: ...)`
    static func ic_choose_identify_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose_identify_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_close", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_onboarding_4", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_onboarding_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_onboarding_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_diagnosis_phonendoscope", bundle: ..., traitCollection: ...)`
    static func ic_diagnosis_phonendoscope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_diagnosis_phonendoscope, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_checkmark", bundle: ..., traitCollection: ...)`
    static func ic_identify_checkmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_checkmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_close", bundle: ..., traitCollection: ...)`
    static func ic_identify_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_off", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_flash_on", bundle: ..., traitCollection: ...)`
    static func ic_identify_flash_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_flash_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_gallery", bundle: ..., traitCollection: ...)`
    static func ic_identify_gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_no_data", bundle: ..., traitCollection: ...)`
    static func ic_identify_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_1", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_2", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_onboarding_3", bundle: ..., traitCollection: ...)`
    static func ic_identify_onboarding_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_onboarding_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_black", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_rectangle", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_rectangle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_identify_photo_white", bundle: ..., traitCollection: ...)`
    static func ic_identify_photo_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_identify_photo_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_apple", bundle: ..., traitCollection: ...)`
    static func ic_login_apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_bg", bundle: ..., traitCollection: ...)`
    static func ic_login_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_close", bundle: ..., traitCollection: ...)`
    static func ic_login_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_facebook", bundle: ..., traitCollection: ...)`
    static func ic_login_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_google", bundle: ..., traitCollection: ...)`
    static func ic_login_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_instagram", bundle: ..., traitCollection: ...)`
    static func ic_login_instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_login_logo", bundle: ..., traitCollection: ...)`
    static func ic_login_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_login_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_add", bundle: ..., traitCollection: ...)`
    static func ic_plants_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_backToTop", bundle: ..., traitCollection: ...)`
    static func ic_plants_backToTop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_backToTop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_close", bundle: ..., traitCollection: ...)`
    static func ic_plants_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_favorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_line", bundle: ..., traitCollection: ...)`
    static func ic_plants_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_photo", bundle: ..., traitCollection: ...)`
    static func ic_plants_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_search", bundle: ..., traitCollection: ...)`
    static func ic_plants_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unfavorite", bundle: ..., traitCollection: ...)`
    static func ic_plants_unfavorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unfavorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plants_unique", bundle: ..., traitCollection: ...)`
    static func ic_plants_unique(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plants_unique, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_garden_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_garden_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_garden_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_menu_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_menu_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_menu_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_plants_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_plants_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_plants_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tab_schedule_act", bundle: ..., traitCollection: ...)`
    static func ic_tab_schedule_act(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tab_schedule_act, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wishlist_no_data", bundle: ..., traitCollection: ...)`
    static func ic_wishlist_no_data(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wishlist_no_data, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp", bundle: ..., traitCollection: ...)`
    static func temp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_1_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_1_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_1_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_2_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_2_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_2_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_onboarding_3_ic", bundle: ..., traitCollection: ...)`
    static func temp_onboarding_3_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_onboarding_3_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "temp_plants_ic", bundle: ..., traitCollection: ...)`
    static func temp_plants_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temp_plants_ic, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 14 nibs.
  struct nib {
    /// Nib `ChooseIdentifyController`.
    static let chooseIdentifyController = _R.nib._ChooseIdentifyController()
    /// Nib `DiagnosisController`.
    static let diagnosisController = _R.nib._DiagnosisController()
    /// Nib `GardenButtonCell`.
    static let gardenButtonCell = _R.nib._GardenButtonCell()
    /// Nib `GardenViewCell`.
    static let gardenViewCell = _R.nib._GardenViewCell()
    /// Nib `IdentifyController`.
    static let identifyController = _R.nib._IdentifyController()
    /// Nib `LoginController`.
    static let loginController = _R.nib._LoginController()
    /// Nib `OnboardingFirsController`.
    static let onboardingFirsController = _R.nib._OnboardingFirsController()
    /// Nib `OnboardingPageController`.
    static let onboardingPageController = _R.nib._OnboardingPageController()
    /// Nib `OnboardingSecondController`.
    static let onboardingSecondController = _R.nib._OnboardingSecondController()
    /// Nib `OnboardingThreeController`.
    static let onboardingThreeController = _R.nib._OnboardingThreeController()
    /// Nib `PlantCollectionCell`.
    static let plantCollectionCell = _R.nib._PlantCollectionCell()
    /// Nib `SplashController`.
    static let splashController = _R.nib._SplashController()
    /// Nib `SubcribeController`.
    static let subcribeController = _R.nib._SubcribeController()
    /// Nib `WishListController`.
    static let wishListController = _R.nib._WishListController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ChooseIdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.chooseIdentifyController) instead")
    static func chooseIdentifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.chooseIdentifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DiagnosisController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.diagnosisController) instead")
    static func diagnosisController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.diagnosisController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenButtonCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenButtonCell) instead")
    static func gardenButtonCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenButtonCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GardenViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gardenViewCell) instead")
    static func gardenViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gardenViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "IdentifyController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.identifyController) instead")
    static func identifyController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.identifyController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginController) instead")
    static func loginController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingFirsController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingFirsController) instead")
    static func onboardingFirsController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingFirsController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingPageController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingPageController) instead")
    static func onboardingPageController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingPageController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingSecondController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingSecondController) instead")
    static func onboardingSecondController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingSecondController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OnboardingThreeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.onboardingThreeController) instead")
    static func onboardingThreeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.onboardingThreeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlantCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.plantCollectionCell) instead")
    static func plantCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.plantCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SplashController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.splashController) instead")
    static func splashController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.splashController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubcribeController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subcribeController) instead")
    static func subcribeController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subcribeController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WishListController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.wishListController) instead")
    static func wishListController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wishListController)
    }
    #endif

    static func chooseIdentifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.chooseIdentifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func diagnosisController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.diagnosisController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func gardenButtonCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
      return R.nib.gardenButtonCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
    }

    static func gardenViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
      return R.nib.gardenViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
    }

    static func identifyController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.identifyController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func loginController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingFirsController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingFirsController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingPageController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingPageController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingSecondController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingSecondController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func onboardingThreeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.onboardingThreeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func plantCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
      return R.nib.plantCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
    }

    static func splashController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.splashController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func subcribeController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.subcribeController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func wishListController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.wishListController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 38 localization keys.
    struct localizable {
      /// en translation: Add Unique
      ///
      /// Locales: en
      static let plants_uniquePlantButton = Rswift.StringResource(key: "plants_uniquePlantButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Analyzing image
      ///
      /// Locales: en
      static let identify_analize_image = Rswift.StringResource(key: "identify_analize_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en
      static let wish_list_back = Rswift.StringResource(key: "wish_list_back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Back to top
      ///
      /// Locales: en
      static let plants_backToTop = Rswift.StringResource(key: "plants_backToTop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let choose_identify_cancel = Rswift.StringResource(key: "choose_identify_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en
      static let plants_uniquePlantLabel = Rswift.StringResource(key: "plants_uniquePlantLabel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Capture
      ///
      /// Locales: en
      static let identify_capture = Rswift.StringResource(key: "identify_capture", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Diagnose
      ///
      /// Locales: en
      static let diagnosis_title = Rswift.StringResource(key: "diagnosis_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Diagnosis
      ///
      /// Locales: en
      static let choose_identify_diagnosis = Rswift.StringResource(key: "choose_identify_diagnosis", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en
      static let identify_result_info = Rswift.StringResource(key: "identify_result_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en
      static let login_info = Rswift.StringResource(key: "login_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Explore catalog
      ///
      /// Locales: en
      static let plants_explore = Rswift.StringResource(key: "plants_explore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Full-size image of Plant
      ///
      /// Locales: en
      static let identify_make_photo_info = Rswift.StringResource(key: "identify_make_photo_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identify
      ///
      /// Locales: en
      static let choose_identify_identify = Rswift.StringResource(key: "choose_identify_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identify Photo
      ///
      /// Locales: en
      static let identify_result_identify_photo = Rswift.StringResource(key: "identify_result_identify_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identify Results:
      ///
      /// Locales: en
      static let identify_results = Rswift.StringResource(key: "identify_results", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identify my Plants
      ///
      /// Locales: en
      static let plants_identifier = Rswift.StringResource(key: "plants_identifier", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en
      static let identify_result_title = Rswift.StringResource(key: "identify_result_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identifying
      ///
      /// Locales: en
      static let identify_title = Rswift.StringResource(key: "identify_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en
      static let identify_info = Rswift.StringResource(key: "identify_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Identifying plant
      ///
      /// Locales: en
      static let identify_analize_identify_plant = Rswift.StringResource(key: "identify_analize_identify_plant", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login with
      ///
      /// Locales: en
      static let login_loginWith = Rswift.StringResource(key: "login_loginWith", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en
      static let identify_make_photo_title = Rswift.StringResource(key: "identify_make_photo_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en
      static let identify_overview_info = Rswift.StringResource(key: "identify_overview_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en
      static let identify_photo_quality_info = Rswift.StringResource(key: "identify_photo_quality_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Overview
      ///
      /// Locales: en
      static let identify_overview_title = Rswift.StringResource(key: "identify_overview_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Photo quality
      ///
      /// Locales: en
      static let identify_photo_quality_title = Rswift.StringResource(key: "identify_photo_quality_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Please wait
      ///
      /// Locales: en
      static let activity_title = Rswift.StringResource(key: "activity_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Premium
      ///
      /// Locales: en
      static let choose_identify_premium = Rswift.StringResource(key: "choose_identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Retake Photo
      ///
      /// Locales: en
      static let identify_result_retake_photo = Rswift.StringResource(key: "identify_result_retake_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Search by Name
      ///
      /// Locales: en
      static let plants_search = Rswift.StringResource(key: "plants_search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sorry,  no results found
      ///
      /// Locales: en
      static let identify_no_data = Rswift.StringResource(key: "identify_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Start Identify
      ///
      /// Locales: en
      static let identify_start_identify = Rswift.StringResource(key: "identify_start_identify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wishlist
      ///
      /// Locales: en
      static let wish_list_title = Rswift.StringResource(key: "wish_list_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Wishlist is empty
      ///
      /// Locales: en
      static let wish_list_no_data = Rswift.StringResource(key: "wish_list_no_data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: free snaps
      ///
      /// Locales: en
      static let identify_free_snaps = Rswift.StringResource(key: "identify_free_snaps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: free snaps left
      ///
      /// Locales: en
      static let identify_result_snaps_left = Rswift.StringResource(key: "identify_result_snaps_left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: go premium
      ///
      /// Locales: en
      static let identify_premium = Rswift.StringResource(key: "identify_premium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Add Unique
      ///
      /// Locales: en
      static func plants_uniquePlantButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantButton"
        }

        return NSLocalizedString("plants_uniquePlantButton", bundle: bundle, comment: "")
      }

      /// en translation: Analyzing image
      ///
      /// Locales: en
      static func identify_analize_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_image"
        }

        return NSLocalizedString("identify_analize_image", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en
      static func wish_list_back(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_back"
        }

        return NSLocalizedString("wish_list_back", bundle: bundle, comment: "")
      }

      /// en translation: Back to top
      ///
      /// Locales: en
      static func plants_backToTop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_backToTop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_backToTop"
        }

        return NSLocalizedString("plants_backToTop", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func choose_identify_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_cancel"
        }

        return NSLocalizedString("choose_identify_cancel", bundle: bundle, comment: "")
      }

      /// en translation: Can’t identify or find in catalog?
      ///
      /// Locales: en
      static func plants_uniquePlantLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_uniquePlantLabel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_uniquePlantLabel"
        }

        return NSLocalizedString("plants_uniquePlantLabel", bundle: bundle, comment: "")
      }

      /// en translation: Capture
      ///
      /// Locales: en
      static func identify_capture(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_capture", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_capture"
        }

        return NSLocalizedString("identify_capture", bundle: bundle, comment: "")
      }

      /// en translation: Diagnose
      ///
      /// Locales: en
      static func diagnosis_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diagnosis_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diagnosis_title"
        }

        return NSLocalizedString("diagnosis_title", bundle: bundle, comment: "")
      }

      /// en translation: Diagnosis
      ///
      /// Locales: en
      static func choose_identify_diagnosis(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_diagnosis", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_diagnosis"
        }

        return NSLocalizedString("choose_identify_diagnosis", bundle: bundle, comment: "")
      }

      /// en translation: Do you want to start analyzing Photo?
      ///
      /// Locales: en
      static func identify_result_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_info"
        }

        return NSLocalizedString("identify_result_info", bundle: bundle, comment: "")
      }

      /// en translation: Explore Plants and create garden of your dream
      ///
      /// Locales: en
      static func login_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_info"
        }

        return NSLocalizedString("login_info", bundle: bundle, comment: "")
      }

      /// en translation: Explore catalog
      ///
      /// Locales: en
      static func plants_explore(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_explore", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_explore"
        }

        return NSLocalizedString("plants_explore", bundle: bundle, comment: "")
      }

      /// en translation: Full-size image of Plant
      ///
      /// Locales: en
      static func identify_make_photo_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_info"
        }

        return NSLocalizedString("identify_make_photo_info", bundle: bundle, comment: "")
      }

      /// en translation: Identify
      ///
      /// Locales: en
      static func choose_identify_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_identify"
        }

        return NSLocalizedString("choose_identify_identify", bundle: bundle, comment: "")
      }

      /// en translation: Identify Photo
      ///
      /// Locales: en
      static func identify_result_identify_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_identify_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_identify_photo"
        }

        return NSLocalizedString("identify_result_identify_photo", bundle: bundle, comment: "")
      }

      /// en translation: Identify Results:
      ///
      /// Locales: en
      static func identify_results(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_results", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_results"
        }

        return NSLocalizedString("identify_results", bundle: bundle, comment: "")
      }

      /// en translation: Identify my Plants
      ///
      /// Locales: en
      static func plants_identifier(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_identifier", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_identifier"
        }

        return NSLocalizedString("plants_identifier", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en
      static func identify_result_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_title"
        }

        return NSLocalizedString("identify_result_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying
      ///
      /// Locales: en
      static func identify_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_title"
        }

        return NSLocalizedString("identify_title", bundle: bundle, comment: "")
      }

      /// en translation: Identifying Plant by Photo
      ///
      /// Locales: en
      static func identify_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_info"
        }

        return NSLocalizedString("identify_info", bundle: bundle, comment: "")
      }

      /// en translation: Identifying plant
      ///
      /// Locales: en
      static func identify_analize_identify_plant(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_analize_identify_plant", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_analize_identify_plant"
        }

        return NSLocalizedString("identify_analize_identify_plant", bundle: bundle, comment: "")
      }

      /// en translation: Login with
      ///
      /// Locales: en
      static func login_loginWith(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_loginWith", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_loginWith"
        }

        return NSLocalizedString("login_loginWith", bundle: bundle, comment: "")
      }

      /// en translation: Make Photo of Whole Plant
      ///
      /// Locales: en
      static func identify_make_photo_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_make_photo_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_make_photo_title"
        }

        return NSLocalizedString("identify_make_photo_title", bundle: bundle, comment: "")
      }

      /// en translation: Make sure that plant isolated from other plants
      ///
      /// Locales: en
      static func identify_overview_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_info"
        }

        return NSLocalizedString("identify_overview_info", bundle: bundle, comment: "")
      }

      /// en translation: Make sure the photo is sharp and high-resolution
      ///
      /// Locales: en
      static func identify_photo_quality_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_info"
        }

        return NSLocalizedString("identify_photo_quality_info", bundle: bundle, comment: "")
      }

      /// en translation: Overview
      ///
      /// Locales: en
      static func identify_overview_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_overview_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_overview_title"
        }

        return NSLocalizedString("identify_overview_title", bundle: bundle, comment: "")
      }

      /// en translation: Photo quality
      ///
      /// Locales: en
      static func identify_photo_quality_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_photo_quality_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_photo_quality_title"
        }

        return NSLocalizedString("identify_photo_quality_title", bundle: bundle, comment: "")
      }

      /// en translation: Please wait
      ///
      /// Locales: en
      static func activity_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("activity_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "activity_title"
        }

        return NSLocalizedString("activity_title", bundle: bundle, comment: "")
      }

      /// en translation: Premium
      ///
      /// Locales: en
      static func choose_identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("choose_identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "choose_identify_premium"
        }

        return NSLocalizedString("choose_identify_premium", bundle: bundle, comment: "")
      }

      /// en translation: Retake Photo
      ///
      /// Locales: en
      static func identify_result_retake_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_retake_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_retake_photo"
        }

        return NSLocalizedString("identify_result_retake_photo", bundle: bundle, comment: "")
      }

      /// en translation: Search by Name
      ///
      /// Locales: en
      static func plants_search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("plants_search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "plants_search"
        }

        return NSLocalizedString("plants_search", bundle: bundle, comment: "")
      }

      /// en translation: Sorry,  no results found
      ///
      /// Locales: en
      static func identify_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_no_data"
        }

        return NSLocalizedString("identify_no_data", bundle: bundle, comment: "")
      }

      /// en translation: Start Identify
      ///
      /// Locales: en
      static func identify_start_identify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_start_identify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_start_identify"
        }

        return NSLocalizedString("identify_start_identify", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist
      ///
      /// Locales: en
      static func wish_list_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_title"
        }

        return NSLocalizedString("wish_list_title", bundle: bundle, comment: "")
      }

      /// en translation: Wishlist is empty
      ///
      /// Locales: en
      static func wish_list_no_data(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wish_list_no_data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wish_list_no_data"
        }

        return NSLocalizedString("wish_list_no_data", bundle: bundle, comment: "")
      }

      /// en translation: free snaps
      ///
      /// Locales: en
      static func identify_free_snaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_free_snaps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_free_snaps"
        }

        return NSLocalizedString("identify_free_snaps", bundle: bundle, comment: "")
      }

      /// en translation: free snaps left
      ///
      /// Locales: en
      static func identify_result_snaps_left(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_result_snaps_left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_result_snaps_left"
        }

        return NSLocalizedString("identify_result_snaps_left", bundle: bundle, comment: "")
      }

      /// en translation: go premium
      ///
      /// Locales: en
      static func identify_premium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("identify_premium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "identify_premium"
        }

        return NSLocalizedString("identify_premium", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ChooseIdentifyController.validate()
      try _DiagnosisController.validate()
      try _GardenViewCell.validate()
      try _IdentifyController.validate()
      try _LoginController.validate()
      try _OnboardingFirsController.validate()
      try _OnboardingSecondController.validate()
      try _OnboardingThreeController.validate()
      try _PlantCollectionCell.validate()
      try _SplashController.validate()
      try _SubcribeController.validate()
      try _WishListController.validate()
    }

    struct _ChooseIdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ChooseIdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_choose_identify_diagnosis", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_diagnosis' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose_identify_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose_identify_photo' is used in nib 'ChooseIdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _DiagnosisController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DiagnosisController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_checkmark' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_1' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_2' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_3' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_onboarding_4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_onboarding_4' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_diagnosis_phonendoscope", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_diagnosis_phonendoscope' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'DiagnosisController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GardenButtonCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GardenButtonCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenButtonCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenButtonCell
      }

      fileprivate init() {}
    }

    struct _GardenViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GardenViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GardenViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GardenViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_plants_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_plants_ic' is used in nib 'GardenViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _IdentifyController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IdentifyController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_checkmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_checkmark' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_off", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_off' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_flash_on", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_flash_on' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_gallery' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_no_data' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_1' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_2' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_onboarding_3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_onboarding_3' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_black' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_identify_photo_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_photo_white' is used in nib 'IdentifyController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LoginController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_apple", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_apple' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_close' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_facebook", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_facebook' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_google' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_instagram", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_instagram' is used in nib 'LoginController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'LoginController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingFirsController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingFirsController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_1_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_1_ic' is used in nib 'OnboardingFirsController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingPageController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OnboardingPageController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _OnboardingSecondController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingSecondController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_2_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_2_ic' is used in nib 'OnboardingSecondController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OnboardingThreeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnboardingThreeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "temp_onboarding_3_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_onboarding_3_ic' is used in nib 'OnboardingThreeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlantCollectionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PlantCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlantCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlantCollectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_plants_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_add' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "temp_plants_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'temp_plants_ic' is used in nib 'PlantCollectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SplashController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SplashController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in nib 'SplashController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in nib 'SplashController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SubcribeController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SubcribeController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_identify_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_identify_close' is used in nib 'SubcribeController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WishListController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WishListController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_background' is used in nib 'WishListController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wishlist_no_data", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wishlist_no_data' is used in nib 'WishListController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let gardenController = StoryboardViewControllerResource<GardenController>(identifier: "GardenController")
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let menuController = StoryboardViewControllerResource<MenuController>(identifier: "MenuController")
      let name = "Main"
      let plantsController = StoryboardViewControllerResource<PlantsController>(identifier: "PlantsController")
      let scheduleController = StoryboardViewControllerResource<ScheduleController>(identifier: "ScheduleController")

      func gardenController(_: Void = ()) -> GardenController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gardenController)
      }

      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }

      func menuController(_: Void = ()) -> MenuController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuController)
      }

      func plantsController(_: Void = ()) -> PlantsController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: plantsController)
      }

      func scheduleController(_: Void = ()) -> ScheduleController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scheduleController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "garden_back_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'garden_back_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_login_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_backToTop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_backToTop' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_favorite", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_favorite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_line' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_photo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plants_unique", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plants_unique' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_garden", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_garden' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_plants", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_plants' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tab_schedule", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_tab_schedule' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().gardenController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gardenController' could not be loaded from storyboard 'Main' as 'GardenController'.") }
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
        if _R.storyboard.main().menuController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuController' could not be loaded from storyboard 'Main' as 'MenuController'.") }
        if _R.storyboard.main().plantsController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'plantsController' could not be loaded from storyboard 'Main' as 'PlantsController'.") }
        if _R.storyboard.main().scheduleController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scheduleController' could not be loaded from storyboard 'Main' as 'ScheduleController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
